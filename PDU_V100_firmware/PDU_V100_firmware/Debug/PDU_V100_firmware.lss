
PDU_V100_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000422  00800100  000038ee  00003982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049a  00800522  00800522  00003da4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000610  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000617d  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cd1  00000000  00000000  0000a5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035f0  00000000  00000000  0000c29a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb0  00000000  00000000  0000f88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b98  00000000  00000000  0001083c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000365d  00000000  00000000  000123d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00015a31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__ctors_end>
       4:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
       8:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
       c:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      10:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      14:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      18:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      1c:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      20:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      24:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      28:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      2c:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      30:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      34:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      38:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      3c:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__vector_15>
      40:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      44:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      48:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_18>
      4c:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__vector_19>
      50:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      54:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_21>
      58:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      5c:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      60:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      64:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      68:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      6c:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      70:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      74:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      78:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_30>
      7c:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_31>
      80:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      84:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>
      88:	0c 94 01 04 	jmp	0x802	; 0x802 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2332>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <NAME_TABLE>:
     18e:	54 45 43 31 5f 42 55 43 4b 00 00 00 54 45 43 32     TEC1_BUCK...TEC2
     19e:	5f 42 55 43 4b 00 00 00 54 45 43 33 5f 42 55 43     _BUCK...TEC3_BUC
     1ae:	4b 00 00 00 54 45 43 34 5f 42 55 43 4b 00 00 00     K...TEC4_BUCK...
     1be:	4d 43 55 5f 42 55 43 4b 20 00 00 00 4c 45 44 5f     MCU_BUCK ...LED_
     1ce:	42 55 43 4b 20 00 00 00 43 4d 34 5f 42 55 43 4b     BUCK ...CM4_BUCK
     1de:	20 00 00 00 54 45 43 31 20 20 20 20 20 00 00 00      ...TEC1     ...
     1ee:	54 45 43 32 20 20 20 20 20 00 00 00 54 45 43 33     TEC2     ...TEC3
     1fe:	20 20 20 20 20 00 00 00 54 45 43 34 20 20 20 20          ...TEC4    
     20e:	20 00 00 00 43 50 4f 43 20 20 20 20 20 00 00 00      ...CPOC     ...
     21e:	49 4f 55 20 20 20 20 20 20 00 00 00 4c 45 44 5f     IOU      ...LED_
     22e:	52 47 42 20 20 00 00 00 4c 45 44 5f 49 52 20 20     RGB  ...LED_IR  
     23e:	20 00 00 00 43 4d 34 20 20 20 20 20 20 00 00 00      ...CM4      ...
     24e:	56 49 4e 50 55 54 20 20 20 00 00 00 53 55 50 45     VINPUT   ...SUPE
     25e:	52 43 41 50 20 00 00 00 56 42 55 53 20 20 20 20     RCAP ...VBUS    
     26e:	20 00 00 00                                          ...

00000272 <SPLASH>:
     272:	0d 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2b2:	00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     2c2:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     2d2:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     2e2:	2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00 00 00     ................
     2f2:	00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     302:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     312:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     322:	2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00 00     ................
     332:	00 00 00 2e 2e 20 20 20 20 20 5f 5f 5f 5f 20 20     .....     ____  
     342:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     352:	20 20 20 20 20 5f 20 20 20 20 20 5f 20 5f 20 20          _     _ _  
     362:	20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00             ........
     372:	00 00 00 00 2e 2e 20 20 20 20 2f 20 5f 5f 5f 7c     ......    / ___|
     382:	20 5f 20 5f 5f 20 20 20 5f 5f 20 5f 20 20 5f 5f      _ __   __ _  __
     392:	5f 20 5f 5f 5f 7c 20 7c 20 20 20 28 5f 7c 5f 29     _ ___| |   (_|_)
     3a2:	5f 20 5f 5f 5f 20 20 20 20 2e 2e 0d 0a 00 00 00     _ ___    .......
     3b2:	00 00 00 00 00 2e 2e 20 20 20 20 5c 5f 5f 5f 20     .......    \___ 
     3c2:	5c 7c 20 27 5f 20 5c 20 2f 20 5f 60 20 7c 2f 20     \| '_ \ / _` |/ 
     3d2:	5f 5f 2f 20 5f 20 5c 20 7c 20 20 20 7c 20 7c 20     __/ _ \ |   | | 
     3e2:	7c 20 27 5f 20 20 5c 20 20 20 2e 2e 0d 0a 00 00     | '_  \   ......
     3f2:	00 00 00 00 00 00 2e 2e 20 20 20 20 20 5f 5f 5f     ........     ___
     402:	29 20 7c 20 7c 5f 29 20 7c 20 28 5f 7c 20 7c 20     ) | |_) | (_| | 
     412:	28 5f 7c 20 20 5f 5f 2f 20 7c 5f 5f 5f 7c 20 7c     (_|  __/ |___| |
     422:	20 7c 20 7c 20 7c 20 7c 20 20 20 2e 2e 0d 0a 00      | | | |   .....
     432:	00 00 00 00 00 00 00 2e 2e 20 20 20 20 7c 5f 5f     .........    |__
     442:	5f 5f 2f 7c 20 2e 5f 5f 2f 20 5c 5f 5f 2c 5f 7c     __/| .__/ \__,_|
     452:	5c 5f 5f 5f 5c 5f 5f 5f 7c 5f 5f 5f 5f 5f 7c 5f     \___\___|_____|_
     462:	7c 5f 7c 5f 7c 20 7c 5f 7c 20 20 20 2e 2e 0d 0a     |_|_| |_|   ....
	...
     47a:	2e 2e 20 20 20 20 20 20 20 20 20 20 7c 5f 7c 20     ..          |_| 
     48a:	20 20 20 5f 5f 5f 5f 20 20 5f 5f 5f 5f 20 20 5f        ____  ____  _
     49a:	20 20 20 5f 20 20 20 20 20 20 20 20 20 20 20 20        _            
     4aa:	20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00 00          ...........
     4ba:	00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
     4ca:	20 20 20 7c 20 20 5f 20 5c 7c 20 20 5f 20 5c 7c        |  _ \|  _ \|
     4da:	20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20 20      | | |          
     4ea:	20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00           ..........
     4fa:	00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20     ....            
     50a:	20 20 20 20 7c 20 7c 5f 29 20 7c 20 7c 20 7c 20         | |_) | | | 
     51a:	7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20     | | | |         
     52a:	20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00            .........
     53a:	00 00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20     .....           
     54a:	20 20 20 20 20 7c 20 20 5f 5f 2f 7c 20 7c 5f 7c          |  __/| |_|
     55a:	20 7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20      | |_| |        
     56a:	20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00             ........
     57a:	00 00 00 00 2e 2e 20 20 20 20 20 20 20 20 20 20     ......          
     58a:	20 20 20 20 20 20 7c 5f 7c 20 20 20 7c 5f 5f 5f           |_|   |___
     59a:	5f 2f 20 5c 5f 5f 5f 2f 20 20 20 20 20 20 20 20     _/ \___/        
     5aa:	20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00              .......
     5ba:	00 00 00 00 00 2e 2e 20 20 20 20 20 20 20 20 20     .......         
     5ca:	20 20 20 20 20 5f 5f 20 20 20 20 20 5f 5f 5f 20          __     ___ 
     5da:	20 20 5f 5f 5f 20 20 20 5f 5f 5f 20 20 20 20 20       ___   ___     
     5ea:	20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00               ......
     5fa:	00 00 00 00 00 00 2e 2e 20 20 20 20 20 20 20 20     ........        
     60a:	20 20 20 20 20 20 5c 20 5c 20 20 20 2f 20 2f 20           \ \   / / 
     61a:	7c 20 2f 20 5f 20 5c 20 2f 20 5f 20 5c 20 20 20     | / _ \ / _ \   
     62a:	20 20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00                .....
     63a:	00 00 00 00 00 00 00 2e 2e 20 20 20 20 20 20 20     .........       
     64a:	20 20 20 20 20 20 20 20 5c 20 5c 20 2f 20 2f 7c             \ \ / /|
     65a:	20 7c 7c 20 7c 20 7c 20 7c 20 7c 20 7c 20 7c 20      || | | | | | | 
     66a:	20 20 20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a                 ....
	...
     682:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     692:	20 20 5c 20 56 20 2f 20 7c 20 7c 7c 20 7c 5f 7c       \ V / | || |_|
     6a2:	20 7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20      | |_| |        
     6b2:	20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00 00          ...........
     6c2:	00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
     6d2:	20 20 20 20 5c 5f 2f 20 20 7c 5f 28 5f 29 5f 5f         \_/  |_(_)__
     6e2:	5f 28 5f 29 5f 5f 5f 2f 20 20 20 20 20 20 20 20     _(_)___/        
     6f2:	20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00           ..........
     702:	00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20     ....            
     712:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     722:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     732:	20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00            .........
     742:	00 00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     752:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     762:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     772:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00     ................
     782:	00 00 00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     792:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     7a2:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     7b2:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00     ................
     7c2:	00 00 00 00 00 00                                   ......

000007c8 <__ctors_end>:
     7c8:	11 24       	eor	r1, r1
     7ca:	1f be       	out	0x3f, r1	; 63
     7cc:	cf ef       	ldi	r28, 0xFF	; 255
     7ce:	d0 e1       	ldi	r29, 0x10	; 16
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	cd bf       	out	0x3d, r28	; 61

000007d4 <__do_copy_data>:
     7d4:	15 e0       	ldi	r17, 0x05	; 5
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	b1 e0       	ldi	r27, 0x01	; 1
     7da:	ee ee       	ldi	r30, 0xEE	; 238
     7dc:	f8 e3       	ldi	r31, 0x38	; 56
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__do_copy_data+0x10>
     7e0:	05 90       	lpm	r0, Z+
     7e2:	0d 92       	st	X+, r0
     7e4:	a2 32       	cpi	r26, 0x22	; 34
     7e6:	b1 07       	cpc	r27, r17
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <__do_copy_data+0xc>

000007ea <__do_clear_bss>:
     7ea:	29 e0       	ldi	r18, 0x09	; 9
     7ec:	a2 e2       	ldi	r26, 0x22	; 34
     7ee:	b5 e0       	ldi	r27, 0x05	; 5
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <.do_clear_bss_start>

000007f2 <.do_clear_bss_loop>:
     7f2:	1d 92       	st	X+, r1

000007f4 <.do_clear_bss_start>:
     7f4:	ac 3b       	cpi	r26, 0xBC	; 188
     7f6:	b2 07       	cpc	r27, r18
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <.do_clear_bss_loop>
     7fa:	0e 94 26 0a 	call	0x144c	; 0x144c <main>
     7fe:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <_exit>

00000802 <__bad_interrupt>:
     802:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000806 <PDUINT_init>:

#include "PDU_board.h"
#include <avr/io.h>

void PDUINT_init() {
	PDU_INT_PORT &= ~(1<<PDU_INT_PIN);
     806:	82 b3       	in	r24, 0x12	; 18
     808:	8f 7d       	andi	r24, 0xDF	; 223
     80a:	82 bb       	out	0x12, r24	; 18
	PDU_INT_DDR |= (1<<PDU_INT_PIN);
     80c:	81 b3       	in	r24, 0x11	; 17
     80e:	80 62       	ori	r24, 0x20	; 32
     810:	81 bb       	out	0x11, r24	; 17
     812:	08 95       	ret

00000814 <PDU_INT_En>:
}

void PDU_INT_En() {
	PDU_INT_PORT |= (1<<PDU_INT_PIN);
     814:	82 b3       	in	r24, 0x12	; 18
     816:	80 62       	ori	r24, 0x20	; 32
     818:	82 bb       	out	0x12, r24	; 18
     81a:	08 95       	ret

0000081c <PDU_INT_Dis>:
}

void PDU_INT_Dis() {
	PDU_INT_PORT &= ~(1<<PDU_INT_PIN);
     81c:	82 b3       	in	r24, 0x12	; 18
     81e:	8f 7d       	andi	r24, 0xDF	; 223
     820:	82 bb       	out	0x12, r24	; 18
     822:	08 95       	ret

00000824 <Get_PDU_Int>:
}

uint8_t Get_PDU_Int() {
	return (PDU_INT_PINR & (1<< PDU_INT_PIN))>>PDU_INT_PIN;
     824:	80 b3       	in	r24, 0x10	; 16
     826:	80 72       	andi	r24, 0x20	; 32
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	95 95       	asr	r25
     82c:	87 95       	ror	r24
     82e:	95 95       	asr	r25
     830:	87 95       	ror	r24
     832:	95 95       	asr	r25
     834:	87 95       	ror	r24
     836:	95 95       	asr	r25
     838:	87 95       	ror	r24
     83a:	95 95       	asr	r25
     83c:	87 95       	ror	r24
     83e:	08 95       	ret

00000840 <write_threshold>:
inline void ADC_Interrupt_Dis(void) {
	ADCSRA &= ~(1<<ADIE);
}

inline void ADC_Start_Convert(void) {
	ADCSRA |= (1 < ADSC);
     840:	84 31       	cpi	r24, 0x14	; 20
     842:	48 f4       	brcc	.+18     	; 0x856 <write_threshold+0x16>
     844:	e8 2f       	mov	r30, r24
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	73 96       	adiw	r30, 0x13	; 19
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e5 5e       	subi	r30, 0xE5	; 229
     850:	f8 4f       	sbci	r31, 0xF8	; 248
     852:	72 a7       	std	Z+42, r23	; 0x2a
     854:	61 a7       	std	Z+41, r22	; 0x29
     856:	08 95       	ret

00000858 <ADC_init>:
     858:	f8 94       	cli
     85a:	87 e8       	ldi	r24, 0x87	; 135
     85c:	86 b9       	out	0x06, r24	; 6
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	87 b9       	out	0x07, r24	; 7
     862:	86 b1       	in	r24, 0x06	; 6
     864:	88 60       	ori	r24, 0x08	; 8
     866:	86 b9       	out	0x06, r24	; 6
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <ADC_data>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	06 c0       	rjmp	.+12     	; 0x87e <ADC_init+0x26>
     872:	e8 2f       	mov	r30, r24
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	e5 5e       	subi	r30, 0xE5	; 229
     878:	f8 4f       	sbci	r31, 0xF8	; 248
     87a:	11 82       	std	Z+1, r1	; 0x01
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	83 31       	cpi	r24, 0x13	; 19
     880:	c0 f3       	brcs	.-16     	; 0x872 <ADC_init+0x1a>
     882:	6b e7       	ldi	r22, 0x7B	; 123
     884:	72 e0       	ldi	r23, 0x02	; 2
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     88c:	62 ed       	ldi	r22, 0xD2	; 210
     88e:	72 e0       	ldi	r23, 0x02	; 2
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     896:	6b e7       	ldi	r22, 0x7B	; 123
     898:	72 e0       	ldi	r23, 0x02	; 2
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8a0:	62 ed       	ldi	r22, 0xD2	; 210
     8a2:	72 e0       	ldi	r23, 0x02	; 2
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8aa:	62 ed       	ldi	r22, 0xD2	; 210
     8ac:	72 e0       	ldi	r23, 0x02	; 2
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8b4:	6b e7       	ldi	r22, 0x7B	; 123
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8be:	62 ed       	ldi	r22, 0xD2	; 210
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	86 e0       	ldi	r24, 0x06	; 6
     8c4:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8c8:	6b e7       	ldi	r22, 0x7B	; 123
     8ca:	72 e0       	ldi	r23, 0x02	; 2
     8cc:	87 e0       	ldi	r24, 0x07	; 7
     8ce:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8d2:	67 e2       	ldi	r22, 0x27	; 39
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	88 e0       	ldi	r24, 0x08	; 8
     8d8:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8dc:	6f ed       	ldi	r22, 0xDF	; 223
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	89 e0       	ldi	r24, 0x09	; 9
     8e2:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8e6:	6b e7       	ldi	r22, 0x7B	; 123
     8e8:	72 e0       	ldi	r23, 0x02	; 2
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8f0:	67 e2       	ldi	r22, 0x27	; 39
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	8b e0       	ldi	r24, 0x0B	; 11
     8f6:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     8fa:	67 e2       	ldi	r22, 0x27	; 39
     8fc:	71 e0       	ldi	r23, 0x01	; 1
     8fe:	8c e0       	ldi	r24, 0x0C	; 12
     900:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     904:	6b e7       	ldi	r22, 0x7B	; 123
     906:	72 e0       	ldi	r23, 0x02	; 2
     908:	8d e0       	ldi	r24, 0x0D	; 13
     90a:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     90e:	6b e7       	ldi	r22, 0x7B	; 123
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     918:	67 e2       	ldi	r22, 0x27	; 39
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     922:	60 e2       	ldi	r22, 0x20	; 32
     924:	73 e0       	ldi	r23, 0x03	; 3
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     92c:	6a e1       	ldi	r22, 0x1A	; 26
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	81 e1       	ldi	r24, 0x11	; 17
     932:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     936:	61 e5       	ldi	r22, 0x51	; 81
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	82 e1       	ldi	r24, 0x12	; 18
     93c:	0e 94 20 04 	call	0x840	; 0x840 <write_threshold>
     940:	0e 94 37 05 	call	0xa6e	; 0xa6e <MUX_Init>
     944:	78 94       	sei
     946:	08 95       	ret

00000948 <__vector_21>:
}
uint8_t kk;
ISR(ADC_vect)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
	uint8_t adc_temp = ADC_data.Channel_to_read;
     970:	c0 91 2f 07 	lds	r28, 0x072F	; 0x80072f <ADC_data+0x14>
	if(ADC_data.RAW[1][adc_temp] < ADCW) {	//OVERLOAD, OVERVOLTAGE, OVERCURRENT {
     974:	0c 2f       	mov	r16, r28
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	f8 01       	movw	r30, r16
     97a:	73 96       	adiw	r30, 0x13	; 19
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e5 5e       	subi	r30, 0xE5	; 229
     982:	f8 4f       	sbci	r31, 0xF8	; 248
     984:	21 a5       	ldd	r18, Z+41	; 0x29
     986:	32 a5       	ldd	r19, Z+42	; 0x2a
     988:	84 b1       	in	r24, 0x04	; 4
     98a:	95 b1       	in	r25, 0x05	; 5
     98c:	28 17       	cp	r18, r24
     98e:	39 07       	cpc	r19, r25
     990:	88 f4       	brcc	.+34     	; 0x9b4 <__vector_21+0x6c>
//		ADC_data.RAW_Status[adc_temp] = ADC_to_Erro_Mapping[adc_temp];

		ADC_data.Error_Counter[adc_temp]++;
     992:	f8 01       	movw	r30, r16
     994:	e5 5e       	subi	r30, 0xE5	; 229
     996:	f8 4f       	sbci	r31, 0xF8	; 248
     998:	86 89       	ldd	r24, Z+22	; 0x16
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	86 8b       	std	Z+22, r24	; 0x16
		if(ADC_data.Error_Counter[adc_temp] > 10)
     99e:	86 89       	ldd	r24, Z+22	; 0x16
     9a0:	8b 30       	cpi	r24, 0x0B	; 11
     9a2:	88 f0       	brcs	.+34     	; 0x9c6 <__vector_21+0x7e>
		{
			OVER_ERR_CUTOFF(adc_temp);
     9a4:	8c 2f       	mov	r24, r28
     9a6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <OVER_ERR_CUTOFF>
			ADC_data.Error_Counter[adc_temp] = 0;
     9aa:	f8 01       	movw	r30, r16
     9ac:	e5 5e       	subi	r30, 0xE5	; 229
     9ae:	f8 4f       	sbci	r31, 0xF8	; 248
     9b0:	16 8a       	std	Z+22, r1	; 0x16
     9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__vector_21+0x7e>
		}
	} else {
		if(adc_temp == 9)	
     9b4:	c9 30       	cpi	r28, 0x09	; 9
     9b6:	19 f4       	brne	.+6      	; 0x9be <__vector_21+0x76>
			CHANNEL_STATUS_TABLE[9] = READY;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <CHANNEL_STATUS_TABLE+0x9>
		ADC_data.Error_Counter[adc_temp] = 0;
     9be:	f8 01       	movw	r30, r16
     9c0:	e5 5e       	subi	r30, 0xE5	; 229
     9c2:	f8 4f       	sbci	r31, 0xF8	; 248
     9c4:	16 8a       	std	Z+22, r1	; 0x16
	}
	if((adc_temp == 9) && (ADCW < ADC_17V)) {
     9c6:	c9 30       	cpi	r28, 0x09	; 9
     9c8:	49 f4       	brne	.+18     	; 0x9dc <__vector_21+0x94>
     9ca:	84 b1       	in	r24, 0x04	; 4
     9cc:	95 b1       	in	r25, 0x05	; 5
     9ce:	8c 38       	cpi	r24, 0x8C	; 140
     9d0:	91 40       	sbci	r25, 0x01	; 1
     9d2:	20 f4       	brcc	.+8      	; 0x9dc <__vector_21+0x94>
		VIN_LOSS();
     9d4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <VIN_LOSS>
		CHANNEL_STATUS_TABLE[9] = OFF;
     9d8:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <CHANNEL_STATUS_TABLE+0x9>
	}
	ADC_data.RAW[0][adc_temp] = ADCW;
     9dc:	84 b1       	in	r24, 0x04	; 4
     9de:	95 b1       	in	r25, 0x05	; 5
     9e0:	00 0f       	add	r16, r16
     9e2:	11 1f       	adc	r17, r17
     9e4:	f8 01       	movw	r30, r16
     9e6:	e5 5e       	subi	r30, 0xE5	; 229
     9e8:	f8 4f       	sbci	r31, 0xF8	; 248
     9ea:	92 a7       	std	Z+42, r25	; 0x2a
     9ec:	81 a7       	std	Z+41, r24	; 0x29
	
	adc_temp++;
     9ee:	cf 5f       	subi	r28, 0xFF	; 255
	kk = adc_temp;
     9f0:	c0 93 90 07 	sts	0x0790, r28	; 0x800790 <kk>
	if(adc_temp > (ANALOG_CHANNEL - 1)) {
     9f4:	c3 31       	cpi	r28, 0x13	; 19
     9f6:	50 f0       	brcs	.+20     	; 0xa0c <__vector_21+0xc4>
		ADMUX = 0x03;
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	87 b9       	out	0x07, r24	; 7
		MUX_Set_Channel(0);
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	0e 94 5a 05 	call	0xab4	; 0xab4 <MUX_Set_Channel>
		adc_temp = 0;
		ADC_data.Status = DATAREADY;
     a02:	85 e0       	ldi	r24, 0x05	; 5
     a04:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <ADC_data>
	adc_temp++;
	kk = adc_temp;
	if(adc_temp > (ANALOG_CHANNEL - 1)) {
		ADMUX = 0x03;
		MUX_Set_Channel(0);
		adc_temp = 0;
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	18 c0       	rjmp	.+48     	; 0xa3c <__vector_21+0xf4>
		ADC_data.Status = DATAREADY;
	} else {
		if(adc_temp < 16) {
     a0c:	c0 31       	cpi	r28, 0x10	; 16
     a0e:	30 f4       	brcc	.+12     	; 0xa1c <__vector_21+0xd4>
			MUX_Set_Channel(adc_temp);
     a10:	8c 2f       	mov	r24, r28
     a12:	0e 94 5a 05 	call	0xab4	; 0xab4 <MUX_Set_Channel>
			ADMUX = 0x03;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	87 b9       	out	0x07, r24	; 7
     a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__vector_21+0xee>
		}
		else if(adc_temp == 16)	
     a1c:	c0 31       	cpi	r28, 0x10	; 16
     a1e:	11 f4       	brne	.+4      	; 0xa24 <__vector_21+0xdc>
			ADMUX = 0x00;
     a20:	17 b8       	out	0x07, r1	; 7
     a22:	09 c0       	rjmp	.+18     	; 0xa36 <__vector_21+0xee>
		else if(adc_temp == 17)
     a24:	c1 31       	cpi	r28, 0x11	; 17
     a26:	19 f4       	brne	.+6      	; 0xa2e <__vector_21+0xe6>
			ADMUX = 0x01;	
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	87 b9       	out	0x07, r24	; 7
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__vector_21+0xee>
		else if(adc_temp == 18)
     a2e:	c2 31       	cpi	r28, 0x12	; 18
     a30:	11 f4       	brne	.+4      	; 0xa36 <__vector_21+0xee>
			ADMUX = 0x02;	
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	87 b9       	out	0x07, r24	; 7
		
		ADC_data.Status = WAIT;
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <ADC_data>
	}

	ADC_data.Channel_to_read = adc_temp;
     a3c:	eb e1       	ldi	r30, 0x1B	; 27
     a3e:	f7 e0       	ldi	r31, 0x07	; 7
     a40:	c4 8b       	std	Z+20, r28	; 0x14
	ADC_data.Wait = MUX_WAIT_FOR_STABLE;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	85 8b       	std	Z+21, r24	; 0x15
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	cf 91       	pop	r28
     a4c:	bf 91       	pop	r27
     a4e:	af 91       	pop	r26
     a50:	9f 91       	pop	r25
     a52:	8f 91       	pop	r24
     a54:	7f 91       	pop	r23
     a56:	6f 91       	pop	r22
     a58:	5f 91       	pop	r21
     a5a:	4f 91       	pop	r20
     a5c:	3f 91       	pop	r19
     a5e:	2f 91       	pop	r18
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <MUX_Init>:
#include "HC4067.h"
#include "PDU_board.h"

void MUX_Init(){
	
	MUX_A0_DDR |= (1<<MUX_A0_PIN);
     a6e:	82 b1       	in	r24, 0x02	; 2
     a70:	84 60       	ori	r24, 0x04	; 4
     a72:	82 b9       	out	0x02, r24	; 2
	MUX_A1_DDR |= (1<<MUX_A1_PIN);
     a74:	82 b1       	in	r24, 0x02	; 2
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	82 b9       	out	0x02, r24	; 2
	MUX_A2_DDR |= (1<<MUX_A2_PIN);
     a7a:	82 b1       	in	r24, 0x02	; 2
     a7c:	80 62       	ori	r24, 0x20	; 32
     a7e:	82 b9       	out	0x02, r24	; 2
	MUX_A3_DDR |= (1<<MUX_A3_PIN);
     a80:	82 b1       	in	r24, 0x02	; 2
     a82:	80 61       	ori	r24, 0x10	; 16
     a84:	82 b9       	out	0x02, r24	; 2
	MUX_OUT_DDR &= ~(1<<MUX_OUT_PIN);
     a86:	e1 e6       	ldi	r30, 0x61	; 97
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	87 7f       	andi	r24, 0xF7	; 247
     a8e:	80 83       	st	Z, r24
	#waring "Using MUX_ENABLE"
		MUX_EN_DDR |= (1<<MUX_EN_PIN);
		MUX_EN_PORT &= ~(1<<MUX_EN_PIN);
	#endif
	
	MUX_A0_PORT &= ~(1<<MUX_A0_PIN);
     a90:	83 b1       	in	r24, 0x03	; 3
     a92:	8b 7f       	andi	r24, 0xFB	; 251
     a94:	83 b9       	out	0x03, r24	; 3
	MUX_A1_PORT &= ~(1<<MUX_A1_PIN);
     a96:	83 b1       	in	r24, 0x03	; 3
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	83 b9       	out	0x03, r24	; 3
	MUX_A2_PORT &= ~(1<<MUX_A2_PIN);
     a9c:	83 b1       	in	r24, 0x03	; 3
     a9e:	8f 7d       	andi	r24, 0xDF	; 223
     aa0:	83 b9       	out	0x03, r24	; 3
	MUX_A3_PORT &= ~(1<<MUX_A3_PIN);
     aa2:	83 b1       	in	r24, 0x03	; 3
     aa4:	8f 7e       	andi	r24, 0xEF	; 239
     aa6:	83 b9       	out	0x03, r24	; 3
	MUX_OUT_PORT &= ~(1<<MUX_OUT_PIN);
     aa8:	e2 e6       	ldi	r30, 0x62	; 98
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 83       	st	Z, r24
     ab2:	08 95       	ret

00000ab4 <MUX_Set_Channel>:
	
	#ifdef MUX_EN_PORT
		MUX_EN_PORT |= (1<<MUX_EN_PIN);
	#endif

	if(channel & 0x01)	
     ab4:	80 ff       	sbrs	r24, 0
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <MUX_Set_Channel+0xc>
		MUX_A0_PORT |= (1<<MUX_A0_PIN);
     ab8:	93 b1       	in	r25, 0x03	; 3
     aba:	94 60       	ori	r25, 0x04	; 4
     abc:	93 b9       	out	0x03, r25	; 3
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <MUX_Set_Channel+0x12>
	else			
		MUX_A0_PORT &= ~(1<<MUX_A0_PIN);
     ac0:	93 b1       	in	r25, 0x03	; 3
     ac2:	9b 7f       	andi	r25, 0xFB	; 251
     ac4:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x02)
     ac6:	81 ff       	sbrs	r24, 1
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <MUX_Set_Channel+0x1e>
		MUX_A1_PORT |= (1<<MUX_A1_PIN);
     aca:	93 b1       	in	r25, 0x03	; 3
     acc:	98 60       	ori	r25, 0x08	; 8
     ace:	93 b9       	out	0x03, r25	; 3
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <MUX_Set_Channel+0x24>
	else
		MUX_A1_PORT &= ~(1<<MUX_A1_PIN);
     ad2:	93 b1       	in	r25, 0x03	; 3
     ad4:	97 7f       	andi	r25, 0xF7	; 247
     ad6:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x04)
     ad8:	82 ff       	sbrs	r24, 2
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <MUX_Set_Channel+0x30>
		MUX_A2_PORT |= (1<<MUX_A2_PIN);
     adc:	93 b1       	in	r25, 0x03	; 3
     ade:	90 62       	ori	r25, 0x20	; 32
     ae0:	93 b9       	out	0x03, r25	; 3
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <MUX_Set_Channel+0x36>
	else
		MUX_A2_PORT &= ~(1<<MUX_A2_PIN);
     ae4:	93 b1       	in	r25, 0x03	; 3
     ae6:	9f 7d       	andi	r25, 0xDF	; 223
     ae8:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x08)
     aea:	83 ff       	sbrs	r24, 3
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <MUX_Set_Channel+0x42>
		MUX_A3_PORT |= (1<<MUX_A3_PIN);
     aee:	83 b1       	in	r24, 0x03	; 3
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	83 b9       	out	0x03, r24	; 3
     af4:	08 95       	ret
	else
		MUX_A3_PORT &= ~(1<<MUX_A3_PIN);
     af6:	83 b1       	in	r24, 0x03	; 3
     af8:	8f 7e       	andi	r24, 0xEF	; 239
     afa:	83 b9       	out	0x03, r24	; 3
     afc:	08 95       	ret

00000afe <COPC_init>:
	uint8_t  encoded_frame[10];
	uint8_t  frame_len;
	fsp_gen_ack_pkt(FSP_ADR_COPC,&s_PDU_FspPacket);
	fsp_encode(&s_PDU_FspPacket,  encoded_frame,  &frame_len);
	usart0_send_array(&encoded_frame,frame_len);
}
     afe:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <usart0_init>
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	0e 94 80 13 	call	0x2700	; 0x2700 <fsp_init>
     b08:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <uart_get_uart0_rx_buffer_address>
     b0c:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <p_COPCBuffer+0x1>
     b10:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <p_COPCBuffer>
     b14:	8b ea       	ldi	r24, 0xAB	; 171
     b16:	95 e0       	ldi	r25, 0x05	; 5
     b18:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
     b1c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <s_pCOPC_Sfp_Payload>
     b20:	08 95       	ret

00000b22 <COPC_create_task>:

void	COPC_create_task(void)
{
	COPC_init();
     b22:	0e 94 7f 05 	call	0xafe	; 0xafe <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 9d 11 	call	0x233a	; 0x233a <SCH_TASK_CreateTask>
     b32:	08 95       	ret

00000b34 <Channel_Status>:
}

void Channel_Status(uint8_t channel) {
     b34:	4f 92       	push	r4
     b36:	5f 92       	push	r5
     b38:	6f 92       	push	r6
     b3a:	7f 92       	push	r7
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	65 97       	sbiw	r28, 0x15	; 21
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	f8 2e       	mov	r15, r24
	uint8_t  frame_len = 0;
     b62:	19 82       	std	Y+1, r1	; 0x01
	uint8_t  payload[20];
	memset((void*)payload,0,sizeof(payload));
     b64:	fe 01       	movw	r30, r28
     b66:	32 96       	adiw	r30, 0x02	; 2
     b68:	84 e1       	ldi	r24, 0x14	; 20
     b6a:	df 01       	movw	r26, r30
     b6c:	1d 92       	st	X+, r1
     b6e:	8a 95       	dec	r24
     b70:	e9 f7       	brne	.-6      	; 0xb6c <Channel_Status+0x38>
	float	volt_tmp;
	float	amp_tmp;
	uint16_t vl_tmp;

	cli();
     b72:	f8 94       	cli
	amp_tmp = (float)(ADC_data.RAW[0][time_mapping_to_channel[channel]]);
     b74:	0f 2d       	mov	r16, r15
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	f8 01       	movw	r30, r16
     b7a:	e2 5e       	subi	r30, 0xE2	; 226
     b7c:	fc 4f       	sbci	r31, 0xFC	; 252
     b7e:	e0 81       	ld	r30, Z
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	e5 5e       	subi	r30, 0xE5	; 229
     b88:	f8 4f       	sbci	r31, 0xF8	; 248
     b8a:	61 a5       	ldd	r22, Z+41	; 0x29
     b8c:	72 a5       	ldd	r23, Z+42	; 0x2a
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     b96:	4b 01       	movw	r8, r22
     b98:	5c 01       	movw	r10, r24
	volt_tmp = (float)(ADC_data.RAW[0][channel_mapping_to_buck[channel]]);
     b9a:	f8 01       	movw	r30, r16
     b9c:	e9 5d       	subi	r30, 0xD9	; 217
     b9e:	fc 4f       	sbci	r31, 0xFC	; 252
     ba0:	e0 81       	ld	r30, Z
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	e5 5e       	subi	r30, 0xE5	; 229
     baa:	f8 4f       	sbci	r31, 0xF8	; 248
     bac:	61 a5       	ldd	r22, Z+41	; 0x29
     bae:	72 a5       	ldd	r23, Z+42	; 0x2a
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
	sei();
     bb8:	78 94       	sei
	
	if(channel < 8)
     bba:	b7 e0       	ldi	r27, 0x07	; 7
     bbc:	bf 15       	cp	r27, r15
     bbe:	48 f0       	brcs	.+18     	; 0xbd2 <Channel_Status+0x9e>
		volt_tmp *= SCALE_5V;
     bc0:	2f e6       	ldi	r18, 0x6F	; 111
     bc2:	32 e1       	ldi	r19, 0x12	; 18
     bc4:	43 e0       	ldi	r20, 0x03	; 3
     bc6:	5c e3       	ldi	r21, 0x3C	; 60
     bc8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     bcc:	2b 01       	movw	r4, r22
     bce:	3c 01       	movw	r6, r24
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <Channel_Status+0xae>
	else 
		volt_tmp *= SCALE_12V;
     bd2:	29 e5       	ldi	r18, 0x59	; 89
     bd4:	39 e3       	ldi	r19, 0x39	; 57
     bd6:	44 e3       	ldi	r20, 0x34	; 52
     bd8:	5d e3       	ldi	r21, 0x3D	; 61
     bda:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     bde:	2b 01       	movw	r4, r22
     be0:	3c 01       	movw	r6, r24
		
	amp_tmp *= SCALE_A;
     be2:	2f e0       	ldi	r18, 0x0F	; 15
     be4:	30 e5       	ldi	r19, 0x50	; 80
     be6:	4e e6       	ldi	r20, 0x6E	; 110
     be8:	5b e3       	ldi	r21, 0x3B	; 59
     bea:	c5 01       	movw	r24, r10
     bec:	b4 01       	movw	r22, r8
     bee:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     bf2:	4b 01       	movw	r8, r22
     bf4:	5c 01       	movw	r10, r24
	payload[frame_len++] =  channel;
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	89 0f       	add	r24, r25
     bfc:	e2 e0       	ldi	r30, 0x02	; 2
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ec 0f       	add	r30, r28
     c02:	fd 1f       	adc	r31, r29
     c04:	e9 0f       	add	r30, r25
     c06:	f1 1d       	adc	r31, r1
     c08:	f0 82       	st	Z, r15
	payload[frame_len++] =  CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]];
     c0a:	ff 24       	eor	r15, r15
     c0c:	f3 94       	inc	r15
     c0e:	f8 0e       	add	r15, r24
     c10:	f8 01       	movw	r30, r16
     c12:	ed 5b       	subi	r30, 0xBD	; 189
     c14:	fc 4f       	sbci	r31, 0xFC	; 252
     c16:	e0 81       	ld	r30, Z
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ef 56       	subi	r30, 0x6F	; 111
     c1c:	f8 4f       	sbci	r31, 0xF8	; 248
     c1e:	90 81       	ld	r25, Z
     c20:	e2 e0       	ldi	r30, 0x02	; 2
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ec 0f       	add	r30, r28
     c26:	fd 1f       	adc	r31, r29
     c28:	e8 0f       	add	r30, r24
     c2a:	f1 1d       	adc	r31, r1
     c2c:	90 83       	st	Z, r25
	vl_tmp = (uint16_t)(100*volt_tmp);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	48 ec       	ldi	r20, 0xC8	; 200
     c34:	52 e4       	ldi	r21, 0x42	; 66
     c36:	c3 01       	movw	r24, r6
     c38:	b2 01       	movw	r22, r4
     c3a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     c3e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixunssfsi>
	payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	8f 0d       	add	r24, r15
     c46:	e2 e0       	ldi	r30, 0x02	; 2
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ec 0f       	add	r30, r28
     c4c:	fd 1f       	adc	r31, r29
     c4e:	ef 0d       	add	r30, r15
     c50:	f1 1d       	adc	r31, r1
     c52:	70 83       	st	Z, r23
	payload[frame_len++] = (uint8_t)(vl_tmp);
     c54:	11 e0       	ldi	r17, 0x01	; 1
     c56:	18 0f       	add	r17, r24
     c58:	e2 e0       	ldi	r30, 0x02	; 2
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	ec 0f       	add	r30, r28
     c5e:	fd 1f       	adc	r31, r29
     c60:	e8 0f       	add	r30, r24
     c62:	f1 1d       	adc	r31, r1
     c64:	60 83       	st	Z, r22
	
	vl_tmp = (uint16_t)(100*amp_tmp);
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	48 ec       	ldi	r20, 0xC8	; 200
     c6c:	52 e4       	ldi	r21, 0x42	; 66
     c6e:	c5 01       	movw	r24, r10
     c70:	b4 01       	movw	r22, r8
     c72:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     c76:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixunssfsi>
	payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	81 0f       	add	r24, r17
     c7e:	e2 e0       	ldi	r30, 0x02	; 2
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	ec 0f       	add	r30, r28
     c84:	fd 1f       	adc	r31, r29
     c86:	e1 0f       	add	r30, r17
     c88:	f1 1d       	adc	r31, r1
     c8a:	70 83       	st	Z, r23
	payload[frame_len++] = (uint8_t)(vl_tmp);	
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	48 0f       	add	r20, r24
     c90:	49 83       	std	Y+1, r20	; 0x01
     c92:	e2 e0       	ldi	r30, 0x02	; 2
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ec 0f       	add	r30, r28
     c98:	fd 1f       	adc	r31, r29
     c9a:	e8 0f       	add	r30, r24
     c9c:	f1 1d       	adc	r31, r1
     c9e:	60 83       	st	Z, r22
	fsp_gen_cmd_w_data_pkt(s_pCOPC_Sfp_Payload->commonFrame.Cmd, payload, frame_len, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK, &s_PDU_FspPacket);
     ca0:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
     ca4:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
     ca8:	80 81       	ld	r24, Z
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	0f 2e       	mov	r0, r31
     cae:	f5 e2       	ldi	r31, 0x25	; 37
     cb0:	ef 2e       	mov	r14, r31
     cb2:	f5 e0       	ldi	r31, 0x05	; 5
     cb4:	ff 2e       	mov	r15, r31
     cb6:	f0 2d       	mov	r31, r0
     cb8:	00 e0       	ldi	r16, 0x00	; 0
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	be 01       	movw	r22, r28
     cc2:	6e 5f       	subi	r22, 0xFE	; 254
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 c4 13 	call	0x2788	; 0x2788 <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_PDU_FspPacket,  payload,  &frame_len);
     ccc:	ae 01       	movw	r20, r28
     cce:	4f 5f       	subi	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	be 01       	movw	r22, r28
     cd4:	6e 5f       	subi	r22, 0xFE	; 254
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	c7 01       	movw	r24, r14
     cda:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <fsp_encode>
	usart0_send_array(&payload,frame_len);
     cde:	69 81       	ldd	r22, Y+1	; 0x01
     ce0:	ce 01       	movw	r24, r28
     ce2:	02 96       	adiw	r24, 0x02	; 2
     ce4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart0_send_array>
	s_PDU_FspPacket.crc16	   = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &s_PDU_FspPacket.src_adr, s_PDU_FspPacket.length + 4);
	fsp_encode(&s_PDU_FspPacket,  payload,  &frame_len);
	//usart0_send_array(payload,frame_len);
	usart1_send_array(payload,frame_len);
	*/
}
     ce8:	65 96       	adiw	r28, 0x15	; 21
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	9f 90       	pop	r9
     d06:	8f 90       	pop	r8
     d08:	7f 90       	pop	r7
     d0a:	6f 90       	pop	r6
     d0c:	5f 90       	pop	r5
     d0e:	4f 90       	pop	r4
     d10:	08 95       	ret

00000d12 <Buck_Status>:


void Buck_Status(uint8_t Buck) {
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	65 97       	sbiw	r28, 0x15	; 21
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	d8 2e       	mov	r13, r24
	float	volt_tmp = 0;
	float	amp_tmp = 0;
	uint16_t vl_tmp = 0;
	uint8_t  frame_len = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01
	uint8_t  payload[20];
	memset((void*)payload,0,sizeof(payload));
     d44:	fe 01       	movw	r30, r28
     d46:	32 96       	adiw	r30, 0x02	; 2
     d48:	84 e1       	ldi	r24, 0x14	; 20
     d4a:	df 01       	movw	r26, r30
     d4c:	1d 92       	st	X+, r1
     d4e:	8a 95       	dec	r24
     d50:	e9 f7       	brne	.-6      	; 0xd4c <Buck_Status+0x3a>

	cli();
     d52:	f8 94       	cli
	volt_tmp = (float)(ADC_data.RAW[0][cmd_to_channel_mapping[Buck]]);
     d54:	ed 2c       	mov	r14, r13
     d56:	f1 2c       	mov	r15, r1
     d58:	f7 01       	movw	r30, r14
     d5a:	ed 5b       	subi	r30, 0xBD	; 189
     d5c:	fc 4f       	sbci	r31, 0xFC	; 252
     d5e:	e0 81       	ld	r30, Z
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	e5 5e       	subi	r30, 0xE5	; 229
     d68:	f8 4f       	sbci	r31, 0xF8	; 248
     d6a:	61 a5       	ldd	r22, Z+41	; 0x29
     d6c:	72 a5       	ldd	r23, Z+42	; 0x2a
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
	amp_tmp = (float)(ADC_data.RAW[0][buck_mapping_to_channel[0][Buck]]);
     d7a:	87 01       	movw	r16, r14
     d7c:	00 5f       	subi	r16, 0xF0	; 240
     d7e:	1c 4f       	sbci	r17, 0xFC	; 252
     d80:	d8 01       	movw	r26, r16
     d82:	ec 91       	ld	r30, X
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e5 5e       	subi	r30, 0xE5	; 229
     d8c:	f8 4f       	sbci	r31, 0xF8	; 248
     d8e:	61 a5       	ldd	r22, Z+41	; 0x29
     d90:	72 a5       	ldd	r23, Z+42	; 0x2a
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     d9a:	2b 01       	movw	r4, r22
     d9c:	3c 01       	movw	r6, r24
	if(buck_mapping_to_channel[1][Buck] != 255)	
     d9e:	d8 01       	movw	r26, r16
     da0:	17 96       	adiw	r26, 0x07	; 7
     da2:	ec 91       	ld	r30, X
     da4:	ef 3f       	cpi	r30, 0xFF	; 255
     da6:	99 f0       	breq	.+38     	; 0xdce <Buck_Status+0xbc>
	amp_tmp += (float)(ADC_data.RAW[0][buck_mapping_to_channel[1][Buck]]);
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	e5 5e       	subi	r30, 0xE5	; 229
     db0:	f8 4f       	sbci	r31, 0xF8	; 248
     db2:	61 a5       	ldd	r22, Z+41	; 0x29
     db4:	72 a5       	ldd	r23, Z+42	; 0x2a
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	c3 01       	movw	r24, r6
     dc4:	b2 01       	movw	r22, r4
     dc6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__addsf3>
     dca:	2b 01       	movw	r4, r22
     dcc:	3c 01       	movw	r6, r24
	sei();
     dce:	78 94       	sei
	
	if(Buck < 6)
     dd0:	b5 e0       	ldi	r27, 0x05	; 5
     dd2:	bd 15       	cp	r27, r13
     dd4:	58 f0       	brcs	.+22     	; 0xdec <Buck_Status+0xda>
		volt_tmp *= SCALE_5V;
     dd6:	2f e6       	ldi	r18, 0x6F	; 111
     dd8:	32 e1       	ldi	r19, 0x12	; 18
     dda:	43 e0       	ldi	r20, 0x03	; 3
     ddc:	5c e3       	ldi	r21, 0x3C	; 60
     dde:	c5 01       	movw	r24, r10
     de0:	b4 01       	movw	r22, r8
     de2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     de6:	4b 01       	movw	r8, r22
     de8:	5c 01       	movw	r10, r24
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <Buck_Status+0xee>
	else
		volt_tmp *= SCALE_12V;
     dec:	29 e5       	ldi	r18, 0x59	; 89
     dee:	39 e3       	ldi	r19, 0x39	; 57
     df0:	44 e3       	ldi	r20, 0x34	; 52
     df2:	5d e3       	ldi	r21, 0x3D	; 61
     df4:	c5 01       	movw	r24, r10
     df6:	b4 01       	movw	r22, r8
     df8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
	
	amp_tmp *= SCALE_A;
     e00:	2f e0       	ldi	r18, 0x0F	; 15
     e02:	30 e5       	ldi	r19, 0x50	; 80
     e04:	4e e6       	ldi	r20, 0x6E	; 110
     e06:	5b e3       	ldi	r21, 0x3B	; 59
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
	payload[frame_len++] =  Buck;
     e14:	99 81       	ldd	r25, Y+1	; 0x01
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	89 0f       	add	r24, r25
     e1a:	e2 e0       	ldi	r30, 0x02	; 2
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	ec 0f       	add	r30, r28
     e20:	fd 1f       	adc	r31, r29
     e22:	e9 0f       	add	r30, r25
     e24:	f1 1d       	adc	r31, r1
     e26:	d0 82       	st	Z, r13
	payload[frame_len++] =  CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[Buck]];
     e28:	11 e0       	ldi	r17, 0x01	; 1
     e2a:	18 0f       	add	r17, r24
     e2c:	f7 01       	movw	r30, r14
     e2e:	ed 5b       	subi	r30, 0xBD	; 189
     e30:	fc 4f       	sbci	r31, 0xFC	; 252
     e32:	e0 81       	ld	r30, Z
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ef 56       	subi	r30, 0x6F	; 111
     e38:	f8 4f       	sbci	r31, 0xF8	; 248
     e3a:	90 81       	ld	r25, Z
     e3c:	e2 e0       	ldi	r30, 0x02	; 2
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	ec 0f       	add	r30, r28
     e42:	fd 1f       	adc	r31, r29
     e44:	e8 0f       	add	r30, r24
     e46:	f1 1d       	adc	r31, r1
     e48:	90 83       	st	Z, r25
	vl_tmp =  (uint16_t)(100 *volt_tmp);
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 ec       	ldi	r20, 0xC8	; 200
     e50:	52 e4       	ldi	r21, 0x42	; 66
     e52:	c5 01       	movw	r24, r10
     e54:	b4 01       	movw	r22, r8
     e56:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     e5a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixunssfsi>
	payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	81 0f       	add	r24, r17
     e62:	e2 e0       	ldi	r30, 0x02	; 2
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ec 0f       	add	r30, r28
     e68:	fd 1f       	adc	r31, r29
     e6a:	e1 0f       	add	r30, r17
     e6c:	f1 1d       	adc	r31, r1
     e6e:	70 83       	st	Z, r23
	payload[frame_len++] = (uint8_t)(vl_tmp);
     e70:	11 e0       	ldi	r17, 0x01	; 1
     e72:	18 0f       	add	r17, r24
     e74:	e2 e0       	ldi	r30, 0x02	; 2
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ec 0f       	add	r30, r28
     e7a:	fd 1f       	adc	r31, r29
     e7c:	e8 0f       	add	r30, r24
     e7e:	f1 1d       	adc	r31, r1
     e80:	60 83       	st	Z, r22
	
	vl_tmp = (uint16_t)(100 *amp_tmp);
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	48 ec       	ldi	r20, 0xC8	; 200
     e88:	52 e4       	ldi	r21, 0x42	; 66
     e8a:	c3 01       	movw	r24, r6
     e8c:	b2 01       	movw	r22, r4
     e8e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
     e92:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixunssfsi>
	payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	81 0f       	add	r24, r17
     e9a:	e2 e0       	ldi	r30, 0x02	; 2
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	ec 0f       	add	r30, r28
     ea0:	fd 1f       	adc	r31, r29
     ea2:	e1 0f       	add	r30, r17
     ea4:	f1 1d       	adc	r31, r1
     ea6:	70 83       	st	Z, r23
	payload[frame_len++] = (uint8_t)(vl_tmp);
     ea8:	41 e0       	ldi	r20, 0x01	; 1
     eaa:	48 0f       	add	r20, r24
     eac:	49 83       	std	Y+1, r20	; 0x01
     eae:	e2 e0       	ldi	r30, 0x02	; 2
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	ec 0f       	add	r30, r28
     eb4:	fd 1f       	adc	r31, r29
     eb6:	e8 0f       	add	r30, r24
     eb8:	f1 1d       	adc	r31, r1
     eba:	60 83       	st	Z, r22
	fsp_gen_cmd_w_data_pkt(s_pCOPC_Sfp_Payload->commonFrame.Cmd, payload, frame_len, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK, &s_PDU_FspPacket);
     ebc:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
     ec0:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
     ec4:	80 81       	ld	r24, Z
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	0f 2e       	mov	r0, r31
     eca:	f5 e2       	ldi	r31, 0x25	; 37
     ecc:	ef 2e       	mov	r14, r31
     ece:	f5 e0       	ldi	r31, 0x05	; 5
     ed0:	ff 2e       	mov	r15, r31
     ed2:	f0 2d       	mov	r31, r0
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	be 01       	movw	r22, r28
     ede:	6e 5f       	subi	r22, 0xFE	; 254
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 c4 13 	call	0x2788	; 0x2788 <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_PDU_FspPacket,  payload,  &frame_len);
     ee8:	ae 01       	movw	r20, r28
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	be 01       	movw	r22, r28
     ef0:	6e 5f       	subi	r22, 0xFE	; 254
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	c7 01       	movw	r24, r14
     ef6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <fsp_encode>
	usart0_send_array(&payload,frame_len);
     efa:	69 81       	ldd	r22, Y+1	; 0x01
     efc:	ce 01       	movw	r24, r28
     efe:	02 96       	adiw	r24, 0x02	; 2
     f00:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart0_send_array>
}
     f04:	65 96       	adiw	r28, 0x15	; 21
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	7f 90       	pop	r7
     f28:	6f 90       	pop	r6
     f2a:	5f 90       	pop	r5
     f2c:	4f 90       	pop	r4
     f2e:	08 95       	ret

00000f30 <OK_Send>:

void OK_Send() {
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	60 97       	sbiw	r28, 0x10	; 16
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  frame_len = 0;
     f50:	19 82       	std	Y+1, r1	; 0x01
	uint8_t  payload[15];
	memset((void* ) payload,0,sizeof(payload));
     f52:	6e 01       	movw	r12, r28
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	c8 0e       	add	r12, r24
     f58:	d1 1c       	adc	r13, r1
     f5a:	8f e0       	ldi	r24, 0x0F	; 15
     f5c:	f6 01       	movw	r30, r12
     f5e:	11 92       	st	Z+, r1
     f60:	8a 95       	dec	r24
     f62:	e9 f7       	brne	.-6      	; 0xf5e <OK_Send+0x2e>
	payload[0] = s_pCOPC_Sfp_Payload->commonFrame.Cmd;
     f64:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
     f68:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
     f6c:	80 81       	ld	r24, Z
     f6e:	8a 83       	std	Y+2, r24	; 0x02
	fsp_gen_cmd_w_data_pkt(FSP_CMD_RESPONSE_DONE,  payload,  1, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK,  &s_PDU_FspPacket);
     f70:	0f 2e       	mov	r0, r31
     f72:	f5 e2       	ldi	r31, 0x25	; 37
     f74:	ef 2e       	mov	r14, r31
     f76:	f5 e0       	ldi	r31, 0x05	; 5
     f78:	ff 2e       	mov	r15, r31
     f7a:	f0 2d       	mov	r31, r0
     f7c:	00 e0       	ldi	r16, 0x00	; 0
     f7e:	10 e0       	ldi	r17, 0x00	; 0
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	b6 01       	movw	r22, r12
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 c4 13 	call	0x2788	; 0x2788 <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_PDU_FspPacket,  payload,  &frame_len);
     f92:	ae 01       	movw	r20, r28
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	b6 01       	movw	r22, r12
     f9a:	c7 01       	movw	r24, r14
     f9c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <fsp_encode>
	usart0_send_array(payload,frame_len);	
     fa0:	69 81       	ldd	r22, Y+1	; 0x01
     fa2:	c6 01       	movw	r24, r12
     fa4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart0_send_array>
}
     fa8:	60 96       	adiw	r28, 0x10	; 16
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	08 95       	ret

00000fc6 <Get_All_Status>:

void Get_All_Status() {
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	cd 56       	subi	r28, 0x6D	; 109
     fd8:	d1 09       	sbc	r29, r1
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
	uint8_t  frame_len = 0;
     fe4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t  payload[70];
	memset((void*)payload,0,sizeof(payload));
     fe6:	fe 01       	movw	r30, r28
     fe8:	32 96       	adiw	r30, 0x02	; 2
     fea:	86 e4       	ldi	r24, 0x46	; 70
     fec:	df 01       	movw	r26, r30
     fee:	1d 92       	st	X+, r1
     ff0:	8a 95       	dec	r24
     ff2:	e9 f7       	brne	.-6      	; 0xfee <Get_All_Status+0x28>
	uint16_t	ADC_tmp[ANALOG_CHANNEL];
	float	flo_tmp = 0;
	uint16_t vl_tmp = 0;
	
	cli();
     ff4:	f8 94       	cli
	for(uint8_t i = 0 ; i < ANALOG_CHANNEL ; i++)
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
		ADC_tmp[i] = ADC_data.RAW[0][i];
     ffa:	82 2f       	mov	r24, r18
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e5 5e       	subi	r30, 0xE5	; 229
    1006:	f8 4f       	sbci	r31, 0xF8	; 248
    1008:	41 a5       	ldd	r20, Z+41	; 0x29
    100a:	52 a5       	ldd	r21, Z+42	; 0x2a
    100c:	e8 e4       	ldi	r30, 0x48	; 72
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	ec 0f       	add	r30, r28
    1012:	fd 1f       	adc	r31, r29
    1014:	e8 0f       	add	r30, r24
    1016:	f9 1f       	adc	r31, r25
    1018:	51 83       	std	Z+1, r21	; 0x01
    101a:	40 83       	st	Z, r20
	uint16_t	ADC_tmp[ANALOG_CHANNEL];
	float	flo_tmp = 0;
	uint16_t vl_tmp = 0;
	
	cli();
	for(uint8_t i = 0 ; i < ANALOG_CHANNEL ; i++)
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	23 31       	cpi	r18, 0x13	; 19
    1020:	60 f3       	brcs	.-40     	; 0xffa <Get_All_Status+0x34>
		ADC_tmp[i] = ADC_data.RAW[0][i];
	sei();
    1022:	78 94       	sei
	for(uint8_t i = 0 ; i < POWERIO_CHANNEL ; i++)
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	70 c0       	rjmp	.+224    	; 0x1108 <__stack+0x9>
	{
		if(i == 17)
    1028:	11 31       	cpi	r17, 0x11	; 17
    102a:	09 f4       	brne	.+2      	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    102c:	6c c0       	rjmp	.+216    	; 0x1106 <__stack+0x7>
			continue;
		payload[frame_len++] = CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[i]];
    102e:	29 81       	ldd	r18, Y+1	; 0x01
    1030:	01 e0       	ldi	r16, 0x01	; 1
    1032:	02 0f       	add	r16, r18
    1034:	09 83       	std	Y+1, r16	; 0x01
    1036:	e1 2f       	mov	r30, r17
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	ed 5b       	subi	r30, 0xBD	; 189
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
    103e:	80 81       	ld	r24, Z
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	ef 56       	subi	r30, 0x6F	; 111
    1046:	f8 4f       	sbci	r31, 0xF8	; 248
    1048:	30 81       	ld	r19, Z
    104a:	e2 e0       	ldi	r30, 0x02	; 2
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ec 0f       	add	r30, r28
    1050:	fd 1f       	adc	r31, r29
    1052:	e2 0f       	add	r30, r18
    1054:	f1 1d       	adc	r31, r1
    1056:	30 83       	st	Z, r19
		flo_tmp = (float)(ADC_tmp[cmd_to_channel_mapping[i]]);
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	e8 e4       	ldi	r30, 0x48	; 72
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	ec 0f       	add	r30, r28
    1062:	fd 1f       	adc	r31, r29
    1064:	e8 0f       	add	r30, r24
    1066:	f9 1f       	adc	r31, r25
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
		if(i < 6)
    1074:	16 30       	cpi	r17, 0x06	; 6
    1076:	38 f4       	brcc	.+14     	; 0x1086 <__DATA_REGION_LENGTH__+0x86>
			flo_tmp *= SCALE_5V;
    1078:	2f e6       	ldi	r18, 0x6F	; 111
    107a:	32 e1       	ldi	r19, 0x12	; 18
    107c:	43 e0       	ldi	r20, 0x03	; 3
    107e:	5c e3       	ldi	r21, 0x3C	; 60
    1080:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    1084:	25 c0       	rjmp	.+74     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
		else if(i == 6)
    1086:	16 30       	cpi	r17, 0x06	; 6
    1088:	39 f4       	brne	.+14     	; 0x1098 <__DATA_REGION_LENGTH__+0x98>
			flo_tmp *= SCALE_12V;
    108a:	29 e5       	ldi	r18, 0x59	; 89
    108c:	39 e3       	ldi	r19, 0x39	; 57
    108e:	44 e3       	ldi	r20, 0x34	; 52
    1090:	5d e3       	ldi	r21, 0x3D	; 61
    1092:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    1096:	1c c0       	rjmp	.+56     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
		else if(i == 16)
    1098:	10 31       	cpi	r17, 0x10	; 16
    109a:	39 f4       	brne	.+14     	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
			flo_tmp *= SCALE_12V;
    109c:	29 e5       	ldi	r18, 0x59	; 89
    109e:	39 e3       	ldi	r19, 0x39	; 57
    10a0:	44 e3       	ldi	r20, 0x34	; 52
    10a2:	5d e3       	ldi	r21, 0x3D	; 61
    10a4:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
		else if(i < 17 && i != 16)
    10aa:	10 31       	cpi	r17, 0x10	; 16
    10ac:	38 f4       	brcc	.+14     	; 0x10bc <__DATA_REGION_LENGTH__+0xbc>
			flo_tmp *= SCALE_A;
    10ae:	2f e0       	ldi	r18, 0x0F	; 15
    10b0:	30 e5       	ldi	r19, 0x50	; 80
    10b2:	4e e6       	ldi	r20, 0x6E	; 110
    10b4:	5b e3       	ldi	r21, 0x3B	; 59
    10b6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
		else if(i == 17)
    10bc:	11 31       	cpi	r17, 0x11	; 17
    10be:	39 f1       	breq	.+78     	; 0x110e <__stack+0xf>
			break;
		else if(i == 18)
    10c0:	12 31       	cpi	r17, 0x12	; 18
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
			flo_tmp *= SCALE_12V;
    10c4:	29 e5       	ldi	r18, 0x59	; 89
    10c6:	39 e3       	ldi	r19, 0x39	; 57
    10c8:	44 e3       	ldi	r20, 0x34	; 52
    10ca:	5d e3       	ldi	r21, 0x3D	; 61
    10cc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
		vl_tmp =  (uint16_t)(100 *flo_tmp);
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	48 ec       	ldi	r20, 0xC8	; 200
    10d6:	52 e4       	ldi	r21, 0x42	; 66
    10d8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    10dc:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fixunssfsi>

		payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 0f       	add	r24, r16
    10e4:	e2 e0       	ldi	r30, 0x02	; 2
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	ec 0f       	add	r30, r28
    10ea:	fd 1f       	adc	r31, r29
    10ec:	e0 0f       	add	r30, r16
    10ee:	f1 1d       	adc	r31, r1
    10f0:	70 83       	st	Z, r23
		payload[frame_len++] = (uint8_t)(vl_tmp);
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	98 0f       	add	r25, r24
    10f6:	99 83       	std	Y+1, r25	; 0x01
    10f8:	e2 e0       	ldi	r30, 0x02	; 2
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ec 0f       	add	r30, r28
    10fe:	fd 1f       	adc	r31, r29
    1100:	e8 0f       	add	r30, r24
    1102:	f1 1d       	adc	r31, r1
    1104:	60 83       	st	Z, r22
	
	cli();
	for(uint8_t i = 0 ; i < ANALOG_CHANNEL ; i++)
		ADC_tmp[i] = ADC_data.RAW[0][i];
	sei();
	for(uint8_t i = 0 ; i < POWERIO_CHANNEL ; i++)
    1106:	1f 5f       	subi	r17, 0xFF	; 255
    1108:	13 31       	cpi	r17, 0x13	; 19
    110a:	08 f4       	brcc	.+2      	; 0x110e <__stack+0xf>
    110c:	8d cf       	rjmp	.-230    	; 0x1028 <__DATA_REGION_LENGTH__+0x28>
		vl_tmp =  (uint16_t)(100 *flo_tmp);

		payload[frame_len++] = (uint8_t)(vl_tmp >> 8);
		payload[frame_len++] = (uint8_t)(vl_tmp);
	}
	fsp_gen_cmd_w_data_pkt(s_pCOPC_Sfp_Payload->commonFrame.Cmd, payload, frame_len, FSP_ADR_COPC, FSP_PKT_WITHOUT_ACK, &s_PDU_FspPacket);
    110e:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    1112:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    1116:	80 81       	ld	r24, Z
    1118:	49 81       	ldd	r20, Y+1	; 0x01
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0f 2e       	mov	r0, r31
    111e:	f5 e2       	ldi	r31, 0x25	; 37
    1120:	ef 2e       	mov	r14, r31
    1122:	f5 e0       	ldi	r31, 0x05	; 5
    1124:	ff 2e       	mov	r15, r31
    1126:	f0 2d       	mov	r31, r0
    1128:	00 e0       	ldi	r16, 0x00	; 0
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	be 01       	movw	r22, r28
    1132:	6e 5f       	subi	r22, 0xFE	; 254
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 c4 13 	call	0x2788	; 0x2788 <fsp_gen_cmd_w_data_pkt>
	fsp_encode(&s_PDU_FspPacket,  payload,  &frame_len);
    113c:	ae 01       	movw	r20, r28
    113e:	4f 5f       	subi	r20, 0xFF	; 255
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	be 01       	movw	r22, r28
    1144:	6e 5f       	subi	r22, 0xFE	; 254
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	c7 01       	movw	r24, r14
    114a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <fsp_encode>
	usart0_send_array(&payload,frame_len);	
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	ce 01       	movw	r24, r28
    1152:	02 96       	adiw	r24, 0x02	; 2
    1154:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart0_send_array>
}
    1158:	c3 59       	subi	r28, 0x93	; 147
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	08 95       	ret

00001174 <COPC_Process>:

void COPC_Process() {
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
	uint8_t status;
	
//	status = s_COPC_FspPacket.type;
//	if((status == FSP_PKT_TYPE_ACK) || (status == FSP_PKT_TYPE_DATA_WITH_ACK) || (status == FSP_PKT_TYPE_CMD_WITH_ACK) || (status == FSP_PKT_TYPE_CMD_W_DATA_ACK))
//		ACK_answer();
	switch (s_pCOPC_Sfp_Payload->commonFrame.Cmd)
    1178:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    117c:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    1180:	80 81       	ld	r24, Z
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	d1 f1       	breq	.+116    	; 0x11fa <COPC_Process+0x86>
    1186:	28 f4       	brcc	.+10     	; 0x1192 <COPC_Process+0x1e>
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	61 f0       	breq	.+24     	; 0x11a4 <COPC_Process+0x30>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	01 f1       	breq	.+64     	; 0x11d0 <COPC_Process+0x5c>
    1190:	6f c0       	rjmp	.+222    	; 0x1270 <COPC_Process+0xfc>
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	09 f4       	brne	.+2      	; 0x1198 <COPC_Process+0x24>
    1196:	56 c0       	rjmp	.+172    	; 0x1244 <COPC_Process+0xd0>
    1198:	08 f4       	brcc	.+2      	; 0x119c <COPC_Process+0x28>
    119a:	46 c0       	rjmp	.+140    	; 0x1228 <COPC_Process+0xb4>
    119c:	86 30       	cpi	r24, 0x06	; 6
    119e:	09 f4       	brne	.+2      	; 0x11a2 <COPC_Process+0x2e>
    11a0:	5f c0       	rjmp	.+190    	; 0x1260 <COPC_Process+0xec>
    11a2:	66 c0       	rjmp	.+204    	; 0x1270 <COPC_Process+0xfc>
	{
		case	FSP_CMD_PDU_SET_CHANNEL:
			usart1_send_string("Received set channel command\r\n");
    11a4:	81 ed       	ldi	r24, 0xD1	; 209
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			channel = s_pCOPC_Sfp_Payload->powerSingleControlFrame.Channel;
    11ac:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    11b0:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
			status = s_pCOPC_Sfp_Payload->powerSingleControlFrame.Status;
    11b6:	62 81       	ldd	r22, Z+2	; 0x02
			if (channel > NUM_OF_CHANNEL - 1)	break;
    11b8:	89 30       	cpi	r24, 0x09	; 9
    11ba:	08 f0       	brcs	.+2      	; 0x11be <COPC_Process+0x4a>
    11bc:	59 c0       	rjmp	.+178    	; 0x1270 <COPC_Process+0xfc>
			if(status > 1)					break;
    11be:	62 30       	cpi	r22, 0x02	; 2
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <COPC_Process+0x50>
    11c2:	56 c0       	rjmp	.+172    	; 0x1270 <COPC_Process+0xfc>
			POWER_ACTIVATE(channel + NUM_OF_BUCK, status);
    11c4:	89 5f       	subi	r24, 0xF9	; 249
    11c6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
			OK_Send();
    11ca:	0e 94 98 07 	call	0xf30	; 0xf30 <OK_Send>
		break;
    11ce:	50 c0       	rjmp	.+160    	; 0x1270 <COPC_Process+0xfc>
		
		case	FSP_CMD_PDU_SET_BUCK:
			usart1_send_string("Received set buck command\r\n");
    11d0:	80 ef       	ldi	r24, 0xF0	; 240
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			channel = s_pCOPC_Sfp_Payload->powerSingleControlFrame.Channel;
    11d8:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    11dc:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
			status = s_pCOPC_Sfp_Payload->powerSingleControlFrame.Status;
    11e2:	62 81       	ldd	r22, Z+2	; 0x02
			if (channel > NUM_OF_BUCK - 1)	break;
    11e4:	87 30       	cpi	r24, 0x07	; 7
    11e6:	08 f0       	brcs	.+2      	; 0x11ea <COPC_Process+0x76>
    11e8:	43 c0       	rjmp	.+134    	; 0x1270 <COPC_Process+0xfc>
			if(status > 1)					break;
    11ea:	62 30       	cpi	r22, 0x02	; 2
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <COPC_Process+0x7c>
    11ee:	40 c0       	rjmp	.+128    	; 0x1270 <COPC_Process+0xfc>
			POWER_ACTIVATE(channel, status);
    11f0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
			OK_Send();
    11f4:	0e 94 98 07 	call	0xf30	; 0xf30 <OK_Send>
		break;
    11f8:	3b c0       	rjmp	.+118    	; 0x1270 <COPC_Process+0xfc>
		
		case	FSP_CMD_PDU_SET_ALL:
			usart1_send_string("Received set all command\r\n");
    11fa:	8c e0       	ldi	r24, 0x0C	; 12
    11fc:	92 e0       	ldi	r25, 0x02	; 2
    11fe:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			status = s_pCOPC_Sfp_Payload->powerAllControlFrame.Status;
    1202:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    1206:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    120a:	d1 81       	ldd	r29, Z+1	; 0x01
			if(status > 1)					break;
    120c:	d2 30       	cpi	r29, 0x02	; 2
    120e:	80 f5       	brcc	.+96     	; 0x1270 <COPC_Process+0xfc>
    1210:	c0 e0       	ldi	r28, 0x00	; 0
    1212:	05 c0       	rjmp	.+10     	; 0x121e <COPC_Process+0xaa>
			for(uint8_t i = 0 ; i < (NUM_OF_BUCK + NUM_OF_CHANNEL) ; i++)
			POWER_ACTIVATE(i,status);
    1214:	6d 2f       	mov	r22, r29
    1216:	8c 2f       	mov	r24, r28
    1218:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
		
		case	FSP_CMD_PDU_SET_ALL:
			usart1_send_string("Received set all command\r\n");
			status = s_pCOPC_Sfp_Payload->powerAllControlFrame.Status;
			if(status > 1)					break;
			for(uint8_t i = 0 ; i < (NUM_OF_BUCK + NUM_OF_CHANNEL) ; i++)
    121c:	cf 5f       	subi	r28, 0xFF	; 255
    121e:	c0 31       	cpi	r28, 0x10	; 16
    1220:	c8 f3       	brcs	.-14     	; 0x1214 <COPC_Process+0xa0>
			POWER_ACTIVATE(i,status);
			OK_Send();
    1222:	0e 94 98 07 	call	0xf30	; 0xf30 <OK_Send>
		break;
    1226:	24 c0       	rjmp	.+72     	; 0x1270 <COPC_Process+0xfc>
		
		case	FSP_CMD_PDU_GET_CHANNEL:
			usart1_send_string("Received get channel command\r\n");
    1228:	87 e2       	ldi	r24, 0x27	; 39
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			channel = s_pCOPC_Sfp_Payload->powerStatusReportFrame.Channel;
    1230:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    1234:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    1238:	81 81       	ldd	r24, Z+1	; 0x01
			if (channel > NUM_OF_CHANNEL - 1)	break;
    123a:	89 30       	cpi	r24, 0x09	; 9
    123c:	c8 f4       	brcc	.+50     	; 0x1270 <COPC_Process+0xfc>
			Channel_Status(channel);
    123e:	0e 94 9a 05 	call	0xb34	; 0xb34 <Channel_Status>
		break;
    1242:	16 c0       	rjmp	.+44     	; 0x1270 <COPC_Process+0xfc>
		
		case	FSP_CMD_PDU_GET_BUCK:
			usart1_send_string("Received get buck command\r\n");
    1244:	86 e4       	ldi	r24, 0x46	; 70
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			channel = s_pCOPC_Sfp_Payload->powerStatusReportFrame.Channel;
    124c:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <s_pCOPC_Sfp_Payload>
    1250:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <s_pCOPC_Sfp_Payload+0x1>
    1254:	81 81       	ldd	r24, Z+1	; 0x01
			if (channel > NUM_OF_BUCK - 1)	break;
    1256:	87 30       	cpi	r24, 0x07	; 7
    1258:	58 f4       	brcc	.+22     	; 0x1270 <COPC_Process+0xfc>
			Buck_Status(channel);
    125a:	0e 94 89 06 	call	0xd12	; 0xd12 <Buck_Status>
		break;
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <COPC_Process+0xfc>
		
		case	FSP_CMD_PDU_GET_ALL:
			usart1_send_string("Received get all command\r\n");
    1260:	82 e6       	ldi	r24, 0x62	; 98
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
			PDU_INT_Dis();
    1268:	0e 94 0e 04 	call	0x81c	; 0x81c <PDU_INT_Dis>
			Get_All_Status();
    126c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Get_All_Status>
		break;
	}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <COPC_task_update>:

static void COPC_task_update(void)
{
	
	char rxData;
	while (! rbuffer_empty(p_COPCBuffer))
    1276:	2b c0       	rjmp	.+86     	; 0x12ce <COPC_task_update+0x58>
	{
		rxData = rbuffer_remove(p_COPCBuffer);
    1278:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <p_COPCBuffer>
    127c:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <p_COPCBuffer+0x1>
    1280:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <rbuffer_remove>
		if(rxData == FSP_PKT_ESC)	{
    1284:	8d 3b       	cpi	r24, 0xBD	; 189
    1286:	21 f4       	brne	.+8      	; 0x1290 <COPC_task_update+0x1a>
			swap_byte = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <__data_end>
			break;
    128e:	08 95       	ret
		}
		if(swap_byte) {
    1290:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <__data_end>
    1294:	99 23       	and	r25, r25
    1296:	59 f0       	breq	.+22     	; 0x12ae <COPC_task_update+0x38>
			swap_byte = 0;
    1298:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <__data_end>
			if(rxData == FSP_PKT_TSOD)	rxData = FSP_PKT_SOD;
    129c:	8c 3d       	cpi	r24, 0xDC	; 220
    129e:	09 f4       	brne	.+2      	; 0x12a2 <COPC_task_update+0x2c>
    12a0:	8a ec       	ldi	r24, 0xCA	; 202
			if(rxData == FSP_PKT_TESC)	rxData = FSP_PKT_ESC;
    12a2:	8b 3d       	cpi	r24, 0xDB	; 219
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <COPC_task_update+0x32>
    12a6:	8d eb       	ldi	r24, 0xBD	; 189
			if(rxData == FSP_PKT_TEOF)	rxData = FSP_PKT_EOF;
    12a8:	8e 3d       	cpi	r24, 0xDE	; 222
    12aa:	09 f4       	brne	.+2      	; 0x12ae <COPC_task_update+0x38>
    12ac:	8f ee       	ldi	r24, 0xEF	; 239
		}
		switch (fsp_decode(rxData,&s_COPC_FspPacket))
    12ae:	66 ea       	ldi	r22, 0xA6	; 166
    12b0:	75 e0       	ldi	r23, 0x05	; 5
    12b2:	0e 94 c1 14 	call	0x2982	; 0x2982 <fsp_decode>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <COPC_task_update+0x4a>
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <COPC_task_update+0x50>
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <COPC_task_update+0x58>
		{
			//process command
            case FSP_PKT_NOT_READY:
				break;
            case FSP_PKT_READY:
				COPC_Process();
    12c0:	0e 94 ba 08 	call	0x1174	; 0x1174 <COPC_Process>
	            break;
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <COPC_task_update+0x58>
            case FSP_PKT_INVALID:
				
	            break;
            case FSP_PKT_WRONG_ADR:
				usart1_send_string("Wrong module adr \r\n");					
    12c6:	8d e7       	ldi	r24, 0x7D	; 125
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>

static void COPC_task_update(void)
{
	
	char rxData;
	while (! rbuffer_empty(p_COPCBuffer))
    12ce:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <p_COPCBuffer>
    12d2:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <p_COPCBuffer+0x1>
    12d6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <rbuffer_empty>
    12da:	88 23       	and	r24, r24
    12dc:	69 f2       	breq	.-102    	; 0x1278 <COPC_task_update+0x2>
    12de:	08 95       	ret

000012e0 <status_led_led1_off>:
	
}

static void status_led_led1_off(void)
{
	LED1_DATA_PORT |= ((1 << LED1_PIN));	
    12e0:	82 b3       	in	r24, 0x12	; 18
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	82 bb       	out	0x12, r24	; 18
    12e6:	08 95       	ret

000012e8 <status_led_led1_on>:
}

static void status_led_led1_on(void)
{
	LED1_DATA_PORT &= ~((1 << LED1_PIN));
    12e8:	82 b3       	in	r24, 0x12	; 18
    12ea:	8f 7b       	andi	r24, 0xBF	; 191
    12ec:	82 bb       	out	0x12, r24	; 18
    12ee:	08 95       	ret

000012f0 <status_led_led2_off>:
}

static void status_led_led2_off(void)
{
	LED2_DATA_PORT |= ((1 << LED2_PIN));
    12f0:	82 b3       	in	r24, 0x12	; 18
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	82 bb       	out	0x12, r24	; 18
    12f6:	08 95       	ret

000012f8 <status_led_led2_on>:
}

static void status_led_led2_on(void)
{
	LED2_DATA_PORT &= ~((1 << LED2_PIN));
    12f8:	82 b3       	in	r24, 0x12	; 18
    12fa:	8f 77       	andi	r24, 0x7F	; 127
    12fc:	82 bb       	out	0x12, r24	; 18
    12fe:	08 95       	ret

00001300 <status_led_powerup>:
	}
}
static	void	status_led_powerup(void)
{
		{
			if ((s_led_display_status.led1 == 1) && (s_led_display_status.led1 == 1))	//both ON
    1300:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    1304:	98 2f       	mov	r25, r24
    1306:	91 70       	andi	r25, 0x01	; 1
    1308:	80 ff       	sbrs	r24, 0
    130a:	16 c0       	rjmp	.+44     	; 0x1338 <status_led_powerup+0x38>
			{
				if (SCH_TIM_HasCompleted(SCH_TIM_LED))
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    1312:	88 23       	and	r24, r24
    1314:	c9 f1       	breq	.+114    	; 0x1388 <status_led_powerup+0x88>
				{
					s_led_display_status.led1 = 0;
    1316:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
					s_led_display_status.led1 = 0;
					status_led_led1_off();
    1320:	0e 94 70 09 	call	0x12e0	; 0x12e0 <status_led_led1_off>
					status_led_led2_off();
    1324:	0e 94 78 09 	call	0x12f0	; 0x12f0 <status_led_led2_off>
					SCH_TIM_Start(SCH_TIM_LED,POWERUP_PERIOD);	//restart
    1328:	48 ee       	ldi	r20, 0xE8	; 232
    132a:	53 e0       	ldi	r21, 0x03	; 3
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    1336:	08 95       	ret
				}
			}
			else if ((s_led_display_status.led1 == 0) && (s_led_display_status.led1 == 0))	//both OFF
    1338:	91 11       	cpse	r25, r1
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <status_led_powerup+0x68>
			{
				if (SCH_TIM_HasCompleted(SCH_TIM_LED))
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    1342:	88 23       	and	r24, r24
    1344:	09 f1       	breq	.+66     	; 0x1388 <status_led_powerup+0x88>
				{
					s_led_display_status.led1 = 1;
    1346:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
					s_led_display_status.led1 = 1;
					status_led_led1_on();
    1350:	0e 94 74 09 	call	0x12e8	; 0x12e8 <status_led_led1_on>
					status_led_led2_on();
    1354:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <status_led_led2_on>
					SCH_TIM_Start(SCH_TIM_LED,POWERUP_PERIOD);	//restart					
    1358:	48 ee       	ldi	r20, 0xE8	; 232
    135a:	53 e0       	ldi	r21, 0x03	; 3
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    1366:	08 95       	ret
					
				}
			}
			else
			{
				s_led_display_status.led1 = 0;
    1368:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    136c:	8e 7f       	andi	r24, 0xFE	; 254
    136e:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
				s_led_display_status.led1 = 0;
				status_led_led1_off();
    1372:	0e 94 70 09 	call	0x12e0	; 0x12e0 <status_led_led1_off>
				status_led_led2_off();
    1376:	0e 94 78 09 	call	0x12f0	; 0x12f0 <status_led_led2_off>
				SCH_TIM_Start(SCH_TIM_LED,POWERUP_PERIOD);	//restart
    137a:	48 ee       	ldi	r20, 0xE8	; 232
    137c:	53 e0       	ldi	r21, 0x03	; 3
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    1388:	08 95       	ret

0000138a <status_led_normal>:
		}
}

static	void	status_led_normal(void)
{
	if (s_led_display_status.led1 == 1)
    138a:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    138e:	98 2f       	mov	r25, r24
    1390:	91 70       	andi	r25, 0x01	; 1
    1392:	80 ff       	sbrs	r24, 0
    1394:	14 c0       	rjmp	.+40     	; 0x13be <status_led_normal+0x34>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_LED))
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    139c:	88 23       	and	r24, r24
    139e:	21 f1       	breq	.+72     	; 0x13e8 <status_led_normal+0x5e>
			{
				s_led_display_status.led1 = 0;
    13a0:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    13a4:	8e 7f       	andi	r24, 0xFE	; 254
    13a6:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
				status_led_led1_off();
    13aa:	0e 94 70 09 	call	0x12e0	; 0x12e0 <status_led_led1_off>
				SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_OFF_PERIOD);	//restart
    13ae:	40 ed       	ldi	r20, 0xD0	; 208
    13b0:	57 e0       	ldi	r21, 0x07	; 7
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    13bc:	08 95       	ret
			}		
	}
	else if (s_led_display_status.led1 == 0)
    13be:	91 11       	cpse	r25, r1
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <status_led_normal+0x5e>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_LED))
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    13c8:	88 23       	and	r24, r24
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <status_led_normal+0x5e>
		{
			s_led_display_status.led1 = 1;
    13cc:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
			status_led_led1_on();
    13d6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <status_led_led1_on>
			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
    13da:	48 ee       	ldi	r20, 0xE8	; 232
    13dc:	53 e0       	ldi	r21, 0x03	; 3
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    13e8:	08 95       	ret

000013ea <status_led_update>:
{
	LED2_DATA_PORT &= ~((1 << LED2_PIN));
}
void	status_led_update(void)
{
	switch (s_led_display_status.state) {
    13ea:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <s_led_display_status>
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	19 f0       	breq	.+6      	; 0x13fa <status_led_update+0x10>
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	21 f0       	breq	.+8      	; 0x1400 <status_led_update+0x16>
    13f8:	08 95       	ret
	case POWERUP:
		status_led_powerup();
    13fa:	0e 94 80 09 	call	0x1300	; 0x1300 <status_led_powerup>
		break;
    13fe:	08 95       	ret
	case RUNNING:
		status_led_normal();
    1400:	0e 94 c5 09 	call	0x138a	; 0x138a <status_led_normal>
    1404:	08 95       	ret

00001406 <status_led_set_status>:
static void status_led_led2_on(void);
static void status_led_led2_off(void);
static	void	status_led_powerup(void);
void	status_led_set_status(e_PDU_Status status)
{
	s_led_display_status.state = status;
    1406:	88 0f       	add	r24, r24
    1408:	88 0f       	add	r24, r24
    140a:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <s_led_display_status>
    140e:	93 70       	andi	r25, 0x03	; 3
    1410:	89 2b       	or	r24, r25
    1412:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <s_led_display_status>
    1416:	08 95       	ret

00001418 <status_led_init>:
}

void status_led_init(void)
{
	LED1_DIR_PORT |= (1 << LED1_PIN);
    1418:	81 b3       	in	r24, 0x11	; 17
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	81 bb       	out	0x11, r24	; 17
	LED1_DATA_PORT &= ~((1 << LED1_PIN));
    141e:	82 b3       	in	r24, 0x12	; 18
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	82 bb       	out	0x12, r24	; 18
	LED2_DIR_PORT |= (1 << LED2_PIN);
    1424:	81 b3       	in	r24, 0x11	; 17
    1426:	80 68       	ori	r24, 0x80	; 128
    1428:	81 bb       	out	0x11, r24	; 17
	LED2_DATA_PORT &= ~((1 << LED2_PIN));	
    142a:	82 b3       	in	r24, 0x12	; 18
    142c:	8f 77       	andi	r24, 0x7F	; 127
    142e:	82 bb       	out	0x12, r24	; 18
	s_led_display_status.led1 = 0;
	s_led_display_status.led2 = 0;
	s_led_display_status.state = POWERUP;
    1430:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <s_led_display_status>
	status_led_led1_off();
    1434:	0e 94 70 09 	call	0x12e0	; 0x12e0 <status_led_led1_off>
	status_led_led2_off();
    1438:	0e 94 78 09 	call	0x12f0	; 0x12f0 <status_led_led2_off>
    143c:	08 95       	ret

0000143e <status_led_create_task>:
	}
}

void	status_led_create_task(void)
{
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
    143e:	68 e0       	ldi	r22, 0x08	; 8
    1440:	71 e0       	ldi	r23, 0x01	; 1
    1442:	87 e0       	ldi	r24, 0x07	; 7
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 9d 11 	call	0x233a	; 0x233a <SCH_TASK_CreateTask>
    144a:	08 95       	ret

0000144c <main>:

float kkkk = 0;
int main(void)
{
	uint8_t error_flag = 0;
	status_led_init();
    144c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <status_led_init>
	usart0_init();
    1450:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <usart0_init>
	
//	usart1_init();
	SCH_Initialize();
    1454:	0e 94 65 11 	call	0x22ca	; 0x22ca <SCH_Initialize>
	status_led_create_task();
    1458:	0e 94 1f 0a 	call	0x143e	; 0x143e <status_led_create_task>
	COPC_init();
    145c:	0e 94 7f 05 	call	0xafe	; 0xafe <COPC_init>
	COPC_create_task();
    1460:	0e 94 91 05 	call	0xb22	; 0xb22 <COPC_create_task>
	command_init();
    1464:	0e 94 49 11 	call	0x2292	; 0x2292 <command_init>
	command_create_task();	
    1468:	0e 94 2f 11 	call	0x225e	; 0x225e <command_create_task>
	WDT_init();
    146c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <WDT_init>
	SCH_StartSchedular();
    1470:	0e 94 96 12 	call	0x252c	; 0x252c <SCH_StartSchedular>
	ADC_init();
    1474:	0e 94 2c 04 	call	0x858	; 0x858 <ADC_init>

	POWER_IO_init();
    1478:	0e 94 57 0b 	call	0x16ae	; 0x16ae <POWER_IO_init>
	PDUINT_init();
    147c:	0e 94 03 04 	call	0x806	; 0x806 <PDUINT_init>
	status_led_set_status(RUNNING); 
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 03 0a 	call	0x1406	; 0x1406 <status_led_set_status>
	PDU_Status = RUNNING;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <PDU_Status>
	
	kkkk = SCALE_A;
    148c:	8f e0       	ldi	r24, 0x0F	; 15
    148e:	90 e5       	ldi	r25, 0x50	; 80
    1490:	ae e6       	ldi	r26, 0x6E	; 110
    1492:	bb e3       	ldi	r27, 0x3B	; 59
    1494:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <kkkk>
    1498:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <kkkk+0x1>
    149c:	a0 93 2c 06 	sts	0x062C, r26	; 0x80062c <kkkk+0x2>
    14a0:	b0 93 2d 06 	sts	0x062D, r27	; 0x80062d <kkkk+0x3>
	while (1) 
    {
//		Get_All_Status();
		SCH_HandleScheduledTask();
    14a4:	0e 94 99 12 	call	0x2532	; 0x2532 <SCH_HandleScheduledTask>
		for(uint8_t i = 0; i < POWER_OUTPUT; i++) {
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	34 c0       	rjmp	.+104    	; 0x1514 <main+0xc8>
			if(OFF_TIME[i] == 0)	{
    14ac:	c1 2f       	mov	r28, r17
    14ae:	d0 e0       	ldi	r29, 0x00	; 0
    14b0:	fe 01       	movw	r30, r28
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	e2 5f       	subi	r30, 0xF2	; 242
    14b8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	89 2b       	or	r24, r25
    14c0:	41 f5       	brne	.+80     	; 0x1512 <main+0xc6>
				if(CHANNEL_STATUS_TABLE[channel_mapping_to_buck[i]] == OFF)		POWER_ACTIVATE(time_mapping_to_cmd[i],1);
    14c2:	fe 01       	movw	r30, r28
    14c4:	e9 5d       	subi	r30, 0xD9	; 217
    14c6:	fc 4f       	sbci	r31, 0xFC	; 252
    14c8:	e0 81       	ld	r30, Z
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	ef 56       	subi	r30, 0x6F	; 111
    14ce:	f8 4f       	sbci	r31, 0xF8	; 248
    14d0:	80 81       	ld	r24, Z
    14d2:	81 11       	cpse	r24, r1
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <main+0x98>
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	fe 01       	movw	r30, r28
    14da:	e7 50       	subi	r30, 0x07	; 7
    14dc:	fd 4f       	sbci	r31, 0xFD	; 253
    14de:	80 81       	ld	r24, Z
    14e0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
				if(CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[i + NUM_OF_BUCK]] == OFF)				POWER_ACTIVATE(i + NUM_OF_BUCK, 1);
    14e4:	fe 01       	movw	r30, r28
    14e6:	e6 5b       	subi	r30, 0xB6	; 182
    14e8:	fc 4f       	sbci	r31, 0xFC	; 252
    14ea:	e0 81       	ld	r30, Z
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ef 56       	subi	r30, 0x6F	; 111
    14f0:	f8 4f       	sbci	r31, 0xF8	; 248
    14f2:	80 81       	ld	r24, Z
    14f4:	81 11       	cpse	r24, r1
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <main+0xb6>
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	87 e0       	ldi	r24, 0x07	; 7
    14fc:	81 0f       	add	r24, r17
    14fe:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
				
				OFF_TIME[i] = 0xFFFF;
    1502:	cc 0f       	add	r28, r28
    1504:	dd 1f       	adc	r29, r29
    1506:	c2 5f       	subi	r28, 0xF2	; 242
    1508:	de 4f       	sbci	r29, 0xFE	; 254
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	99 83       	std	Y+1, r25	; 0x01
    1510:	88 83       	st	Y, r24
	kkkk = SCALE_A;
	while (1) 
    {
//		Get_All_Status();
		SCH_HandleScheduledTask();
		for(uint8_t i = 0; i < POWER_OUTPUT; i++) {
    1512:	1f 5f       	subi	r17, 0xFF	; 255
    1514:	19 30       	cpi	r17, 0x09	; 9
    1516:	50 f2       	brcs	.-108    	; 0x14ac <main+0x60>
				if(CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[i + NUM_OF_BUCK]] == OFF)				POWER_ACTIVATE(i + NUM_OF_BUCK, 1);
				
				OFF_TIME[i] = 0xFFFF;
			}
		}
		if(ADC_data.Status == DATAREADY) {
    1518:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <ADC_data>
    151c:	85 30       	cpi	r24, 0x05	; 5
    151e:	11 f6       	brne	.-124    	; 0x14a4 <main+0x58>
    1520:	0b c0       	rjmp	.+22     	; 0x1538 <main+0xec>
			error_flag = 0;
 			for(uint8_t i = 0 ; i < POWERIO_CHANNEL ; i ++)
				 if(CHANNEL_STATUS_TABLE[i] == OVERCURRENT || CHANNEL_STATUS_TABLE[i] == OVERVOLTAGE)	 error_flag = 1;
    1522:	e8 2f       	mov	r30, r24
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	ef 56       	subi	r30, 0x6F	; 111
    1528:	f8 4f       	sbci	r31, 0xF8	; 248
    152a:	90 81       	ld	r25, Z
    152c:	92 50       	subi	r25, 0x02	; 2
    152e:	92 30       	cpi	r25, 0x02	; 2
    1530:	08 f4       	brcc	.+2      	; 0x1534 <main+0xe8>
    1532:	21 e0       	ldi	r18, 0x01	; 1
				OFF_TIME[i] = 0xFFFF;
			}
		}
		if(ADC_data.Status == DATAREADY) {
			error_flag = 0;
 			for(uint8_t i = 0 ; i < POWERIO_CHANNEL ; i ++)
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	02 c0       	rjmp	.+4      	; 0x153c <main+0xf0>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	83 31       	cpi	r24, 0x13	; 19
    153e:	88 f3       	brcs	.-30     	; 0x1522 <main+0xd6>
				 if(CHANNEL_STATUS_TABLE[i] == OVERCURRENT || CHANNEL_STATUS_TABLE[i] == OVERVOLTAGE)	 error_flag = 1;
				 if(error_flag)	{
    1540:	22 23       	and	r18, r18
    1542:	31 f0       	breq	.+12     	; 0x1550 <main+0x104>
					 PDU_Status = OVERVALUE;
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <PDU_Status>
					 status_led_set_status(OVERVALUE);
    154a:	0e 94 03 0a 	call	0x1406	; 0x1406 <status_led_set_status>
    154e:	05 c0       	rjmp	.+10     	; 0x155a <main+0x10e>
				 }
				 else {
					 PDU_Status = RUNNING;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <PDU_Status>
					 status_led_set_status(RUNNING);
    1556:	0e 94 03 0a 	call	0x1406	; 0x1406 <status_led_set_status>
				 }
			ADC_data.Status = WAIT;
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <ADC_data>
    1560:	a1 cf       	rjmp	.-190    	; 0x14a4 <main+0x58>

00001562 <TEC1_Buck_On>:
//void RADIO_Off()		{ RADIO_PWR_EN_PORT &= ~(1<<RADIO_PWR_EN_PIN);	}	//removed in ver 1.2.0
void CM4_On()			{ CM4_PWR_EN_PORT |= (1<<CM4_PWR_EN_PIN);		}
void CM4_Off()			{ CM4_PWR_EN_PORT &= ~(1<<CM4_PWR_EN_PIN);		}	

void HDRM_On()			{ HDRM_PORT |= (1<<HDRM_PIN);					}
void HDRM_Off()			{ HDRM_PORT &= ~(1<<HDRM_PIN);					}
    1562:	8b b3       	in	r24, 0x1b	; 27
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	8b bb       	out	0x1b, r24	; 27
    1568:	08 95       	ret

0000156a <TEC1_Buck_Off>:
    156a:	8b b3       	in	r24, 0x1b	; 27
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	8b bb       	out	0x1b, r24	; 27
    1570:	08 95       	ret

00001572 <TEC2_Buck_On>:
    1572:	8b b3       	in	r24, 0x1b	; 27
    1574:	88 60       	ori	r24, 0x08	; 8
    1576:	8b bb       	out	0x1b, r24	; 27
    1578:	08 95       	ret

0000157a <TEC2_Buck_Off>:
    157a:	8b b3       	in	r24, 0x1b	; 27
    157c:	87 7f       	andi	r24, 0xF7	; 247
    157e:	8b bb       	out	0x1b, r24	; 27
    1580:	08 95       	ret

00001582 <TEC3_Buck_On>:
    1582:	8b b3       	in	r24, 0x1b	; 27
    1584:	80 62       	ori	r24, 0x20	; 32
    1586:	8b bb       	out	0x1b, r24	; 27
    1588:	08 95       	ret

0000158a <TEC3_Buck_Off>:
    158a:	8b b3       	in	r24, 0x1b	; 27
    158c:	8f 7d       	andi	r24, 0xDF	; 223
    158e:	8b bb       	out	0x1b, r24	; 27
    1590:	08 95       	ret

00001592 <TEC4_Buck_On>:
    1592:	e5 e6       	ldi	r30, 0x65	; 101
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	84 60       	ori	r24, 0x04	; 4
    159a:	80 83       	st	Z, r24
    159c:	08 95       	ret

0000159e <TEC4_Buck_Off>:
    159e:	e5 e6       	ldi	r30, 0x65	; 101
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	80 83       	st	Z, r24
    15a8:	08 95       	ret

000015aa <LED_Buck_On>:
    15aa:	85 b3       	in	r24, 0x15	; 21
    15ac:	80 61       	ori	r24, 0x10	; 16
    15ae:	85 bb       	out	0x15, r24	; 21
    15b0:	08 95       	ret

000015b2 <LED_Buck_Off>:
    15b2:	85 b3       	in	r24, 0x15	; 21
    15b4:	8f 7e       	andi	r24, 0xEF	; 239
    15b6:	85 bb       	out	0x15, r24	; 21
    15b8:	08 95       	ret

000015ba <CM4_Buck_On>:
    15ba:	85 b3       	in	r24, 0x15	; 21
    15bc:	81 60       	ori	r24, 0x01	; 1
    15be:	85 bb       	out	0x15, r24	; 21
    15c0:	08 95       	ret

000015c2 <CM4_Buck_Off>:
    15c2:	85 b3       	in	r24, 0x15	; 21
    15c4:	8e 7f       	andi	r24, 0xFE	; 254
    15c6:	85 bb       	out	0x15, r24	; 21
    15c8:	08 95       	ret

000015ca <MCU_Buck_On>:
    15ca:	85 b3       	in	r24, 0x15	; 21
    15cc:	88 60       	ori	r24, 0x08	; 8
    15ce:	85 bb       	out	0x15, r24	; 21
    15d0:	08 95       	ret

000015d2 <MCU_Buck_Off>:
    15d2:	85 b3       	in	r24, 0x15	; 21
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	85 bb       	out	0x15, r24	; 21
    15d8:	08 95       	ret

000015da <TEC1_On>:
    15da:	8b b3       	in	r24, 0x1b	; 27
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8b bb       	out	0x1b, r24	; 27
    15e0:	08 95       	ret

000015e2 <TEC1_Off>:
    15e2:	8b b3       	in	r24, 0x1b	; 27
    15e4:	8d 7f       	andi	r24, 0xFD	; 253
    15e6:	8b bb       	out	0x1b, r24	; 27
    15e8:	08 95       	ret

000015ea <TEC2_On>:
    15ea:	8b b3       	in	r24, 0x1b	; 27
    15ec:	84 60       	ori	r24, 0x04	; 4
    15ee:	8b bb       	out	0x1b, r24	; 27
    15f0:	08 95       	ret

000015f2 <TEC2_Off>:
    15f2:	8b b3       	in	r24, 0x1b	; 27
    15f4:	8b 7f       	andi	r24, 0xFB	; 251
    15f6:	8b bb       	out	0x1b, r24	; 27
    15f8:	08 95       	ret

000015fa <TEC3_On>:
    15fa:	8b b3       	in	r24, 0x1b	; 27
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	8b bb       	out	0x1b, r24	; 27
    1600:	08 95       	ret

00001602 <TEC3_Off>:
    1602:	8b b3       	in	r24, 0x1b	; 27
    1604:	8f 7e       	andi	r24, 0xEF	; 239
    1606:	8b bb       	out	0x1b, r24	; 27
    1608:	08 95       	ret

0000160a <TEC4_On>:
    160a:	8b b3       	in	r24, 0x1b	; 27
    160c:	80 64       	ori	r24, 0x40	; 64
    160e:	8b bb       	out	0x1b, r24	; 27
    1610:	08 95       	ret

00001612 <TEC4_Off>:
    1612:	8b b3       	in	r24, 0x1b	; 27
    1614:	8f 7b       	andi	r24, 0xBF	; 191
    1616:	8b bb       	out	0x1b, r24	; 27
    1618:	08 95       	ret

0000161a <IOU_On>:
    161a:	85 b3       	in	r24, 0x15	; 21
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	85 bb       	out	0x15, r24	; 21
    1620:	08 95       	ret

00001622 <IOU_Off>:
    1622:	85 b3       	in	r24, 0x15	; 21
    1624:	8f 7b       	andi	r24, 0xBF	; 191
    1626:	85 bb       	out	0x15, r24	; 21
    1628:	08 95       	ret

0000162a <COPC_On>:
    162a:	85 b3       	in	r24, 0x15	; 21
    162c:	80 62       	ori	r24, 0x20	; 32
    162e:	85 bb       	out	0x15, r24	; 21
    1630:	08 95       	ret

00001632 <COPC_Off>:
    1632:	85 b3       	in	r24, 0x15	; 21
    1634:	8f 7d       	andi	r24, 0xDF	; 223
    1636:	85 bb       	out	0x15, r24	; 21
    1638:	08 95       	ret

0000163a <LEDIR_On>:
    163a:	8b b3       	in	r24, 0x1b	; 27
    163c:	80 68       	ori	r24, 0x80	; 128
    163e:	8b bb       	out	0x1b, r24	; 27
    1640:	08 95       	ret

00001642 <LEDIR_Off>:
    1642:	8b b3       	in	r24, 0x1b	; 27
    1644:	8f 77       	andi	r24, 0x7F	; 127
    1646:	8b bb       	out	0x1b, r24	; 27
    1648:	08 95       	ret

0000164a <LEDRGB_On>:
    164a:	85 b3       	in	r24, 0x15	; 21
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	85 bb       	out	0x15, r24	; 21
    1650:	08 95       	ret

00001652 <LEDRGB_Off>:
    1652:	85 b3       	in	r24, 0x15	; 21
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	85 bb       	out	0x15, r24	; 21
    1658:	08 95       	ret

0000165a <CM4_On>:
    165a:	e5 e6       	ldi	r30, 0x65	; 101
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	80 83       	st	Z, r24
    1664:	08 95       	ret

00001666 <CM4_Off>:
    1666:	e5 e6       	ldi	r30, 0x65	; 101
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	80 83       	st	Z, r24
    1670:	08 95       	ret

00001672 <CAPC_On>:
    1672:	88 b3       	in	r24, 0x18	; 24
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	88 bb       	out	0x18, r24	; 24
    1678:	08 95       	ret

0000167a <CAPC_Off>:
    167a:	88 b3       	in	r24, 0x18	; 24
    167c:	8f 77       	andi	r24, 0x7F	; 127
    167e:	88 bb       	out	0x18, r24	; 24
    1680:	08 95       	ret

00001682 <VBUSOK>:
    1682:	08 95       	ret

00001684 <VINHigh>:
    1684:	81 e9       	ldi	r24, 0x91	; 145
    1686:	92 e0       	ldi	r25, 0x02	; 2
    1688:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    168c:	08 95       	ret

0000168e <VBUS_High>:
    168e:	83 ea       	ldi	r24, 0xA3	; 163
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1696:	08 95       	ret

00001698 <VIN_LOSS>:
    1698:	0e 94 12 04 	call	0x824	; 0x824 <Get_PDU_Int>
    169c:	81 11       	cpse	r24, r1
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <VIN_LOSS+0x14>
    16a0:	0e 94 0a 04 	call	0x814	; 0x814 <PDU_INT_En>
    16a4:	86 eb       	ldi	r24, 0xB6	; 182
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    16ac:	08 95       	ret

000016ae <POWER_IO_init>:
    16ae:	88 b3       	in	r24, 0x18	; 24
    16b0:	8f 7b       	andi	r24, 0xBF	; 191
    16b2:	88 bb       	out	0x18, r24	; 24
    16b4:	88 b3       	in	r24, 0x18	; 24
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	88 bb       	out	0x18, r24	; 24
    16ba:	87 b3       	in	r24, 0x17	; 23
    16bc:	80 64       	ori	r24, 0x40	; 64
    16be:	87 bb       	out	0x17, r24	; 23
    16c0:	87 b3       	in	r24, 0x17	; 23
    16c2:	80 68       	ori	r24, 0x80	; 128
    16c4:	87 bb       	out	0x17, r24	; 23
    16c6:	8b b3       	in	r24, 0x1b	; 27
    16c8:	8e 7f       	andi	r24, 0xFE	; 254
    16ca:	8b bb       	out	0x1b, r24	; 27
    16cc:	8b b3       	in	r24, 0x1b	; 27
    16ce:	87 7f       	andi	r24, 0xF7	; 247
    16d0:	8b bb       	out	0x1b, r24	; 27
    16d2:	8b b3       	in	r24, 0x1b	; 27
    16d4:	8f 7d       	andi	r24, 0xDF	; 223
    16d6:	8b bb       	out	0x1b, r24	; 27
    16d8:	e5 e6       	ldi	r30, 0x65	; 101
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8b 7f       	andi	r24, 0xFB	; 251
    16e0:	80 83       	st	Z, r24
    16e2:	85 b3       	in	r24, 0x15	; 21
    16e4:	8f 7e       	andi	r24, 0xEF	; 239
    16e6:	85 bb       	out	0x15, r24	; 21
    16e8:	85 b3       	in	r24, 0x15	; 21
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	85 bb       	out	0x15, r24	; 21
    16ee:	85 b3       	in	r24, 0x15	; 21
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	85 bb       	out	0x15, r24	; 21
    16f4:	8b b3       	in	r24, 0x1b	; 27
    16f6:	8d 7f       	andi	r24, 0xFD	; 253
    16f8:	8b bb       	out	0x1b, r24	; 27
    16fa:	8b b3       	in	r24, 0x1b	; 27
    16fc:	8b 7f       	andi	r24, 0xFB	; 251
    16fe:	8b bb       	out	0x1b, r24	; 27
    1700:	8b b3       	in	r24, 0x1b	; 27
    1702:	8f 7e       	andi	r24, 0xEF	; 239
    1704:	8b bb       	out	0x1b, r24	; 27
    1706:	8b b3       	in	r24, 0x1b	; 27
    1708:	8f 7b       	andi	r24, 0xBF	; 191
    170a:	8b bb       	out	0x1b, r24	; 27
    170c:	85 b3       	in	r24, 0x15	; 21
    170e:	8f 7b       	andi	r24, 0xBF	; 191
    1710:	85 bb       	out	0x15, r24	; 21
    1712:	85 b3       	in	r24, 0x15	; 21
    1714:	8f 7d       	andi	r24, 0xDF	; 223
    1716:	85 bb       	out	0x15, r24	; 21
    1718:	8b b3       	in	r24, 0x1b	; 27
    171a:	8f 77       	andi	r24, 0x7F	; 127
    171c:	8b bb       	out	0x1b, r24	; 27
    171e:	85 b3       	in	r24, 0x15	; 21
    1720:	8f 77       	andi	r24, 0x7F	; 127
    1722:	85 bb       	out	0x15, r24	; 21
    1724:	80 81       	ld	r24, Z
    1726:	8d 7f       	andi	r24, 0xFD	; 253
    1728:	80 83       	st	Z, r24
    172a:	8a b3       	in	r24, 0x1a	; 26
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	8a bb       	out	0x1a, r24	; 26
    1730:	8a b3       	in	r24, 0x1a	; 26
    1732:	88 60       	ori	r24, 0x08	; 8
    1734:	8a bb       	out	0x1a, r24	; 26
    1736:	8a b3       	in	r24, 0x1a	; 26
    1738:	80 62       	ori	r24, 0x20	; 32
    173a:	8a bb       	out	0x1a, r24	; 26
    173c:	e4 e6       	ldi	r30, 0x64	; 100
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	84 60       	ori	r24, 0x04	; 4
    1744:	80 83       	st	Z, r24
    1746:	84 b3       	in	r24, 0x14	; 20
    1748:	80 61       	ori	r24, 0x10	; 16
    174a:	84 bb       	out	0x14, r24	; 20
    174c:	84 b3       	in	r24, 0x14	; 20
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	84 bb       	out	0x14, r24	; 20
    1752:	84 b3       	in	r24, 0x14	; 20
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	84 bb       	out	0x14, r24	; 20
    1758:	8a b3       	in	r24, 0x1a	; 26
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	8a bb       	out	0x1a, r24	; 26
    175e:	8a b3       	in	r24, 0x1a	; 26
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	8a bb       	out	0x1a, r24	; 26
    1764:	8a b3       	in	r24, 0x1a	; 26
    1766:	80 61       	ori	r24, 0x10	; 16
    1768:	8a bb       	out	0x1a, r24	; 26
    176a:	8a b3       	in	r24, 0x1a	; 26
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	8a bb       	out	0x1a, r24	; 26
    1770:	84 b3       	in	r24, 0x14	; 20
    1772:	80 64       	ori	r24, 0x40	; 64
    1774:	84 bb       	out	0x14, r24	; 20
    1776:	84 b3       	in	r24, 0x14	; 20
    1778:	80 62       	ori	r24, 0x20	; 32
    177a:	84 bb       	out	0x14, r24	; 20
    177c:	8a b3       	in	r24, 0x1a	; 26
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	8a bb       	out	0x1a, r24	; 26
    1782:	84 b3       	in	r24, 0x14	; 20
    1784:	80 68       	ori	r24, 0x80	; 128
    1786:	84 bb       	out	0x14, r24	; 20
    1788:	80 81       	ld	r24, Z
    178a:	82 60       	ori	r24, 0x02	; 2
    178c:	80 83       	st	Z, r24
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	06 c0       	rjmp	.+12     	; 0x179e <POWER_IO_init+0xf0>
    1792:	e8 2f       	mov	r30, r24
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	ef 56       	subi	r30, 0x6F	; 111
    1798:	f8 4f       	sbci	r31, 0xF8	; 248
    179a:	10 82       	st	Z, r1
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	83 31       	cpi	r24, 0x13	; 19
    17a0:	c0 f3       	brcs	.-16     	; 0x1792 <POWER_IO_init+0xe4>
    17a2:	08 95       	ret

000017a4 <POWER_ACTIVATE>:
	}
}
void VBUSOK()			{ return;		}
void VBUS_High()		{ usart1_send_string("VBUS IS TOO HIGH\r\n");		}
	
uint8_t POWER_ACTIVATE(uint8_t channel, uint8_t state) {
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	d8 2f       	mov	r29, r24
    17ae:	c6 2f       	mov	r28, r22
	if(channel > (POWERIO_CHANNEL - 1))	return 0;
    17b0:	83 31       	cpi	r24, 0x13	; 19
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <POWER_ACTIVATE+0x12>
    17b4:	89 c0       	rjmp	.+274    	; 0x18c8 <POWER_ACTIVATE+0x124>
	if(state)
    17b6:	66 23       	and	r22, r22
    17b8:	59 f0       	breq	.+22     	; 0x17d0 <POWER_ACTIVATE+0x2c>
		CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]] = ON;
    17ba:	e8 2f       	mov	r30, r24
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	ed 5b       	subi	r30, 0xBD	; 189
    17c0:	fc 4f       	sbci	r31, 0xFC	; 252
    17c2:	e0 81       	ld	r30, Z
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	ef 56       	subi	r30, 0x6F	; 111
    17c8:	f8 4f       	sbci	r31, 0xF8	; 248
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	80 83       	st	Z, r24
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <POWER_ACTIVATE+0x3e>
	else
		CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]] = OFF;
    17d0:	e8 2f       	mov	r30, r24
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	ed 5b       	subi	r30, 0xBD	; 189
    17d6:	fc 4f       	sbci	r31, 0xFC	; 252
    17d8:	e0 81       	ld	r30, Z
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	ef 56       	subi	r30, 0x6F	; 111
    17de:	f8 4f       	sbci	r31, 0xF8	; 248
    17e0:	10 82       	st	Z, r1
		
	function_array[cmd_to_channel_mapping[channel]][state]();
    17e2:	0d 2f       	mov	r16, r29
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	f8 01       	movw	r30, r16
    17e8:	ed 5b       	subi	r30, 0xBD	; 189
    17ea:	fc 4f       	sbci	r31, 0xFC	; 252
    17ec:	e0 81       	ld	r30, Z
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ec 0f       	add	r30, r28
    17f6:	f1 1d       	adc	r31, r1
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ee 5c       	subi	r30, 0xCE	; 206
    17fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1800:	01 90       	ld	r0, Z+
    1802:	f0 81       	ld	r31, Z
    1804:	e0 2d       	mov	r30, r0
    1806:	09 95       	icall
	if(!state)
    1808:	c1 11       	cpse	r28, r1
    180a:	37 c0       	rjmp	.+110    	; 0x187a <POWER_ACTIVATE+0xd6>
		if(channel > NUM_OF_BUCK - 1)
    180c:	d7 30       	cpi	r29, 0x07	; 7
    180e:	78 f0       	brcs	.+30     	; 0x182e <POWER_ACTIVATE+0x8a>
			OFF_TIME[channel - NUM_OF_BUCK] = OFF_TIME_MAXIMUM[channel - NUM_OF_BUCK];
    1810:	c8 01       	movw	r24, r16
    1812:	07 97       	sbiw	r24, 0x07	; 7
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	fc 01       	movw	r30, r24
    181a:	e0 5e       	subi	r30, 0xE0	; 224
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	fc 01       	movw	r30, r24
    1824:	e2 5f       	subi	r30, 0xF2	; 242
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	31 83       	std	Z+1, r19	; 0x01
    182a:	20 83       	st	Z, r18
    182c:	26 c0       	rjmp	.+76     	; 0x187a <POWER_ACTIVATE+0xd6>
		else {
			if(buck_mapping_to_time[0][channel] != 255)
    182e:	f8 01       	movw	r30, r16
    1830:	ee 5f       	subi	r30, 0xFE	; 254
    1832:	fc 4f       	sbci	r31, 0xFC	; 252
    1834:	80 81       	ld	r24, Z
    1836:	8f 3f       	cpi	r24, 0xFF	; 255
    1838:	69 f0       	breq	.+26     	; 0x1854 <POWER_ACTIVATE+0xb0>
				OFF_TIME[buck_mapping_to_time[0][channel]] = OFF_TIME_MAXIMUM[buck_mapping_to_time[0][channel]];
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	fc 01       	movw	r30, r24
    1842:	e0 5e       	subi	r30, 0xE0	; 224
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	20 81       	ld	r18, Z
    1848:	31 81       	ldd	r19, Z+1	; 0x01
    184a:	fc 01       	movw	r30, r24
    184c:	e2 5f       	subi	r30, 0xF2	; 242
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	31 83       	std	Z+1, r19	; 0x01
    1852:	20 83       	st	Z, r18
			if(buck_mapping_to_time[1][channel] != 255)
    1854:	f8 01       	movw	r30, r16
    1856:	ee 5f       	subi	r30, 0xFE	; 254
    1858:	fc 4f       	sbci	r31, 0xFC	; 252
    185a:	87 81       	ldd	r24, Z+7	; 0x07
    185c:	8f 3f       	cpi	r24, 0xFF	; 255
    185e:	69 f0       	breq	.+26     	; 0x187a <POWER_ACTIVATE+0xd6>
				OFF_TIME[buck_mapping_to_time[1][channel]] = OFF_TIME_MAXIMUM[buck_mapping_to_time[1][channel]];
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	fc 01       	movw	r30, r24
    1868:	e0 5e       	subi	r30, 0xE0	; 224
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	20 81       	ld	r18, Z
    186e:	31 81       	ldd	r19, Z+1	; 0x01
    1870:	fc 01       	movw	r30, r24
    1872:	e2 5f       	subi	r30, 0xF2	; 242
    1874:	fe 4f       	sbci	r31, 0xFE	; 254
    1876:	31 83       	std	Z+1, r19	; 0x01
    1878:	20 83       	st	Z, r18
		}

	if(state)	state = 4;
    187a:	c1 11       	cpse	r28, r1
    187c:	c4 e0       	ldi	r28, 0x04	; 4
	
	usart1_send_string("Turn ");
    187e:	84 ec       	ldi	r24, 0xC4	; 196
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_string(NAME_STATUS_TABLE[state].pcStatus);
    1886:	ec 2f       	mov	r30, r28
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	ea 5a       	subi	r30, 0xAA	; 170
    1890:	fc 4f       	sbci	r31, 0xFC	; 252
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_char(' ');
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
	usart1_send_string_P(NAME_TABLE[channel]);
    18a2:	c8 01       	movw	r24, r16
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	80 0f       	add	r24, r16
    18aa:	91 1f       	adc	r25, r17
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	82 57       	subi	r24, 0x72	; 114
    18b6:	9e 4f       	sbci	r25, 0xFE	; 254
    18b8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <usart1_send_string_P>
	usart1_send_string("\r\n");
    18bc:	8f ea       	ldi	r24, 0xAF	; 175
    18be:	93 e0       	ldi	r25, 0x03	; 3
    18c0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	return 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <POWER_ACTIVATE+0x126>
}
void VBUSOK()			{ return;		}
void VBUS_High()		{ usart1_send_string("VBUS IS TOO HIGH\r\n");		}
	
uint8_t POWER_ACTIVATE(uint8_t channel, uint8_t state) {
	if(channel > (POWERIO_CHANNEL - 1))	return 0;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
	usart1_send_string(NAME_STATUS_TABLE[state].pcStatus);
	usart1_send_char(' ');
	usart1_send_string_P(NAME_TABLE[channel]);
	usart1_send_string("\r\n");
	return 1;
}
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <OVER_ERR_CUTOFF>:

void OVER_ERR_CUTOFF(uint8_t channel) {
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
	if(channel > (POWERIO_CHANNEL - 1))	return;
    18da:	83 31       	cpi	r24, 0x13	; 19
    18dc:	f0 f5       	brcc	.+124    	; 0x195a <OVER_ERR_CUTOFF+0x86>
	function_array[channel][0]();
    18de:	c8 2f       	mov	r28, r24
    18e0:	d0 e0       	ldi	r29, 0x00	; 0
    18e2:	fe 01       	movw	r30, r28
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	ee 5c       	subi	r30, 0xCE	; 206
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	01 90       	ld	r0, Z+
    18f2:	f0 81       	ld	r31, Z
    18f4:	e0 2d       	mov	r30, r0
    18f6:	09 95       	icall
	CHANNEL_STATUS_TABLE[channel] = ADC_to_Erro_Mapping[channel];
    18f8:	fe 01       	movw	r30, r28
    18fa:	e2 54       	subi	r30, 0x42	; 66
    18fc:	fe 4f       	sbci	r31, 0xFE	; 254
    18fe:	10 81       	ld	r17, Z
    1900:	fe 01       	movw	r30, r28
    1902:	ef 56       	subi	r30, 0x6F	; 111
    1904:	f8 4f       	sbci	r31, 0xF8	; 248
    1906:	10 83       	st	Z, r17
	PDU_INT_En();
    1908:	0e 94 0a 04 	call	0x814	; 0x814 <PDU_INT_En>
	usart1_send_string("\r\n");
    190c:	8f ea       	ldi	r24, 0xAF	; 175
    190e:	93 e0       	ldi	r25, 0x03	; 3
    1910:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_string(NAME_STATUS_TABLE[ADC_to_Erro_Mapping[channel]].pcStatus);
    1914:	e1 2f       	mov	r30, r17
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	ea 5a       	subi	r30, 0xAA	; 170
    191e:	fc 4f       	sbci	r31, 0xFC	; 252
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_string(" on line ");
    1928:	8a ec       	ldi	r24, 0xCA	; 202
    192a:	92 e0       	ldi	r25, 0x02	; 2
    192c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_string_P(NAME_TABLE[channel_mapping_to_cmd[channel]]);
    1930:	c0 5d       	subi	r28, 0xD0	; 208
    1932:	dc 4f       	sbci	r29, 0xFC	; 252
    1934:	88 81       	ld	r24, Y
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 01       	movw	r18, r24
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	82 0f       	add	r24, r18
    1940:	93 1f       	adc	r25, r19
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	82 57       	subi	r24, 0x72	; 114
    194c:	9e 4f       	sbci	r25, 0xFE	; 254
    194e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <usart1_send_string_P>
	usart1_send_string("\r\n");
    1952:	8f ea       	ldi	r24, 0xAF	; 175
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	08 95       	ret

00001962 <status_wdt_update>:
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
}

void	status_wdt_update(void)
{
		if (WDT_Current){
    1962:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <WDT_Current>
    1966:	88 23       	and	r24, r24
    1968:	91 f0       	breq	.+36     	; 0x198e <status_wdt_update+0x2c>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    1970:	88 23       	and	r24, r24
    1972:	f9 f0       	breq	.+62     	; 0x19b2 <status_wdt_update+0x50>
			{
				WDT_Current = 0;
    1974:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <WDT_Current>
				TPL5010_DONE_PORT &= ~(1 << TPL5010_DONE_PIN);
    1978:	83 b1       	in	r24, 0x03	; 3
    197a:	8f 7b       	andi	r24, 0xBF	; 191
    197c:	83 b9       	out	0x03, r24	; 3
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
    197e:	48 ee       	ldi	r20, 0xE8	; 232
    1980:	53 e0       	ldi	r21, 0x03	; 3
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    198c:	08 95       	ret
			}
		} else {
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	0e 94 90 11 	call	0x2320	; 0x2320 <SCH_TIM_HasCompleted>
    1994:	88 23       	and	r24, r24
    1996:	69 f0       	breq	.+26     	; 0x19b2 <status_wdt_update+0x50>
			{
				WDT_Current = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <WDT_Current>
				TPL5010_DONE_PORT |= (1 << TPL5010_DONE_PIN);
    199e:	83 b1       	in	r24, 0x03	; 3
    19a0:	80 64       	ori	r24, 0x40	; 64
    19a2:	83 b9       	out	0x03, r24	; 3
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
    19a4:	48 ec       	ldi	r20, 0xC8	; 200
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 85 11 	call	0x230a	; 0x230a <SCH_TIM_Start>
    19b2:	08 95       	ret

000019b4 <WDT_init>:
	}
};

void WDT_init(void)
{
	TPL5010_DONE_DDR |= (1 << TPL5010_DONE_PIN);
    19b4:	82 b1       	in	r24, 0x02	; 2
    19b6:	80 64       	ori	r24, 0x40	; 64
    19b8:	82 b9       	out	0x02, r24	; 2
	TPL5010_WAKE_DDR &= ~((1 << TPL5010_WAKE_PIN));
    19ba:	82 b1       	in	r24, 0x02	; 2
    19bc:	8f 77       	andi	r24, 0x7F	; 127
    19be:	82 b9       	out	0x02, r24	; 2
	TPL5010_DONE_PORT |= (1 << TPL5010_DONE_PIN);
    19c0:	83 b1       	in	r24, 0x03	; 3
    19c2:	80 64       	ori	r24, 0x40	; 64
    19c4:	83 b9       	out	0x03, r24	; 3
	TPL5010_WAKE_PORT &= ~((1 << TPL5010_WAKE_PIN));
    19c6:	83 b1       	in	r24, 0x03	; 3
    19c8:	8f 77       	andi	r24, 0x7F	; 127
    19ca:	83 b9       	out	0x03, r24	; 3
	WDT_Current = 0;
    19cc:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <WDT_Current>
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
    19d0:	6f e7       	ldi	r22, 0x7F	; 127
    19d2:	71 e0       	ldi	r23, 0x01	; 1
    19d4:	8e e7       	ldi	r24, 0x7E	; 126
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	0e 94 9d 11 	call	0x233a	; 0x233a <SCH_TASK_CreateTask>
    19dc:	08 95       	ret

000019de <timer_start_timer0>:
			  // enable global interrupts
	sei();
}
void	timer_stop_timer0(void)
{
	TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));	
    19de:	83 b7       	in	r24, 0x33	; 51
    19e0:	84 60       	ori	r24, 0x04	; 4
    19e2:	83 bf       	out	0x33, r24	; 51
    19e4:	87 b7       	in	r24, 0x37	; 55
    19e6:	82 60       	ori	r24, 0x02	; 2
    19e8:	87 bf       	out	0x37, r24	; 55
    19ea:	78 94       	sei
    19ec:	08 95       	ret

000019ee <timer_timer0_init>:
}
void	timer_timer0_init(void)
{
	  // set up timer with prescaler = 64 and CTC mode
	  TCCR0 |= (1 << WGM01);
    19ee:	83 b7       	in	r24, 0x33	; 51
    19f0:	88 60       	ori	r24, 0x08	; 8
    19f2:	83 bf       	out	0x33, r24	; 51

	  // initialize counter
	  TCNT0 = 0;
    19f4:	12 be       	out	0x32, r1	; 50

	  // initialize compare value (tick every 1ms)
	  OCR0 = 125 - 1;
    19f6:	8c e7       	ldi	r24, 0x7C	; 124
    19f8:	81 bf       	out	0x31, r24	; 49
    19fa:	08 95       	ret

000019fc <rbuffer_init>:
	while(!(UCSR1A & (1 << TXC)));										// Wait for Tx unit to transmit the LAST character of ringbuffer

	_delay_ms(200);                                             // Extra safety for Tx to finish!

	UCSR1B &= ~( (1<<RXEN)|(1<<TXEN)|(1<<RXCIE) | (1<<	UDRIE));					//disable TX, RX, RX interrupt
	UCSR1C &= (1<<UCSZ1) | (1<<UCSZ0);
    19fc:	3f b7       	in	r19, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <rbuffer_init+0x1a>
    1a04:	fc 01       	movw	r30, r24
    1a06:	e0 58       	subi	r30, 0x80	; 128
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	10 82       	st	Z, r1
    1a0c:	31 96       	adiw	r30, 0x01	; 1
    1a0e:	10 82       	st	Z, r1
    1a10:	31 96       	adiw	r30, 0x01	; 1
    1a12:	10 82       	st	Z, r1
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	21 11       	cpse	r18, r1
    1a18:	f5 cf       	rjmp	.-22     	; 0x1a04 <rbuffer_init+0x8>
    1a1a:	3f bf       	out	0x3f, r19	; 63
    1a1c:	08 95       	ret

00001a1e <rbuffer_full>:
    1a1e:	8e 57       	subi	r24, 0x7E	; 126
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	fc 01       	movw	r30, r24
    1a24:	90 81       	ld	r25, Z
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 38       	cpi	r25, 0x80	; 128
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <rbuffer_full+0x10>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	08 95       	ret

00001a30 <rbuffer_empty>:
    1a30:	8e 57       	subi	r24, 0x7E	; 126
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	fc 01       	movw	r30, r24
    1a36:	90 81       	ld	r25, Z
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	91 11       	cpse	r25, r1
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	08 95       	ret

00001a40 <rbuffer_insert>:
    1a40:	fb 01       	movw	r30, r22
    1a42:	e0 58       	subi	r30, 0x80	; 128
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	90 81       	ld	r25, Z
    1a48:	fb 01       	movw	r30, r22
    1a4a:	e9 0f       	add	r30, r25
    1a4c:	f1 1d       	adc	r31, r1
    1a4e:	80 83       	st	Z, r24
    1a50:	9f b7       	in	r25, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <rbuffer_insert+0x30>
    1a58:	fb 01       	movw	r30, r22
    1a5a:	e0 58       	subi	r30, 0x80	; 128
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	8f 77       	andi	r24, 0x7F	; 127
    1a64:	80 83       	st	Z, r24
    1a66:	32 96       	adiw	r30, 0x02	; 2
    1a68:	80 81       	ld	r24, Z
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	80 83       	st	Z, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	81 11       	cpse	r24, r1
    1a72:	f2 cf       	rjmp	.-28     	; 0x1a58 <rbuffer_insert+0x18>
    1a74:	9f bf       	out	0x3f, r25	; 63
    1a76:	08 95       	ret

00001a78 <rbuffer_remove>:
    1a78:	9c 01       	movw	r18, r24
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	ef 57       	subi	r30, 0x7F	; 127
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	f9 01       	movw	r30, r18
    1a84:	e8 0f       	add	r30, r24
    1a86:	f1 1d       	adc	r31, r1
    1a88:	80 81       	ld	r24, Z
    1a8a:	4f b7       	in	r20, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0c c0       	rjmp	.+24     	; 0x1aaa <rbuffer_remove+0x32>
    1a92:	f9 01       	movw	r30, r18
    1a94:	ef 57       	subi	r30, 0x7F	; 127
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	90 81       	ld	r25, Z
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	9f 77       	andi	r25, 0x7F	; 127
    1a9e:	90 83       	st	Z, r25
    1aa0:	31 96       	adiw	r30, 0x01	; 1
    1aa2:	90 81       	ld	r25, Z
    1aa4:	91 50       	subi	r25, 0x01	; 1
    1aa6:	90 83       	st	Z, r25
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	91 11       	cpse	r25, r1
    1aac:	f2 cf       	rjmp	.-28     	; 0x1a92 <rbuffer_remove+0x1a>
    1aae:	4f bf       	out	0x3f, r20	; 63
    1ab0:	08 95       	ret

00001ab2 <usart0_init>:
    1ab2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1ab6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1aba:	8d 57       	subi	r24, 0x7D	; 125
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rbuffer_init>
    1ac2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1ac6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1aca:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rbuffer_init>
    1ace:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
    1ad2:	89 e1       	ldi	r24, 0x19	; 25
    1ad4:	89 b9       	out	0x09, r24	; 9
    1ad6:	8a b1       	in	r24, 0x0a	; 10
    1ad8:	88 69       	ori	r24, 0x98	; 152
    1ada:	8a b9       	out	0x0a, r24	; 10
    1adc:	e5 e9       	ldi	r30, 0x95	; 149
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	86 60       	ori	r24, 0x06	; 6
    1ae4:	80 83       	st	Z, r24
    1ae6:	8b b1       	in	r24, 0x0b	; 11
    1ae8:	82 60       	ori	r24, 0x02	; 2
    1aea:	8b b9       	out	0x0b, r24	; 11
    1aec:	78 94       	sei
    1aee:	08 95       	ret

00001af0 <usart0_send_char>:
    1af0:	cf 93       	push	r28
    1af2:	c8 2f       	mov	r28, r24
    1af4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1af8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1afc:	8d 57       	subi	r24, 0x7D	; 125
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <rbuffer_full>
    1b04:	81 11       	cpse	r24, r1
    1b06:	f6 cf       	rjmp	.-20     	; 0x1af4 <usart0_send_char+0x4>
    1b08:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <p_UART0_meta>
    1b0c:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1b10:	6d 57       	subi	r22, 0x7D	; 125
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8c 2f       	mov	r24, r28
    1b16:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <rbuffer_insert>
    1b1a:	8a b1       	in	r24, 0x0a	; 10
    1b1c:	80 62       	ori	r24, 0x20	; 32
    1b1e:	8a b9       	out	0x0a, r24	; 10
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <usart0_send_array>:
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	d6 2f       	mov	r29, r22
    1b30:	c0 e0       	ldi	r28, 0x00	; 0
    1b32:	08 c0       	rjmp	.+16     	; 0x1b44 <usart0_send_array+0x20>
    1b34:	8f 01       	movw	r16, r30
    1b36:	0f 5f       	subi	r16, 0xFF	; 255
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <usart0_send_char>
    1b40:	cf 5f       	subi	r28, 0xFF	; 255
    1b42:	f8 01       	movw	r30, r16
    1b44:	cd 17       	cp	r28, r29
    1b46:	b0 f3       	brcs	.-20     	; 0x1b34 <usart0_send_array+0x10>
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	08 95       	ret

00001b52 <uart_get_uart0_rx_buffer_address>:
    1b52:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1b56:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1b5a:	08 95       	ret

00001b5c <usart1_init>:
    1b5c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1b60:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1b64:	8d 57       	subi	r24, 0x7D	; 125
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rbuffer_init>
    1b6c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1b70:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1b74:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <rbuffer_init>
    1b78:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f0098>
    1b7c:	89 e1       	ldi	r24, 0x19	; 25
    1b7e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f0099>
    1b82:	ea e9       	ldi	r30, 0x9A	; 154
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 69       	ori	r24, 0x98	; 152
    1b8a:	80 83       	st	Z, r24
    1b8c:	ed e9       	ldi	r30, 0x9D	; 157
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	86 60       	ori	r24, 0x06	; 6
    1b94:	80 83       	st	Z, r24
    1b96:	eb e9       	ldi	r30, 0x9B	; 155
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	82 60       	ori	r24, 0x02	; 2
    1b9e:	80 83       	st	Z, r24
    1ba0:	08 95       	ret

00001ba2 <usart1_send_char>:
    1ba2:	cf 93       	push	r28
    1ba4:	c8 2f       	mov	r28, r24
    1ba6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1baa:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1bae:	8d 57       	subi	r24, 0x7D	; 125
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <rbuffer_full>
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	f6 cf       	rjmp	.-20     	; 0x1ba6 <usart1_send_char+0x4>
    1bba:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <p_UART1_meta>
    1bbe:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1bc2:	6d 57       	subi	r22, 0x7D	; 125
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <rbuffer_insert>
    1bcc:	ea e9       	ldi	r30, 0x9A	; 154
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 62       	ori	r24, 0x20	; 32
    1bd4:	80 83       	st	Z, r24
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <usart1_send_string>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
    1be0:	03 c0       	rjmp	.+6      	; 0x1be8 <usart1_send_string+0xe>
    1be2:	21 96       	adiw	r28, 0x01	; 1
    1be4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
    1be8:	88 81       	ld	r24, Y
    1bea:	81 11       	cpse	r24, r1
    1bec:	fa cf       	rjmp	.-12     	; 0x1be2 <usart1_send_string+0x8>
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <usart1_send_string_P>:
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <usart1_send_string_P+0xe>
    1bfc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
    1c00:	fe 01       	movw	r30, r28
    1c02:	ef 01       	movw	r28, r30
    1c04:	21 96       	adiw	r28, 0x01	; 1
    1c06:	84 91       	lpm	r24, Z
    1c08:	81 11       	cpse	r24, r1
    1c0a:	f8 cf       	rjmp	.-16     	; 0x1bfc <usart1_send_string_P+0x8>
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <uart_get_uart1_rx_buffer_address>:


volatile ringbuffer_t * uart_get_uart1_rx_buffer_address(void)
{
	return &(p_UART1_meta->rb_rx);
}
    1c12:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1c16:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1c1a:	08 95       	ret

00001c1c <__vector_18>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART0_RX_vect) {
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	cf 93       	push	r28
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
	
   char	data = UDR0;
    1c40:	cc b1       	in	r28, 0x0c	; 12

    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
    1c42:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1c46:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1c4a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <rbuffer_full>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	13 c0       	rjmp	.+38     	; 0x1c78 <__vector_18+0x5c>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
    1c52:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <p_UART0_meta>
    1c56:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1c5a:	8c 2f       	mov	r24, r28
    1c5c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
    1c60:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <p_UART0_meta>
    1c64:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1c68:	8b b1       	in	r24, 0x0b	; 11
    1c6a:	8c 71       	andi	r24, 0x1C	; 28
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	ea 5f       	subi	r30, 0xFA	; 250
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <__vector_18+0x74>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
    1c78:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <p_UART0_meta>
    1c7c:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1c80:	8b b1       	in	r24, 0x0b	; 11
    1c82:	8c 71       	andi	r24, 0x1C	; 28
    1c84:	81 60       	ori	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	ea 5f       	subi	r30, 0xFA	; 250
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    }   
}
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	cf 91       	pop	r28
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	0f 90       	pop	r0
    1cb0:	1f 90       	pop	r1
    1cb2:	18 95       	reti

00001cb4 <__vector_19>:
ISR(USART0_UDRE_vect) {
    1cb4:	1f 92       	push	r1
    1cb6:	0f 92       	push	r0
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	0f 92       	push	r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	2f 93       	push	r18
    1cc0:	3f 93       	push	r19
    1cc2:	4f 93       	push	r20
    1cc4:	5f 93       	push	r21
    1cc6:	6f 93       	push	r22
    1cc8:	7f 93       	push	r23
    1cca:	8f 93       	push	r24
    1ccc:	9f 93       	push	r25
    1cce:	af 93       	push	r26
    1cd0:	bf 93       	push	r27
    1cd2:	ef 93       	push	r30
    1cd4:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
    1cd6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1cda:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1cde:	8d 57       	subi	r24, 0x7D	; 125
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <rbuffer_empty>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <__vector_19+0x4a>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
    1cea:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <p_UART0_meta>
    1cee:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <p_UART0_meta+0x1>
    1cf2:	8d 57       	subi	r24, 0x7D	; 125
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <rbuffer_remove>
    1cfa:	8c b9       	out	0x0c, r24	; 12
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <__vector_19+0x50>
    }
    else {
	    UCSR0B &= ~(1 << UDRE);                   // Enable Tx buffer empty interrupt 
    1cfe:	8a b1       	in	r24, 0x0a	; 10
    1d00:	8f 7d       	andi	r24, 0xDF	; 223
    1d02:	8a b9       	out	0x0a, r24	; 10
    }
}
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <__vector_30>:
#endif

#ifdef USART1_ENABLE
ISR(USART1_RX_vect) {
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	2f 93       	push	r18
    1d32:	3f 93       	push	r19
    1d34:	4f 93       	push	r20
    1d36:	5f 93       	push	r21
    1d38:	6f 93       	push	r22
    1d3a:	7f 93       	push	r23
    1d3c:	8f 93       	push	r24
    1d3e:	9f 93       	push	r25
    1d40:	af 93       	push	r26
    1d42:	bf 93       	push	r27
    1d44:	cf 93       	push	r28
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
	
   char	data = UDR1;
    1d4a:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f009c>
    if(!rbuffer_full(&p_UART1_meta->rb_rx)) {
    1d4e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1d52:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1d56:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <rbuffer_full>
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <__vector_30+0x60>
	    rbuffer_insert(data, &p_UART1_meta->rb_rx);
    1d5e:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <p_UART1_meta>
    1d62:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1d66:	8c 2f       	mov	r24, r28
    1d68:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <rbuffer_insert>
	    p_UART1_meta->usart_error = UCSR1A & USART_RX_ERROR_MASK ;
    1d6c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <p_UART1_meta>
    1d70:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1d74:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f009b>
    1d78:	8c 71       	andi	r24, 0x1C	; 28
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	ea 5f       	subi	r30, 0xFA	; 250
    1d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	0d c0       	rjmp	.+26     	; 0x1da0 <__vector_30+0x7a>

    }
    else {
	    p_UART1_meta->usart_error = ((UCSR1A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW);
    1d86:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <p_UART1_meta>
    1d8a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1d8e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f009b>
    1d92:	8c 71       	andi	r24, 0x1C	; 28
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	91 60       	ori	r25, 0x01	; 1
    1d98:	ea 5f       	subi	r30, 0xFA	; 250
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    }   
}
    1da0:	ff 91       	pop	r31
    1da2:	ef 91       	pop	r30
    1da4:	cf 91       	pop	r28
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <__vector_31>:
ISR(USART1_UDRE_vect) {
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	2f 93       	push	r18
    1dd0:	3f 93       	push	r19
    1dd2:	4f 93       	push	r20
    1dd4:	5f 93       	push	r21
    1dd6:	6f 93       	push	r22
    1dd8:	7f 93       	push	r23
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	af 93       	push	r26
    1de0:	bf 93       	push	r27
    1de2:	ef 93       	push	r30
    1de4:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART1_meta->rb_tx)) {
    1de6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1dea:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1dee:	8d 57       	subi	r24, 0x7D	; 125
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <rbuffer_empty>
    1df6:	81 11       	cpse	r24, r1
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <__vector_31+0x4c>
	    UDR1 = rbuffer_remove(&p_UART1_meta->rb_tx);
    1dfa:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <p_UART1_meta>
    1dfe:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <p_UART1_meta+0x1>
    1e02:	8d 57       	subi	r24, 0x7D	; 125
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <rbuffer_remove>
    1e0a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f009c>
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <__vector_31+0x56>
		
    }
    else {
	    UCSR1B &= ~(1 << UDRE);                   // Enable Tx buffer empty interrupt 
    1e10:	ea e9       	ldi	r30, 0x9A	; 154
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 7d       	andi	r24, 0xDF	; 223
    1e18:	80 83       	st	Z, r24
    }
}
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine)
{
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	fc 01       	movw	r30, r24
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
    1e44:	91 e0       	ldi	r25, 0x01	; 1

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
    1e46:	c0 e0       	ldi	r28, 0x00	; 0
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <CmdLineProcess+0x36>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
    1e4a:	80 32       	cpi	r24, 0x20	; 32
    1e4c:	19 f4       	brne	.+6      	; 0x1e54 <CmdLineProcess+0x18>
        {
            *pcChar = 0;
    1e4e:	10 82       	st	Z, r1
            bFindArg = true;
    1e50:	91 e0       	ldi	r25, 0x01	; 1
    1e52:	0e c0       	rjmp	.+28     	; 0x1e70 <CmdLineProcess+0x34>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
    1e54:	99 23       	and	r25, r25
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <CmdLineProcess+0x34>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
    1e58:	c8 30       	cpi	r28, 0x08	; 8
    1e5a:	90 f5       	brcc	.+100    	; 0x1ec0 <CmdLineProcess+0x84>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
    1e5c:	ac 2f       	mov	r26, r28
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	aa 0f       	add	r26, r26
    1e62:	bb 1f       	adc	r27, r27
    1e64:	a1 5d       	subi	r26, 0xD1	; 209
    1e66:	b9 4f       	sbci	r27, 0xF9	; 249
    1e68:	ed 93       	st	X+, r30
    1e6a:	fc 93       	st	X, r31
                    ui8Argc++;
    1e6c:	cf 5f       	subi	r28, 0xFF	; 255
                    bFindArg = false;
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
    1e70:	31 96       	adiw	r30, 0x01	; 1
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
    1e72:	80 81       	ld	r24, Z
    1e74:	81 11       	cpse	r24, r1
    1e76:	e9 cf       	rjmp	.-46     	; 0x1e4a <CmdLineProcess+0xe>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
    1e78:	c1 11       	cpse	r28, r1
    1e7a:	18 c0       	rjmp	.+48     	; 0x1eac <CmdLineProcess+0x70>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	21 c0       	rjmp	.+66     	; 0x1ec2 <CmdLineProcess+0x86>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
    1e80:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <g_ppcArgv>
    1e84:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <g_ppcArgv+0x1>
    1e88:	0e 94 9d 1b 	call	0x373a	; 0x373a <strcmp>
    1e8c:	89 2b       	or	r24, r25
    1e8e:	59 f4       	brne	.+22     	; 0x1ea6 <CmdLineProcess+0x6a>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
    1e90:	d8 01       	movw	r26, r16
    1e92:	12 96       	adiw	r26, 0x02	; 2
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	13 97       	sbiw	r26, 0x03	; 3
    1e9a:	6f e2       	ldi	r22, 0x2F	; 47
    1e9c:	76 e0       	ldi	r23, 0x06	; 6
    1e9e:	8c 2f       	mov	r24, r28
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	09 95       	icall
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <CmdLineProcess+0x86>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
    1ea6:	0a 5f       	subi	r16, 0xFA	; 250
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <CmdLineProcess+0x74>
    1eac:	00 e9       	ldi	r16, 0x90	; 144
    1eae:	11 e0       	ldi	r17, 0x01	; 1

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	61 15       	cp	r22, r1
    1eb8:	71 05       	cpc	r23, r1
    1eba:	11 f7       	brne	.-60     	; 0x1e80 <CmdLineProcess+0x44>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <CmdLineProcess+0x86>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
}
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <Cmd_help>:
		  if (argc >2) return CMDLINE_TOO_MANY_ARGS;
		  uint8_t channel = atoi(argv[1]);
		  if (channel > 4)	return CMDLINE_INVALID_ARG;
//		  temperature_disable_auto_control_TEC(channel);
		  return CMDLINE_OK;
}
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	80 e6       	ldi	r24, 0x60	; 96
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1ed6:	86 e7       	ldi	r24, 0x76	; 118
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1ede:	c0 e9       	ldi	r28, 0x90	; 144
    1ee0:	d1 e0       	ldi	r29, 0x01	; 1
    1ee2:	0b c0       	rjmp	.+22     	; 0x1efa <Cmd_help+0x30>
    1ee4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eea:	9d 81       	ldd	r25, Y+5	; 0x05
    1eec:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1ef0:	8f ea       	ldi	r24, 0xAF	; 175
    1ef2:	93 e0       	ldi	r25, 0x03	; 3
    1ef4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1ef8:	26 96       	adiw	r28, 0x06	; 6
    1efa:	88 81       	ld	r24, Y
    1efc:	99 81       	ldd	r25, Y+1	; 0x01
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	89 f7       	brne	.-30     	; 0x1ee4 <Cmd_help+0x1a>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	08 95       	ret

00001f0c <show_data>:
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	2a 97       	sbiw	r28, 0x0a	; 10
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	02 97       	sbiw	r24, 0x02	; 2
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <show_data+0x20>
    1f2a:	b3 c0       	rjmp	.+358    	; 0x2092 <show_data+0x186>
    1f2c:	8f ea       	ldi	r24, 0xAF	; 175
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1f34:	f1 2c       	mov	r15, r1
    1f36:	a6 c0       	rjmp	.+332    	; 0x2084 <show_data+0x178>
    1f38:	0f 2d       	mov	r16, r15
    1f3a:	10 e0       	ldi	r17, 0x00	; 0
    1f3c:	c8 01       	movw	r24, r16
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	80 0f       	add	r24, r16
    1f44:	91 1f       	adc	r25, r17
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	82 57       	subi	r24, 0x72	; 114
    1f50:	9e 4f       	sbci	r25, 0xFE	; 254
    1f52:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <usart1_send_string_P>
    1f56:	8b e8       	ldi	r24, 0x8B	; 139
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	ed 5b       	subi	r30, 0xBD	; 189
    1f62:	fc 4f       	sbci	r31, 0xFC	; 252
    1f64:	00 81       	ld	r16, Z
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	f8 01       	movw	r30, r16
    1f6a:	ef 56       	subi	r30, 0x6F	; 111
    1f6c:	f8 4f       	sbci	r31, 0xF8	; 248
    1f6e:	e0 81       	ld	r30, Z
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	ea 5a       	subi	r30, 0xAA	; 170
    1f78:	fc 4f       	sbci	r31, 0xFC	; 252
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    1f82:	f8 94       	cli
    1f84:	00 0f       	add	r16, r16
    1f86:	11 1f       	adc	r17, r17
    1f88:	f8 01       	movw	r30, r16
    1f8a:	e5 5e       	subi	r30, 0xE5	; 229
    1f8c:	f8 4f       	sbci	r31, 0xF8	; 248
    1f8e:	61 a5       	ldd	r22, Z+41	; 0x29
    1f90:	72 a5       	ldd	r23, Z+42	; 0x2a
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
    1f9a:	26 2f       	mov	r18, r22
    1f9c:	37 2f       	mov	r19, r23
    1f9e:	48 2f       	mov	r20, r24
    1fa0:	59 2f       	mov	r21, r25
    1fa2:	78 94       	sei
    1fa4:	e5 e0       	ldi	r30, 0x05	; 5
    1fa6:	ef 15       	cp	r30, r15
    1fa8:	58 f0       	brcs	.+22     	; 0x1fc0 <show_data+0xb4>
    1faa:	2f e6       	ldi	r18, 0x6F	; 111
    1fac:	32 e1       	ldi	r19, 0x12	; 18
    1fae:	43 e0       	ldi	r20, 0x03	; 3
    1fb0:	5c e3       	ldi	r21, 0x3C	; 60
    1fb2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    1fb6:	26 2f       	mov	r18, r22
    1fb8:	37 2f       	mov	r19, r23
    1fba:	48 2f       	mov	r20, r24
    1fbc:	59 2f       	mov	r21, r25
    1fbe:	3a c0       	rjmp	.+116    	; 0x2034 <show_data+0x128>
    1fc0:	e6 e0       	ldi	r30, 0x06	; 6
    1fc2:	fe 12       	cpse	r15, r30
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <show_data+0xd0>
    1fc6:	29 e5       	ldi	r18, 0x59	; 89
    1fc8:	39 e3       	ldi	r19, 0x39	; 57
    1fca:	44 e3       	ldi	r20, 0x34	; 52
    1fcc:	5d e3       	ldi	r21, 0x3D	; 61
    1fce:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    1fd2:	26 2f       	mov	r18, r22
    1fd4:	37 2f       	mov	r19, r23
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	59 2f       	mov	r21, r25
    1fda:	2c c0       	rjmp	.+88     	; 0x2034 <show_data+0x128>
    1fdc:	e0 e1       	ldi	r30, 0x10	; 16
    1fde:	fe 12       	cpse	r15, r30
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <show_data+0xec>
    1fe2:	29 e5       	ldi	r18, 0x59	; 89
    1fe4:	39 e3       	ldi	r19, 0x39	; 57
    1fe6:	44 e3       	ldi	r20, 0x34	; 52
    1fe8:	5d e3       	ldi	r21, 0x3D	; 61
    1fea:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    1fee:	26 2f       	mov	r18, r22
    1ff0:	37 2f       	mov	r19, r23
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	59 2f       	mov	r21, r25
    1ff6:	1e c0       	rjmp	.+60     	; 0x2034 <show_data+0x128>
    1ff8:	ef e0       	ldi	r30, 0x0F	; 15
    1ffa:	ef 15       	cp	r30, r15
    1ffc:	58 f0       	brcs	.+22     	; 0x2014 <show_data+0x108>
    1ffe:	2f e0       	ldi	r18, 0x0F	; 15
    2000:	30 e5       	ldi	r19, 0x50	; 80
    2002:	4e e6       	ldi	r20, 0x6E	; 110
    2004:	5b e3       	ldi	r21, 0x3B	; 59
    2006:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    200a:	26 2f       	mov	r18, r22
    200c:	37 2f       	mov	r19, r23
    200e:	48 2f       	mov	r20, r24
    2010:	59 2f       	mov	r21, r25
    2012:	10 c0       	rjmp	.+32     	; 0x2034 <show_data+0x128>
    2014:	e1 e1       	ldi	r30, 0x11	; 17
    2016:	fe 16       	cp	r15, r30
    2018:	69 f0       	breq	.+26     	; 0x2034 <show_data+0x128>
    201a:	e2 e1       	ldi	r30, 0x12	; 18
    201c:	fe 12       	cpse	r15, r30
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <show_data+0x128>
    2020:	29 e5       	ldi	r18, 0x59	; 89
    2022:	39 e3       	ldi	r19, 0x39	; 57
    2024:	44 e3       	ldi	r20, 0x34	; 52
    2026:	5d e3       	ldi	r21, 0x3D	; 61
    2028:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__mulsf3>
    202c:	26 2f       	mov	r18, r22
    202e:	37 2f       	mov	r19, r23
    2030:	48 2f       	mov	r20, r24
    2032:	59 2f       	mov	r21, r25
    2034:	89 ef       	ldi	r24, 0xF9	; 249
    2036:	8f 0d       	add	r24, r15
    2038:	89 30       	cpi	r24, 0x09	; 9
    203a:	18 f4       	brcc	.+6      	; 0x2042 <show_data+0x136>
    203c:	81 e4       	ldi	r24, 0x41	; 65
    203e:	88 87       	std	Y+8, r24	; 0x08
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <show_data+0x13a>
    2042:	86 e5       	ldi	r24, 0x56	; 86
    2044:	88 87       	std	Y+8, r24	; 0x08
    2046:	5f 93       	push	r21
    2048:	4f 93       	push	r20
    204a:	3f 93       	push	r19
    204c:	2f 93       	push	r18
    204e:	8f e8       	ldi	r24, 0x8F	; 143
    2050:	93 e0       	ldi	r25, 0x03	; 3
    2052:	9f 93       	push	r25
    2054:	8f 93       	push	r24
    2056:	8e 01       	movw	r16, r28
    2058:	0f 5f       	subi	r16, 0xFF	; 255
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	1f 93       	push	r17
    205e:	0f 93       	push	r16
    2060:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <sprintf>
    2064:	c8 01       	movw	r24, r16
    2066:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    206a:	88 85       	ldd	r24, Y+8	; 0x08
    206c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
    2070:	8f ea       	ldi	r24, 0xAF	; 175
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    2078:	f3 94       	inc	r15
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	92 e1       	ldi	r25, 0x12	; 18
    2086:	9f 15       	cp	r25, r15
    2088:	08 f0       	brcs	.+2      	; 0x208c <show_data+0x180>
    208a:	56 cf       	rjmp	.-340    	; 0x1f38 <show_data+0x2c>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <show_data+0x18a>
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	2a 96       	adiw	r28, 0x0a	; 10
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	08 95       	ret

000020ae <Cmd_set_channel>:
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	91 05       	cpc	r25, r1
    20b8:	c4 f0       	brlt	.+48     	; 0x20ea <Cmd_set_channel+0x3c>
    20ba:	04 97       	sbiw	r24, 0x04	; 4
    20bc:	cc f4       	brge	.+50     	; 0x20f0 <Cmd_set_channel+0x42>
    20be:	eb 01       	movw	r28, r22
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <atoi>
    20c8:	18 2f       	mov	r17, r24
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	0e 94 9c 1a 	call	0x3538	; 0x3538 <atoi>
    20d2:	19 30       	cpi	r17, 0x09	; 9
    20d4:	80 f4       	brcc	.+32     	; 0x20f6 <Cmd_set_channel+0x48>
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	88 f4       	brcc	.+34     	; 0x20fc <Cmd_set_channel+0x4e>
    20da:	68 2f       	mov	r22, r24
    20dc:	87 e0       	ldi	r24, 0x07	; 7
    20de:	81 0f       	add	r24, r17
    20e0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <Cmd_set_channel+0x52>
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <Cmd_set_channel+0x52>
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <Cmd_set_channel+0x52>
    20f6:	84 e0       	ldi	r24, 0x04	; 4
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <Cmd_set_channel+0x52>
    20fc:	84 e0       	ldi	r24, 0x04	; 4
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	08 95       	ret

00002108 <Cmd_set_buck>:
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	83 30       	cpi	r24, 0x03	; 3
    2110:	91 05       	cpc	r25, r1
    2112:	bc f0       	brlt	.+46     	; 0x2142 <Cmd_set_buck+0x3a>
    2114:	04 97       	sbiw	r24, 0x04	; 4
    2116:	c4 f4       	brge	.+48     	; 0x2148 <Cmd_set_buck+0x40>
    2118:	eb 01       	movw	r28, r22
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <atoi>
    2122:	18 2f       	mov	r17, r24
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	0e 94 9c 1a 	call	0x3538	; 0x3538 <atoi>
    212c:	17 30       	cpi	r17, 0x07	; 7
    212e:	78 f4       	brcc	.+30     	; 0x214e <Cmd_set_buck+0x46>
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	80 f4       	brcc	.+32     	; 0x2154 <Cmd_set_buck+0x4c>
    2134:	68 2f       	mov	r22, r24
    2136:	81 2f       	mov	r24, r17
    2138:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0b c0       	rjmp	.+22     	; 0x2158 <Cmd_set_buck+0x50>
    2142:	83 e0       	ldi	r24, 0x03	; 3
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	08 c0       	rjmp	.+16     	; 0x2158 <Cmd_set_buck+0x50>
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	05 c0       	rjmp	.+10     	; 0x2158 <Cmd_set_buck+0x50>
    214e:	84 e0       	ldi	r24, 0x04	; 4
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <Cmd_set_buck+0x50>
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	08 95       	ret

00002160 <Cmd_set_all>:
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	91 05       	cpc	r25, r1
    2168:	b4 f0       	brlt	.+44     	; 0x2196 <Cmd_set_all+0x36>
    216a:	03 97       	sbiw	r24, 0x03	; 3
    216c:	bc f4       	brge	.+46     	; 0x219c <Cmd_set_all+0x3c>
    216e:	fb 01       	movw	r30, r22
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	0e 94 9c 1a 	call	0x3538	; 0x3538 <atoi>
    2178:	d8 2f       	mov	r29, r24
    217a:	82 30       	cpi	r24, 0x02	; 2
    217c:	90 f4       	brcc	.+36     	; 0x21a2 <Cmd_set_all+0x42>
    217e:	c0 e0       	ldi	r28, 0x00	; 0
    2180:	05 c0       	rjmp	.+10     	; 0x218c <Cmd_set_all+0x2c>
    2182:	6d 2f       	mov	r22, r29
    2184:	8c 2f       	mov	r24, r28
    2186:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <POWER_ACTIVATE>
    218a:	cf 5f       	subi	r28, 0xFF	; 255
    218c:	c0 31       	cpi	r28, 0x10	; 16
    218e:	c8 f3       	brcs	.-14     	; 0x2182 <Cmd_set_all+0x22>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	08 c0       	rjmp	.+16     	; 0x21a6 <Cmd_set_all+0x46>
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <Cmd_set_all+0x46>
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <Cmd_set_all+0x46>
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	08 95       	ret

000021ac <command_task_update>:
    21ac:	cf 93       	push	r28
    21ae:	4c c0       	rjmp	.+152    	; 0x2248 <command_task_update+0x9c>
    21b0:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <p_CommandRingBuffer>
    21b4:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <p_CommandRingBuffer+0x1>
    21b8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <rbuffer_remove>
    21bc:	c8 2f       	mov	r28, r24
    21be:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
    21c2:	cd 30       	cpi	r28, 0x0D	; 13
    21c4:	11 f0       	breq	.+4      	; 0x21ca <command_task_update+0x1e>
    21c6:	ca 30       	cpi	r28, 0x0A	; 10
    21c8:	29 f5       	brne	.+74     	; 0x2214 <command_task_update+0x68>
    21ca:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <s_commandBufferIndex>
    21ce:	88 23       	and	r24, r24
    21d0:	e1 f0       	breq	.+56     	; 0x220a <command_task_update+0x5e>
    21d2:	e8 2f       	mov	r30, r24
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ee 5b       	subi	r30, 0xBE	; 190
    21d8:	f9 4f       	sbci	r31, 0xF9	; 249
    21da:	10 82       	st	Z, r1
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <s_commandBufferIndex>
    21e2:	82 e4       	ldi	r24, 0x42	; 66
    21e4:	96 e0       	ldi	r25, 0x06	; 6
    21e6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <CmdLineProcess>
    21ea:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <s_commandBufferIndex>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 0b       	sbc	r25, r25
    21f2:	fc 01       	movw	r30, r24
    21f4:	ec 54       	subi	r30, 0x4C	; 76
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    2200:	88 e9       	ldi	r24, 0x98	; 152
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    2208:	1f c0       	rjmp	.+62     	; 0x2248 <command_task_update+0x9c>
    220a:	86 e9       	ldi	r24, 0x96	; 150
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
    2212:	1a c0       	rjmp	.+52     	; 0x2248 <command_task_update+0x9c>
    2214:	c8 30       	cpi	r28, 0x08	; 8
    2216:	11 f0       	breq	.+4      	; 0x221c <command_task_update+0x70>
    2218:	cf 37       	cpi	r28, 0x7F	; 127
    221a:	41 f4       	brne	.+16     	; 0x222c <command_task_update+0x80>
    221c:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <s_commandBufferIndex>
    2220:	88 23       	and	r24, r24
    2222:	91 f0       	breq	.+36     	; 0x2248 <command_task_update+0x9c>
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <s_commandBufferIndex>
    222a:	0e c0       	rjmp	.+28     	; 0x2248 <command_task_update+0x9c>
    222c:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <s_commandBufferIndex>
    2230:	e8 2f       	mov	r30, r24
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	ee 5b       	subi	r30, 0xBE	; 190
    2236:	f9 4f       	sbci	r31, 0xF9	; 249
    2238:	c0 83       	st	Z, r28
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <s_commandBufferIndex>
    2240:	81 38       	cpi	r24, 0x81	; 129
    2242:	10 f0       	brcs	.+4      	; 0x2248 <command_task_update+0x9c>
    2244:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <s_commandBufferIndex>
    2248:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <p_CommandRingBuffer>
    224c:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <p_CommandRingBuffer+0x1>
    2250:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <rbuffer_empty>
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <command_task_update+0xae>
    2258:	ab cf       	rjmp	.-170    	; 0x21b0 <command_task_update+0x4>
    225a:	cf 91       	pop	r28
    225c:	08 95       	ret

0000225e <command_create_task>:
		POWER_ACTIVATE(i,state);
	return CMDLINE_OK;
}
void	command_create_task(void)
{
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
    225e:	6a e8       	ldi	r22, 0x8A	; 138
    2260:	71 e0       	ldi	r23, 0x01	; 1
    2262:	89 e8       	ldi	r24, 0x89	; 137
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	0e 94 9d 11 	call	0x233a	; 0x233a <SCH_TASK_CreateTask>
    226a:	08 95       	ret

0000226c <command_send_splash>:
	{".......................................................\r\n"},
	{".......................................................\r\n"},
};
	
void	command_send_splash(void)
{
    226c:	cf 93       	push	r28
	for(uint8_t i = 0 ; i < 21 ; i++) {
    226e:	c0 e0       	ldi	r28, 0x00	; 0
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <command_send_splash+0x18>
		usart1_send_string_P(&SPLASH[i][0]);
    2272:	21 e4       	ldi	r18, 0x41	; 65
    2274:	c2 9f       	mul	r28, r18
    2276:	c0 01       	movw	r24, r0
    2278:	11 24       	eor	r1, r1
    227a:	8e 58       	subi	r24, 0x8E	; 142
    227c:	9d 4f       	sbci	r25, 0xFD	; 253
    227e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <usart1_send_string_P>
	{".......................................................\r\n"},
};
	
void	command_send_splash(void)
{
	for(uint8_t i = 0 ; i < 21 ; i++) {
    2282:	cf 5f       	subi	r28, 0xFF	; 255
    2284:	c5 31       	cpi	r28, 0x15	; 21
    2286:	a8 f3       	brcs	.-22     	; 0x2272 <command_send_splash+0x6>
		usart1_send_string_P(&SPLASH[i][0]);
	}
	usart1_send_char('>');
    2288:	8e e3       	ldi	r24, 0x3E	; 62
    228a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <usart1_send_char>
}
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <command_init>:
	}
};

void	command_init(void)
{
	usart1_init();
    2292:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <usart1_init>
	
	p_CommandRingBuffer = uart_get_uart1_rx_buffer_address();
    2296:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <uart_get_uart1_rx_buffer_address>
    229a:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <p_CommandRingBuffer+0x1>
    229e:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <p_CommandRingBuffer>
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
    22a2:	80 e8       	ldi	r24, 0x80	; 128
    22a4:	e2 e4       	ldi	r30, 0x42	; 66
    22a6:	f6 e0       	ldi	r31, 0x06	; 6
    22a8:	df 01       	movw	r26, r30
    22aa:	1d 92       	st	X+, r1
    22ac:	8a 95       	dec	r24
    22ae:	e9 f7       	brne	.-6      	; 0x22aa <command_init+0x18>
	s_commandBufferIndex = 0;
    22b0:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <s_commandBufferIndex>
	usart1_send_string("PDU FIRMWARE V1.2.0 \r\n");
    22b4:	8b e9       	ldi	r24, 0x9B	; 155
    22b6:	93 e0       	ldi	r25, 0x03	; 3
    22b8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	usart1_send_string(">");
    22bc:	82 eb       	ldi	r24, 0xB2	; 178
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <usart1_send_string>
	command_send_splash();
    22c4:	0e 94 36 11 	call	0x226c	; 0x226c <command_send_splash>
    22c8:	08 95       	ret

000022ca <SCH_Initialize>:
  * @retval system ticks
  *****************************************************************************/
uint16_t SCH_SystemTick(void)
{
  return s_SystemTick;
}
    22ca:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <s_SystemTick+0x1>
    22ce:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <s_SystemTick>
    22d2:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <s_NumOfTaskScheduled>
    22d6:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <s_NumOfTimers>
    22da:	8a e2       	ldi	r24, 0x2A	; 42
    22dc:	e0 ef       	ldi	r30, 0xF0	; 240
    22de:	f6 e0       	ldi	r31, 0x06	; 6
    22e0:	df 01       	movw	r26, r30
    22e2:	98 2f       	mov	r25, r24
    22e4:	1d 92       	st	X+, r1
    22e6:	9a 95       	dec	r25
    22e8:	e9 f7       	brne	.-6      	; 0x22e4 <SCH_Initialize+0x1a>
    22ea:	e5 ec       	ldi	r30, 0xC5	; 197
    22ec:	f6 e0       	ldi	r31, 0x06	; 6
    22ee:	df 01       	movw	r26, r30
    22f0:	1d 92       	st	X+, r1
    22f2:	8a 95       	dec	r24
    22f4:	e9 f7       	brne	.-6      	; 0x22f0 <SCH_Initialize+0x26>
    22f6:	88 e0       	ldi	r24, 0x08	; 8
    22f8:	e7 eb       	ldi	r30, 0xB7	; 183
    22fa:	f9 e0       	ldi	r31, 0x09	; 9
    22fc:	df 01       	movw	r26, r30
    22fe:	1d 92       	st	X+, r1
    2300:	8a 95       	dec	r24
    2302:	e9 f7       	brne	.-6      	; 0x22fe <SCH_Initialize+0x34>
    2304:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <timer_timer0_init>
    2308:	08 95       	ret

0000230a <SCH_TIM_Start>:
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	40 f4       	brcc	.+16     	; 0x231e <SCH_TIM_Start+0x14>
    230e:	e8 2f       	mov	r30, r24
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e9 54       	subi	r30, 0x49	; 73
    2318:	f6 4f       	sbci	r31, 0xF6	; 246
    231a:	51 83       	std	Z+1, r21	; 0x01
    231c:	40 83       	st	Z, r20
    231e:	08 95       	ret

00002320 <SCH_TIM_HasCompleted>:
    2320:	e8 2f       	mov	r30, r24
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	e9 54       	subi	r30, 0x49	; 73
    232a:	f6 4f       	sbci	r31, 0xF6	; 246
    232c:	20 81       	ld	r18, Z
    232e:	31 81       	ldd	r19, Z+1	; 0x01
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	23 2b       	or	r18, r19
    2334:	09 f0       	breq	.+2      	; 0x2338 <SCH_TIM_HasCompleted+0x18>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	08 95       	ret

0000233a <SCH_TASK_CreateTask>:
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	ec 01       	movw	r28, r24
    2340:	89 2b       	or	r24, r25
    2342:	39 f1       	breq	.+78     	; 0x2392 <SCH_TASK_CreateTask+0x58>
    2344:	61 15       	cp	r22, r1
    2346:	71 05       	cpc	r23, r1
    2348:	31 f1       	breq	.+76     	; 0x2396 <SCH_TASK_CreateTask+0x5c>
    234a:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <s_NumOfTaskScheduled>
    234e:	96 30       	cpi	r25, 0x06	; 6
    2350:	20 f5       	brcc	.+72     	; 0x239a <SCH_TASK_CreateTask+0x60>
    2352:	29 2f       	mov	r18, r25
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	f9 01       	movw	r30, r18
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	df 01       	movw	r26, r30
    235e:	a2 0f       	add	r26, r18
    2360:	b3 1f       	adc	r27, r19
    2362:	aa 0f       	add	r26, r26
    2364:	bb 1f       	adc	r27, r27
    2366:	a0 51       	subi	r26, 0x10	; 16
    2368:	b9 4f       	sbci	r27, 0xF9	; 249
    236a:	15 96       	adiw	r26, 0x05	; 5
    236c:	7c 93       	st	X, r23
    236e:	6e 93       	st	-X, r22
    2370:	14 97       	sbiw	r26, 0x04	; 4
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	1c 92       	st	X, r1
    2376:	11 97       	sbiw	r26, 0x01	; 1
    2378:	13 96       	adiw	r26, 0x03	; 3
    237a:	1c 92       	st	X, r1
    237c:	1e 92       	st	-X, r1
    237e:	12 97       	sbiw	r26, 0x02	; 2
    2380:	fd 01       	movw	r30, r26
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 83       	st	Z, r24
    2386:	98 83       	st	Y, r25
    2388:	9f 5f       	subi	r25, 0xFF	; 255
    238a:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <s_NumOfTaskScheduled>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	05 c0       	rjmp	.+10     	; 0x239c <SCH_TASK_CreateTask+0x62>
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	03 c0       	rjmp	.+6      	; 0x239c <SCH_TASK_CreateTask+0x62>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	01 c0       	rjmp	.+2      	; 0x239c <SCH_TASK_CreateTask+0x62>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <SCH_RunSystemTickTimer>:
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <s_SystemTick>
    23ae:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <s_SystemTick+0x1>
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	90 93 b6 09 	sts	0x09B6, r25	; 0x8009b6 <s_SystemTick+0x1>
    23b8:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <s_SystemTick>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	43 c0       	rjmp	.+134    	; 0x2446 <SCH_RunSystemTickTimer+0xa4>
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	f9 01       	movw	r30, r18
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e2 0f       	add	r30, r18
    23cc:	f3 1f       	adc	r31, r19
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e0 51       	subi	r30, 0x10	; 16
    23d4:	f9 4f       	sbci	r31, 0xF9	; 249
    23d6:	a4 81       	ldd	r26, Z+4	; 0x04
    23d8:	b5 81       	ldd	r27, Z+5	; 0x05
    23da:	9c 91       	ld	r25, X
    23dc:	91 30       	cpi	r25, 0x01	; 1
    23de:	91 f5       	brne	.+100    	; 0x2444 <SCH_RunSystemTickTimer+0xa2>
    23e0:	f9 01       	movw	r30, r18
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e2 0f       	add	r30, r18
    23e8:	f3 1f       	adc	r31, r19
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	e0 51       	subi	r30, 0x10	; 16
    23f0:	f9 4f       	sbci	r31, 0xF9	; 249
    23f2:	90 81       	ld	r25, Z
    23f4:	91 30       	cpi	r25, 0x01	; 1
    23f6:	31 f5       	brne	.+76     	; 0x2444 <SCH_RunSystemTickTimer+0xa2>
    23f8:	f9 01       	movw	r30, r18
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	e0 51       	subi	r30, 0x10	; 16
    2408:	f9 4f       	sbci	r31, 0xF9	; 249
    240a:	42 81       	ldd	r20, Z+2	; 0x02
    240c:	53 81       	ldd	r21, Z+3	; 0x03
    240e:	4f 5f       	subi	r20, 0xFF	; 255
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
    2412:	53 83       	std	Z+3, r21	; 0x03
    2414:	42 83       	std	Z+2, r20	; 0x02
    2416:	12 96       	adiw	r26, 0x02	; 2
    2418:	6d 91       	ld	r22, X+
    241a:	7c 91       	ld	r23, X
    241c:	13 97       	sbiw	r26, 0x03	; 3
    241e:	46 17       	cp	r20, r22
    2420:	57 07       	cpc	r21, r23
    2422:	80 f0       	brcs	.+32     	; 0x2444 <SCH_RunSystemTickTimer+0xa2>
    2424:	f9 01       	movw	r30, r18
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	df 01       	movw	r26, r30
    242c:	a2 0f       	add	r26, r18
    242e:	b3 1f       	adc	r27, r19
    2430:	aa 0f       	add	r26, r26
    2432:	bb 1f       	adc	r27, r27
    2434:	a0 51       	subi	r26, 0x10	; 16
    2436:	b9 4f       	sbci	r27, 0xF9	; 249
    2438:	13 96       	adiw	r26, 0x03	; 3
    243a:	1c 92       	st	X, r1
    243c:	1e 92       	st	-X, r1
    243e:	12 97       	sbiw	r26, 0x02	; 2
    2440:	fd 01       	movw	r30, r26
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <s_NumOfTaskScheduled>
    244a:	89 17       	cp	r24, r25
    244c:	08 f4       	brcc	.+2      	; 0x2450 <SCH_RunSystemTickTimer+0xae>
    244e:	b8 cf       	rjmp	.-144    	; 0x23c0 <SCH_RunSystemTickTimer+0x1e>
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	47 c0       	rjmp	.+142    	; 0x24e2 <SCH_RunSystemTickTimer+0x140>
    2454:	82 2f       	mov	r24, r18
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	fc 01       	movw	r30, r24
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	e8 0f       	add	r30, r24
    2460:	f9 1f       	adc	r31, r25
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	eb 53       	subi	r30, 0x3B	; 59
    2468:	f9 4f       	sbci	r31, 0xF9	; 249
    246a:	30 81       	ld	r19, Z
    246c:	31 30       	cpi	r19, 0x01	; 1
    246e:	c1 f5       	brne	.+112    	; 0x24e0 <SCH_RunSystemTickTimer+0x13e>
    2470:	fc 01       	movw	r30, r24
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	e8 0f       	add	r30, r24
    2478:	f9 1f       	adc	r31, r25
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	eb 53       	subi	r30, 0x3B	; 59
    2480:	f9 4f       	sbci	r31, 0xF9	; 249
    2482:	42 81       	ldd	r20, Z+2	; 0x02
    2484:	53 81       	ldd	r21, Z+3	; 0x03
    2486:	4f 5f       	subi	r20, 0xFF	; 255
    2488:	5f 4f       	sbci	r21, 0xFF	; 255
    248a:	53 83       	std	Z+3, r21	; 0x03
    248c:	42 83       	std	Z+2, r20	; 0x02
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	a4 81       	ldd	r26, Z+4	; 0x04
    2494:	b5 81       	ldd	r27, Z+5	; 0x05
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	cd 90       	ld	r12, X+
    249a:	dd 90       	ld	r13, X+
    249c:	ed 90       	ld	r14, X+
    249e:	fc 90       	ld	r15, X
    24a0:	14 97       	sbiw	r26, 0x04	; 4
    24a2:	4c 15       	cp	r20, r12
    24a4:	5d 05       	cpc	r21, r13
    24a6:	6e 05       	cpc	r22, r14
    24a8:	7f 05       	cpc	r23, r15
    24aa:	d0 f0       	brcs	.+52     	; 0x24e0 <SCH_RunSystemTickTimer+0x13e>
    24ac:	fc 01       	movw	r30, r24
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	e8 0f       	add	r30, r24
    24b4:	f9 1f       	adc	r31, r25
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	eb 53       	subi	r30, 0x3B	; 59
    24bc:	f9 4f       	sbci	r31, 0xF9	; 249
    24be:	31 83       	std	Z+1, r19	; 0x01
    24c0:	13 82       	std	Z+3, r1	; 0x03
    24c2:	12 82       	std	Z+2, r1	; 0x02
    24c4:	4c 91       	ld	r20, X
    24c6:	42 30       	cpi	r20, 0x02	; 2
    24c8:	09 f0       	breq	.+2      	; 0x24cc <SCH_RunSystemTickTimer+0x12a>
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	fc 01       	movw	r30, r24
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	e8 0f       	add	r30, r24
    24d4:	f9 1f       	adc	r31, r25
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	eb 53       	subi	r30, 0x3B	; 59
    24dc:	f9 4f       	sbci	r31, 0xF9	; 249
    24de:	30 83       	st	Z, r19
    24e0:	2f 5f       	subi	r18, 0xFF	; 255
    24e2:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <s_NumOfTimers>
    24e6:	28 17       	cp	r18, r24
    24e8:	08 f4       	brcc	.+2      	; 0x24ec <SCH_RunSystemTickTimer+0x14a>
    24ea:	b4 cf       	rjmp	.-152    	; 0x2454 <SCH_RunSystemTickTimer+0xb2>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	17 c0       	rjmp	.+46     	; 0x251e <SCH_RunSystemTickTimer+0x17c>
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	f9 01       	movw	r30, r18
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	e9 54       	subi	r30, 0x49	; 73
    24fc:	f6 4f       	sbci	r31, 0xF6	; 246
    24fe:	40 81       	ld	r20, Z
    2500:	51 81       	ldd	r21, Z+1	; 0x01
    2502:	45 2b       	or	r20, r21
    2504:	59 f0       	breq	.+22     	; 0x251c <SCH_RunSystemTickTimer+0x17a>
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	f9 01       	movw	r30, r18
    250c:	e9 54       	subi	r30, 0x49	; 73
    250e:	f6 4f       	sbci	r31, 0xF6	; 246
    2510:	20 81       	ld	r18, Z
    2512:	31 81       	ldd	r19, Z+1	; 0x01
    2514:	21 50       	subi	r18, 0x01	; 1
    2516:	31 09       	sbc	r19, r1
    2518:	31 83       	std	Z+1, r19	; 0x01
    251a:	20 83       	st	Z, r18
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	82 30       	cpi	r24, 0x02	; 2
    2520:	38 f3       	brcs	.-50     	; 0x24f0 <SCH_RunSystemTickTimer+0x14e>
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	08 95       	ret

0000252c <SCH_StartSchedular>:
    252c:	0e 94 ef 0c 	call	0x19de	; 0x19de <timer_start_timer0>
    2530:	08 95       	ret

00002532 <SCH_HandleScheduledTask>:
    2532:	cf 93       	push	r28
    2534:	c0 e0       	ldi	r28, 0x00	; 0
    2536:	32 c0       	rjmp	.+100    	; 0x259c <SCH_HandleScheduledTask+0x6a>
    2538:	8c 2f       	mov	r24, r28
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	fc 01       	movw	r30, r24
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	e8 0f       	add	r30, r24
    2544:	f9 1f       	adc	r31, r25
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	e0 51       	subi	r30, 0x10	; 16
    254c:	f9 4f       	sbci	r31, 0xF9	; 249
    254e:	21 81       	ldd	r18, Z+1	; 0x01
    2550:	21 30       	cpi	r18, 0x01	; 1
    2552:	19 f5       	brne	.+70     	; 0x259a <SCH_HandleScheduledTask+0x68>
    2554:	fc 01       	movw	r30, r24
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	e8 0f       	add	r30, r24
    255c:	f9 1f       	adc	r31, r25
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	e0 51       	subi	r30, 0x10	; 16
    2564:	f9 4f       	sbci	r31, 0xF9	; 249
    2566:	20 81       	ld	r18, Z
    2568:	21 30       	cpi	r18, 0x01	; 1
    256a:	b9 f4       	brne	.+46     	; 0x259a <SCH_HandleScheduledTask+0x68>
    256c:	fc 01       	movw	r30, r24
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	df 01       	movw	r26, r30
    2574:	a8 0f       	add	r26, r24
    2576:	b9 1f       	adc	r27, r25
    2578:	aa 0f       	add	r26, r26
    257a:	bb 1f       	adc	r27, r27
    257c:	a0 51       	subi	r26, 0x10	; 16
    257e:	b9 4f       	sbci	r27, 0xF9	; 249
    2580:	11 96       	adiw	r26, 0x01	; 1
    2582:	1c 92       	st	X, r1
    2584:	11 97       	sbiw	r26, 0x01	; 1
    2586:	fd 01       	movw	r30, r26
    2588:	04 80       	ldd	r0, Z+4	; 0x04
    258a:	f5 81       	ldd	r31, Z+5	; 0x05
    258c:	e0 2d       	mov	r30, r0
    258e:	04 80       	ldd	r0, Z+4	; 0x04
    2590:	f5 81       	ldd	r31, Z+5	; 0x05
    2592:	e0 2d       	mov	r30, r0
    2594:	30 97       	sbiw	r30, 0x00	; 0
    2596:	09 f0       	breq	.+2      	; 0x259a <SCH_HandleScheduledTask+0x68>
    2598:	09 95       	icall
    259a:	cf 5f       	subi	r28, 0xFF	; 255
    259c:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <s_NumOfTaskScheduled>
    25a0:	c8 17       	cp	r28, r24
    25a2:	50 f2       	brcs	.-108    	; 0x2538 <SCH_HandleScheduledTask+0x6>
    25a4:	c0 e0       	ldi	r28, 0x00	; 0
    25a6:	26 c0       	rjmp	.+76     	; 0x25f4 <SCH_HandleScheduledTask+0xc2>
    25a8:	8c 2f       	mov	r24, r28
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	fc 01       	movw	r30, r24
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	e8 0f       	add	r30, r24
    25b4:	f9 1f       	adc	r31, r25
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	eb 53       	subi	r30, 0x3B	; 59
    25bc:	f9 4f       	sbci	r31, 0xF9	; 249
    25be:	21 81       	ldd	r18, Z+1	; 0x01
    25c0:	21 30       	cpi	r18, 0x01	; 1
    25c2:	b9 f4       	brne	.+46     	; 0x25f2 <SCH_HandleScheduledTask+0xc0>
    25c4:	fc 01       	movw	r30, r24
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	df 01       	movw	r26, r30
    25cc:	a8 0f       	add	r26, r24
    25ce:	b9 1f       	adc	r27, r25
    25d0:	aa 0f       	add	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	ab 53       	subi	r26, 0x3B	; 59
    25d6:	b9 4f       	sbci	r27, 0xF9	; 249
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	1c 92       	st	X, r1
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	fd 01       	movw	r30, r26
    25e0:	04 80       	ldd	r0, Z+4	; 0x04
    25e2:	f5 81       	ldd	r31, Z+5	; 0x05
    25e4:	e0 2d       	mov	r30, r0
    25e6:	05 80       	ldd	r0, Z+5	; 0x05
    25e8:	f6 81       	ldd	r31, Z+6	; 0x06
    25ea:	e0 2d       	mov	r30, r0
    25ec:	30 97       	sbiw	r30, 0x00	; 0
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <SCH_HandleScheduledTask+0xc0>
    25f0:	09 95       	icall
    25f2:	cf 5f       	subi	r28, 0xFF	; 255
    25f4:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <s_NumOfTimers>
    25f8:	c8 17       	cp	r28, r24
    25fa:	b0 f2       	brcs	.-84     	; 0x25a8 <SCH_HandleScheduledTask+0x76>
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <__vector_15>:

ISR (TIMER0_COMP_vect)
{
    2600:	1f 92       	push	r1
    2602:	0f 92       	push	r0
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	0f 92       	push	r0
    2608:	11 24       	eor	r1, r1
    260a:	2f 93       	push	r18
    260c:	3f 93       	push	r19
    260e:	4f 93       	push	r20
    2610:	5f 93       	push	r21
    2612:	6f 93       	push	r22
    2614:	7f 93       	push	r23
    2616:	8f 93       	push	r24
    2618:	9f 93       	push	r25
    261a:	af 93       	push	r26
    261c:	bf 93       	push	r27
    261e:	ef 93       	push	r30
    2620:	ff 93       	push	r31
	SCH_RunSystemTickTimer();
    2622:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <SCH_RunSystemTickTimer>
	if(ADC_data.Status == WAIT) {
    2626:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <ADC_data>
    262a:	82 30       	cpi	r24, 0x02	; 2
    262c:	69 f4       	brne	.+26     	; 0x2648 <__vector_15+0x48>
		if(ADC_data.Wait > 0)
    262e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <ADC_data+0x15>
    2632:	88 23       	and	r24, r24
    2634:	31 f0       	breq	.+12     	; 0x2642 <__vector_15+0x42>
			ADC_data.Wait--;
    2636:	eb e1       	ldi	r30, 0x1B	; 27
    2638:	f7 e0       	ldi	r31, 0x07	; 7
    263a:	85 89       	ldd	r24, Z+21	; 0x15
    263c:	81 50       	subi	r24, 0x01	; 1
    263e:	85 8b       	std	Z+21, r24	; 0x15
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <__vector_15+0x48>
		else
			ADCSRA |= (1<<ADSC);
    2642:	86 b1       	in	r24, 0x06	; 6
    2644:	80 64       	ori	r24, 0x40	; 64
    2646:	86 b9       	out	0x06, r24	; 6
{
  return s_SystemTick;
}

ISR (TIMER0_COMP_vect)
{
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	20 c0       	rjmp	.+64     	; 0x268c <__vector_15+0x8c>
			ADC_data.Wait--;
		else
			ADCSRA |= (1<<ADSC);
	}
	for (uint8_t i = 0 ; i < POWER_OUTPUT ; i++)
		if(OFF_TIME[i] != 0xFFFF)
    264c:	82 2f       	mov	r24, r18
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	fc 01       	movw	r30, r24
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	e2 5f       	subi	r30, 0xF2	; 242
    2658:	fe 4f       	sbci	r31, 0xFE	; 254
    265a:	40 81       	ld	r20, Z
    265c:	51 81       	ldd	r21, Z+1	; 0x01
    265e:	4f 3f       	cpi	r20, 0xFF	; 255
    2660:	5f 4f       	sbci	r21, 0xFF	; 255
    2662:	99 f0       	breq	.+38     	; 0x268a <__vector_15+0x8a>
			if(OFF_TIME[i] > 0)	OFF_TIME[i]--;
    2664:	fc 01       	movw	r30, r24
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	e2 5f       	subi	r30, 0xF2	; 242
    266c:	fe 4f       	sbci	r31, 0xFE	; 254
    266e:	40 81       	ld	r20, Z
    2670:	51 81       	ldd	r21, Z+1	; 0x01
    2672:	45 2b       	or	r20, r21
    2674:	51 f0       	breq	.+20     	; 0x268a <__vector_15+0x8a>
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	fc 01       	movw	r30, r24
    267c:	e2 5f       	subi	r30, 0xF2	; 242
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
		if(ADC_data.Wait > 0)
			ADC_data.Wait--;
		else
			ADCSRA |= (1<<ADSC);
	}
	for (uint8_t i = 0 ; i < POWER_OUTPUT ; i++)
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	29 30       	cpi	r18, 0x09	; 9
    268e:	f0 f2       	brcs	.-68     	; 0x264c <__vector_15+0x4c>
		if(OFF_TIME[i] != 0xFFFF)
			if(OFF_TIME[i] > 0)	OFF_TIME[i]--;
	
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	bf 91       	pop	r27
    2696:	af 91       	pop	r26
    2698:	9f 91       	pop	r25
    269a:	8f 91       	pop	r24
    269c:	7f 91       	pop	r23
    269e:	6f 91       	pop	r22
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f 90       	pop	r0
    26ae:	1f 90       	pop	r1
    26b0:	18 95       	reti

000026b2 <crc16_CCITT>:
 */

#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    26b2:	fb 01       	movw	r30, r22
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    26b4:	20 c0       	rjmp	.+64     	; 0x26f6 <crc16_CCITT+0x44>
    {
        x = crc >> 8 ^ *data++;
    26b6:	70 81       	ld	r23, Z
    26b8:	79 27       	eor	r23, r25
        x ^= x >> 4;
    26ba:	27 2f       	mov	r18, r23
    26bc:	22 95       	swap	r18
    26be:	2f 70       	andi	r18, 0x0F	; 15
    26c0:	72 27       	eor	r23, r18
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
    26c2:	38 2f       	mov	r19, r24
    26c4:	22 27       	eor	r18, r18
    26c6:	a7 2f       	mov	r26, r23
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	57 2f       	mov	r21, r23
    26ce:	52 95       	swap	r21
    26d0:	50 7f       	andi	r21, 0xF0	; 240
    26d2:	c9 01       	movw	r24, r18
    26d4:	84 27       	eor	r24, r20
    26d6:	95 27       	eor	r25, r21
    26d8:	9d 01       	movw	r18, r26
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	22 95       	swap	r18
    26e0:	32 95       	swap	r19
    26e2:	30 7f       	andi	r19, 0xF0	; 240
    26e4:	32 27       	eor	r19, r18
    26e6:	20 7f       	andi	r18, 0xF0	; 240
    26e8:	32 27       	eor	r19, r18
    26ea:	82 27       	eor	r24, r18
    26ec:	93 27       	eor	r25, r19
    26ee:	8a 27       	eor	r24, r26
    26f0:	9b 27       	eor	r25, r27
uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    26f2:	46 2f       	mov	r20, r22
    {
        x = crc >> 8 ^ *data++;
    26f4:	31 96       	adiw	r30, 0x01	; 1
uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    26f6:	6f ef       	ldi	r22, 0xFF	; 255
    26f8:	64 0f       	add	r22, r20
    26fa:	41 11       	cpse	r20, r1
    26fc:	dc cf       	rjmp	.-72     	; 0x26b6 <crc16_CCITT+0x4>
        x ^= x >> 4;
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
    }
    
    return crc;
}
    26fe:	08 95       	ret

00002700 <fsp_init>:
}

void fsp_gen_nack_pkt(uint8_t dst_adr, fsp_packet_t *fsp)
{
	fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}
    2700:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <fsp_my_adr>
    2704:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <fsp_decode_pos>
    2708:	08 95       	ret

0000270a <fsp_gen_pkt>:
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	e7 01       	movw	r28, r14
    2716:	3a ec       	ldi	r19, 0xCA	; 202
    2718:	38 83       	st	Y, r19
    271a:	30 91 bb 09 	lds	r19, 0x09BB	; 0x8009bb <fsp_my_adr>
    271e:	39 83       	std	Y+1, r19	; 0x01
    2720:	2a 83       	std	Y+2, r18	; 0x02
    2722:	4b 83       	std	Y+3, r20	; 0x03
    2724:	0c 83       	std	Y+4, r16	; 0x04
    2726:	f7 01       	movw	r30, r14
    2728:	e0 58       	subi	r30, 0x80	; 128
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	2f ee       	ldi	r18, 0xEF	; 239
    272e:	20 83       	st	Z, r18
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	41 f0       	breq	.+16     	; 0x2744 <fsp_gen_pkt+0x3a>
    2734:	21 e0       	ldi	r18, 0x01	; 1
    2736:	24 0f       	add	r18, r20
    2738:	2b 83       	std	Y+3, r18	; 0x03
    273a:	fc 01       	movw	r30, r24
    273c:	80 81       	ld	r24, Z
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <fsp_gen_pkt+0x3c>
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	0a c0       	rjmp	.+20     	; 0x275e <fsp_gen_pkt+0x54>
    274a:	fb 01       	movw	r30, r22
    274c:	e8 0f       	add	r30, r24
    274e:	f1 1d       	adc	r31, r1
    2750:	20 81       	ld	r18, Z
    2752:	fe 01       	movw	r30, r28
    2754:	e9 0f       	add	r30, r25
    2756:	f1 1d       	adc	r31, r1
    2758:	25 83       	std	Z+5, r18	; 0x05
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	9f 5f       	subi	r25, 0xFF	; 255
    275e:	84 17       	cp	r24, r20
    2760:	a0 f3       	brcs	.-24     	; 0x274a <fsp_gen_pkt+0x40>
    2762:	4b 81       	ldd	r20, Y+3	; 0x03
    2764:	4c 5f       	subi	r20, 0xFC	; 252
    2766:	be 01       	movw	r22, r28
    2768:	6f 5f       	subi	r22, 0xFF	; 255
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 59 13 	call	0x26b2	; 0x26b2 <crc16_CCITT>
    2774:	c2 58       	subi	r28, 0x82	; 130
    2776:	df 4f       	sbci	r29, 0xFF	; 255
    2778:	99 83       	std	Y+1, r25	; 0x01
    277a:	88 83       	st	Y, r24
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	08 95       	ret

00002788 <fsp_gen_cmd_w_data_pkt>:
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	1f 92       	push	r1
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	01 30       	cpi	r16, 0x01	; 1
    279c:	31 f4       	brne	.+12     	; 0x27aa <fsp_gen_cmd_w_data_pkt+0x22>
    279e:	08 e0       	ldi	r16, 0x08	; 8
    27a0:	ce 01       	movw	r24, r28
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	0e 94 85 13 	call	0x270a	; 0x270a <fsp_gen_pkt>
    27a8:	05 c0       	rjmp	.+10     	; 0x27b4 <fsp_gen_cmd_w_data_pkt+0x2c>
    27aa:	07 e0       	ldi	r16, 0x07	; 7
    27ac:	ce 01       	movw	r24, r28
    27ae:	01 96       	adiw	r24, 0x01	; 1
    27b0:	0e 94 85 13 	call	0x270a	; 0x270a <fsp_gen_pkt>
    27b4:	0f 90       	pop	r0
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	08 95       	ret

000027c2 <fsp_encode>:
	fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);

}

void fsp_encode(fsp_packet_t *fsp, uint8_t *pkt, uint8_t *pkt_len)
{
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	dc 01       	movw	r26, r24
    27cc:	fb 01       	movw	r30, r22
    uint8_t i = 0;
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
    27ce:	ec 01       	movw	r28, r24
    27d0:	c2 58       	subi	r28, 0x82	; 130
    27d2:	df 4f       	sbci	r29, 0xFF	; 255
    27d4:	18 81       	ld	r17, Y
    27d6:	09 81       	ldd	r16, Y+1	; 0x01
    27d8:	70 2f       	mov	r23, r16
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);    
    27da:	61 2f       	mov	r22, r17
    pkt[i++] = fsp->sod;
    27dc:	8c 91       	ld	r24, X
    27de:	80 83       	st	Z, r24
    pkt[i++] = fsp->src_adr;
    27e0:	11 96       	adiw	r26, 0x01	; 1
    27e2:	8c 91       	ld	r24, X
    27e4:	11 97       	sbiw	r26, 0x01	; 1
    27e6:	81 83       	std	Z+1, r24	; 0x01
    pkt[i++] = fsp->dst_adr;
    27e8:	12 96       	adiw	r26, 0x02	; 2
    27ea:	8c 91       	ld	r24, X
    27ec:	12 97       	sbiw	r26, 0x02	; 2
    27ee:	82 83       	std	Z+2, r24	; 0x02
    pkt[i++] = fsp->length;
    27f0:	13 96       	adiw	r26, 0x03	; 3
    27f2:	8c 91       	ld	r24, X
    27f4:	13 97       	sbiw	r26, 0x03	; 3
    27f6:	83 83       	std	Z+3, r24	; 0x03
    pkt[i++] = fsp->type;
    27f8:	14 96       	adiw	r26, 0x04	; 4
    27fa:	8c 91       	ld	r24, X
    27fc:	14 97       	sbiw	r26, 0x04	; 4
    27fe:	84 83       	std	Z+4, r24	; 0x04
    
    uint8_t j = 0;
    for(j=0; j<fsp->length; j++)
    2800:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);    
    pkt[i++] = fsp->sod;
    pkt[i++] = fsp->src_adr;
    pkt[i++] = fsp->dst_adr;
    pkt[i++] = fsp->length;
    pkt[i++] = fsp->type;
    2802:	25 e0       	ldi	r18, 0x05	; 5
    
    uint8_t j = 0;
    for(j=0; j<fsp->length; j++)
    2804:	3a c0       	rjmp	.+116    	; 0x287a <fsp_encode+0xb8>
    {
		if (fsp->payload[j] == FSP_PKT_SOD) {
    2806:	ed 01       	movw	r28, r26
    2808:	c9 0f       	add	r28, r25
    280a:	d1 1d       	adc	r29, r1
    280c:	3d 81       	ldd	r19, Y+5	; 0x05
    280e:	3a 3c       	cpi	r19, 0xCA	; 202
    2810:	71 f4       	brne	.+28     	; 0x282e <fsp_encode+0x6c>
			pkt[i++] = FSP_PKT_ESC;
    2812:	ef 01       	movw	r28, r30
    2814:	c2 0f       	add	r28, r18
    2816:	d1 1d       	adc	r29, r1
    2818:	8d eb       	ldi	r24, 0xBD	; 189
    281a:	88 83       	st	Y, r24
			pkt[i++] = FSP_PKT_TSOD;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	82 0f       	add	r24, r18
    2820:	ef 01       	movw	r28, r30
    2822:	c8 0f       	add	r28, r24
    2824:	d1 1d       	adc	r29, r1
    2826:	2e 5f       	subi	r18, 0xFE	; 254
    2828:	8c ed       	ldi	r24, 0xDC	; 220
    282a:	88 83       	st	Y, r24
    282c:	25 c0       	rjmp	.+74     	; 0x2878 <fsp_encode+0xb6>
		} else if (fsp->payload[j] == FSP_PKT_EOF) {
    282e:	3f 3e       	cpi	r19, 0xEF	; 239
    2830:	71 f4       	brne	.+28     	; 0x284e <fsp_encode+0x8c>
			pkt[i++] = FSP_PKT_ESC;
    2832:	ef 01       	movw	r28, r30
    2834:	c2 0f       	add	r28, r18
    2836:	d1 1d       	adc	r29, r1
    2838:	8d eb       	ldi	r24, 0xBD	; 189
    283a:	88 83       	st	Y, r24
			pkt[i++] = FSP_PKT_TEOF;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	82 0f       	add	r24, r18
    2840:	ef 01       	movw	r28, r30
    2842:	c8 0f       	add	r28, r24
    2844:	d1 1d       	adc	r29, r1
    2846:	2e 5f       	subi	r18, 0xFE	; 254
    2848:	8e ed       	ldi	r24, 0xDE	; 222
    284a:	88 83       	st	Y, r24
    284c:	15 c0       	rjmp	.+42     	; 0x2878 <fsp_encode+0xb6>
		} else if (fsp->payload[j] == FSP_PKT_ESC) {
    284e:	3d 3b       	cpi	r19, 0xBD	; 189
    2850:	71 f4       	brne	.+28     	; 0x286e <fsp_encode+0xac>
			pkt[i++] = FSP_PKT_ESC;
    2852:	ef 01       	movw	r28, r30
    2854:	c2 0f       	add	r28, r18
    2856:	d1 1d       	adc	r29, r1
    2858:	8d eb       	ldi	r24, 0xBD	; 189
    285a:	88 83       	st	Y, r24
			pkt[i++] = FSP_PKT_TESC;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	82 0f       	add	r24, r18
    2860:	ef 01       	movw	r28, r30
    2862:	c8 0f       	add	r28, r24
    2864:	d1 1d       	adc	r29, r1
    2866:	2e 5f       	subi	r18, 0xFE	; 254
    2868:	8b ed       	ldi	r24, 0xDB	; 219
    286a:	88 83       	st	Y, r24
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <fsp_encode+0xb6>
		} else
			pkt[i++] = fsp->payload[j];
    286e:	ef 01       	movw	r28, r30
    2870:	c2 0f       	add	r28, r18
    2872:	d1 1d       	adc	r29, r1
    2874:	38 83       	st	Y, r19
    2876:	2f 5f       	subi	r18, 0xFF	; 255
    pkt[i++] = fsp->dst_adr;
    pkt[i++] = fsp->length;
    pkt[i++] = fsp->type;
    
    uint8_t j = 0;
    for(j=0; j<fsp->length; j++)
    2878:	9f 5f       	subi	r25, 0xFF	; 255
    287a:	13 96       	adiw	r26, 0x03	; 3
    287c:	8c 91       	ld	r24, X
    287e:	13 97       	sbiw	r26, 0x03	; 3
    2880:	98 17       	cp	r25, r24
    2882:	08 f2       	brcs	.-126    	; 0x2806 <fsp_encode+0x44>
			pkt[i++] = FSP_PKT_TESC;
		} else
			pkt[i++] = fsp->payload[j];
    }

    if (crc_msb == FSP_PKT_SOD) {
    2884:	7a 3c       	cpi	r23, 0xCA	; 202
    2886:	79 f4       	brne	.+30     	; 0x28a6 <fsp_encode+0xe4>
		pkt[i++] = FSP_PKT_ESC;
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	92 0f       	add	r25, r18
    288c:	df 01       	movw	r26, r30
    288e:	a2 0f       	add	r26, r18
    2890:	b1 1d       	adc	r27, r1
    2892:	8d eb       	ldi	r24, 0xBD	; 189
    2894:	8c 93       	st	X, r24
		pkt[i++] = FSP_PKT_TSOD;
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	82 0f       	add	r24, r18
    289a:	df 01       	movw	r26, r30
    289c:	a9 0f       	add	r26, r25
    289e:	b1 1d       	adc	r27, r1
    28a0:	9c ed       	ldi	r25, 0xDC	; 220
    28a2:	9c 93       	st	X, r25
    28a4:	28 c0       	rjmp	.+80     	; 0x28f6 <fsp_encode+0x134>
	} else if (crc_msb == FSP_PKT_EOF) {
    28a6:	7f 3e       	cpi	r23, 0xEF	; 239
    28a8:	79 f4       	brne	.+30     	; 0x28c8 <fsp_encode+0x106>
		pkt[i++] = FSP_PKT_ESC;
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	92 0f       	add	r25, r18
    28ae:	df 01       	movw	r26, r30
    28b0:	a2 0f       	add	r26, r18
    28b2:	b1 1d       	adc	r27, r1
    28b4:	8d eb       	ldi	r24, 0xBD	; 189
    28b6:	8c 93       	st	X, r24
		pkt[i++] = FSP_PKT_TEOF;
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	82 0f       	add	r24, r18
    28bc:	df 01       	movw	r26, r30
    28be:	a9 0f       	add	r26, r25
    28c0:	b1 1d       	adc	r27, r1
    28c2:	9e ed       	ldi	r25, 0xDE	; 222
    28c4:	9c 93       	st	X, r25
    28c6:	17 c0       	rjmp	.+46     	; 0x28f6 <fsp_encode+0x134>
	} else if (crc_msb == FSP_PKT_ESC) {
    28c8:	7d 3b       	cpi	r23, 0xBD	; 189
    28ca:	79 f4       	brne	.+30     	; 0x28ea <fsp_encode+0x128>
		pkt[i++] = FSP_PKT_ESC;
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	92 0f       	add	r25, r18
    28d0:	df 01       	movw	r26, r30
    28d2:	a2 0f       	add	r26, r18
    28d4:	b1 1d       	adc	r27, r1
    28d6:	8d eb       	ldi	r24, 0xBD	; 189
    28d8:	8c 93       	st	X, r24
		pkt[i++] = FSP_PKT_TESC;
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	82 0f       	add	r24, r18
    28de:	df 01       	movw	r26, r30
    28e0:	a9 0f       	add	r26, r25
    28e2:	b1 1d       	adc	r27, r1
    28e4:	9b ed       	ldi	r25, 0xDB	; 219
    28e6:	9c 93       	st	X, r25
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <fsp_encode+0x134>
	} else
	    pkt[i++] = crc_msb;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	82 0f       	add	r24, r18
    28ee:	df 01       	movw	r26, r30
    28f0:	a2 0f       	add	r26, r18
    28f2:	b1 1d       	adc	r27, r1
    28f4:	0c 93       	st	X, r16

    if (crc_lsb == FSP_PKT_SOD) {
    28f6:	6a 3c       	cpi	r22, 0xCA	; 202
    28f8:	79 f4       	brne	.+30     	; 0x2918 <fsp_encode+0x156>
	    pkt[i++] = FSP_PKT_ESC;
    28fa:	21 e0       	ldi	r18, 0x01	; 1
    28fc:	28 0f       	add	r18, r24
    28fe:	df 01       	movw	r26, r30
    2900:	a8 0f       	add	r26, r24
    2902:	b1 1d       	adc	r27, r1
    2904:	9d eb       	ldi	r25, 0xBD	; 189
    2906:	9c 93       	st	X, r25
	    pkt[i++] = FSP_PKT_TSOD;
    2908:	92 e0       	ldi	r25, 0x02	; 2
    290a:	98 0f       	add	r25, r24
    290c:	df 01       	movw	r26, r30
    290e:	a2 0f       	add	r26, r18
    2910:	b1 1d       	adc	r27, r1
    2912:	8c ed       	ldi	r24, 0xDC	; 220
    2914:	8c 93       	st	X, r24
    2916:	28 c0       	rjmp	.+80     	; 0x2968 <fsp_encode+0x1a6>
	} else if (crc_lsb == FSP_PKT_EOF) {
    2918:	6f 3e       	cpi	r22, 0xEF	; 239
    291a:	79 f4       	brne	.+30     	; 0x293a <fsp_encode+0x178>
	    pkt[i++] = FSP_PKT_ESC;
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	28 0f       	add	r18, r24
    2920:	df 01       	movw	r26, r30
    2922:	a8 0f       	add	r26, r24
    2924:	b1 1d       	adc	r27, r1
    2926:	9d eb       	ldi	r25, 0xBD	; 189
    2928:	9c 93       	st	X, r25
	    pkt[i++] = FSP_PKT_TEOF;
    292a:	92 e0       	ldi	r25, 0x02	; 2
    292c:	98 0f       	add	r25, r24
    292e:	df 01       	movw	r26, r30
    2930:	a2 0f       	add	r26, r18
    2932:	b1 1d       	adc	r27, r1
    2934:	8e ed       	ldi	r24, 0xDE	; 222
    2936:	8c 93       	st	X, r24
    2938:	17 c0       	rjmp	.+46     	; 0x2968 <fsp_encode+0x1a6>
	} else if (crc_lsb == FSP_PKT_ESC) {
    293a:	6d 3b       	cpi	r22, 0xBD	; 189
    293c:	79 f4       	brne	.+30     	; 0x295c <fsp_encode+0x19a>
	    pkt[i++] = FSP_PKT_ESC;
    293e:	21 e0       	ldi	r18, 0x01	; 1
    2940:	28 0f       	add	r18, r24
    2942:	df 01       	movw	r26, r30
    2944:	a8 0f       	add	r26, r24
    2946:	b1 1d       	adc	r27, r1
    2948:	9d eb       	ldi	r25, 0xBD	; 189
    294a:	9c 93       	st	X, r25
	    pkt[i++] = FSP_PKT_TESC;
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	98 0f       	add	r25, r24
    2950:	df 01       	movw	r26, r30
    2952:	a2 0f       	add	r26, r18
    2954:	b1 1d       	adc	r27, r1
    2956:	8b ed       	ldi	r24, 0xDB	; 219
    2958:	8c 93       	st	X, r24
    295a:	06 c0       	rjmp	.+12     	; 0x2968 <fsp_encode+0x1a6>
    } else
		pkt[i++] = crc_lsb;
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	98 0f       	add	r25, r24
    2960:	df 01       	movw	r26, r30
    2962:	a8 0f       	add	r26, r24
    2964:	b1 1d       	adc	r27, r1
    2966:	1c 93       	st	X, r17
    
	pkt[i++] = FSP_PKT_EOF;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 0f       	add	r24, r25
    296c:	e9 0f       	add	r30, r25
    296e:	f1 1d       	adc	r31, r1
    2970:	9f ee       	ldi	r25, 0xEF	; 239
    2972:	90 83       	st	Z, r25
	*pkt_len = i;
    2974:	fa 01       	movw	r30, r20
    2976:	80 83       	st	Z, r24
}
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	1f 91       	pop	r17
    297e:	0f 91       	pop	r16
    2980:	08 95       	ret

00002982 <fsp_decode>:

uint8_t fsp_decode(uint8_t byte, fsp_packet_t *fsp)
{
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	28 2f       	mov	r18, r24
	
    switch(fsp_decode_pos)
    2988:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <fsp_decode_pos>
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	e9 f0       	breq	.+58     	; 0x29ca <fsp_decode+0x48>
    2990:	28 f4       	brcc	.+10     	; 0x299c <fsp_decode+0x1a>
    2992:	88 23       	and	r24, r24
    2994:	41 f0       	breq	.+16     	; 0x29a6 <fsp_decode+0x24>
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	89 f0       	breq	.+34     	; 0x29bc <fsp_decode+0x3a>
    299a:	39 c0       	rjmp	.+114    	; 0x2a0e <fsp_decode+0x8c>
    299c:	83 30       	cpi	r24, 0x03	; 3
    299e:	11 f1       	breq	.+68     	; 0x29e4 <fsp_decode+0x62>
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	69 f1       	breq	.+90     	; 0x29fe <fsp_decode+0x7c>
    29a4:	34 c0       	rjmp	.+104    	; 0x2a0e <fsp_decode+0x8c>
    {
        case FSP_PKT_POS_SOD:
            if (byte == FSP_PKT_SOD)
    29a6:	2a 3c       	cpi	r18, 0xCA	; 202
    29a8:	09 f0       	breq	.+2      	; 0x29ac <fsp_decode+0x2a>
    29aa:	73 c0       	rjmp	.+230    	; 0x2a92 <fsp_decode+0x110>
            {
                fsp->sod = byte;
    29ac:	db 01       	movw	r26, r22
    29ae:	2c 93       	st	X, r18
                
                fsp_decode_pos++;
    29b0:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <fsp_decode_pos>
    29b4:	9f 5f       	subi	r25, 0xFF	; 255
    29b6:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    29ba:	70 c0       	rjmp	.+224    	; 0x2a9c <fsp_decode+0x11a>
            else
            {
                return FSP_PKT_INVALID;
            }
        case FSP_PKT_POS_SRC_ADR:
            fsp->src_adr = byte;
    29bc:	fb 01       	movw	r30, r22
    29be:	21 83       	std	Z+1, r18	; 0x01
            fsp_decode_pos++;
    29c0:	8f 5f       	subi	r24, 0xFF	; 255
    29c2:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <fsp_decode_pos>
            
            return FSP_PKT_NOT_READY;
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	69 c0       	rjmp	.+210    	; 0x2a9c <fsp_decode+0x11a>
        case FSP_PKT_POS_DST_ADR:
            fsp->dst_adr = byte;
    29ca:	db 01       	movw	r26, r22
    29cc:	12 96       	adiw	r26, 0x02	; 2
    29ce:	2c 93       	st	X, r18
            fsp_decode_pos++;
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	98 0f       	add	r25, r24
    29d4:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <fsp_decode_pos>
            
            if (byte == fsp_my_adr)
    29d8:	80 91 bb 09 	lds	r24, 0x09BB	; 0x8009bb <fsp_my_adr>
    29dc:	28 13       	cpse	r18, r24
    29de:	5b c0       	rjmp	.+182    	; 0x2a96 <fsp_decode+0x114>
            {
                return FSP_PKT_NOT_READY;
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	5c c0       	rjmp	.+184    	; 0x2a9c <fsp_decode+0x11a>
            {

                return FSP_PKT_WRONG_ADR;
            }
        case FSP_PKT_POS_LEN:
            if (byte > FSP_PAYLOAD_MAX_LENGTH)
    29e4:	2a 37       	cpi	r18, 0x7A	; 122
    29e6:	20 f0       	brcs	.+8      	; 0x29f0 <fsp_decode+0x6e>
            {
                fsp_decode_pos = FSP_PKT_POS_SOD;
    29e8:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_INVALID;
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	56 c0       	rjmp	.+172    	; 0x2a9c <fsp_decode+0x11a>
            }
            else
            {
                fsp->length = byte;
    29f0:	fb 01       	movw	r30, r22
    29f2:	23 83       	std	Z+3, r18	; 0x03
                fsp_decode_pos++;
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	4f c0       	rjmp	.+158    	; 0x2a9c <fsp_decode+0x11a>
            }
        case FSP_PKT_POS_TYPE:
            fsp->type = byte;
    29fe:	db 01       	movw	r26, r22
    2a00:	14 96       	adiw	r26, 0x04	; 4
    2a02:	2c 93       	st	X, r18
            fsp_decode_pos++;
    2a04:	8f 5f       	subi	r24, 0xFF	; 255
    2a06:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <fsp_decode_pos>
            
            return FSP_PKT_NOT_READY;
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	47 c0       	rjmp	.+142    	; 0x2a9c <fsp_decode+0x11a>
        default:
            if (fsp_decode_pos < (FSP_PKT_POS_TYPE + fsp->length + 1))          // Payload
    2a0e:	e8 2f       	mov	r30, r24
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	db 01       	movw	r26, r22
    2a14:	13 96       	adiw	r26, 0x03	; 3
    2a16:	9c 91       	ld	r25, X
    2a18:	a9 2f       	mov	r26, r25
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	ad 01       	movw	r20, r26
    2a1e:	4b 5f       	subi	r20, 0xFB	; 251
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	e4 17       	cp	r30, r20
    2a24:	f5 07       	cpc	r31, r21
    2a26:	4c f4       	brge	.+18     	; 0x2a3a <fsp_decode+0xb8>
            {
                fsp->payload[fsp_decode_pos - FSP_PKT_POS_TYPE - 1] = byte;
    2a28:	35 97       	sbiw	r30, 0x05	; 5
    2a2a:	e6 0f       	add	r30, r22
    2a2c:	f7 1f       	adc	r31, r23
    2a2e:	25 83       	std	Z+5, r18	; 0x05
                fsp_decode_pos++;
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	31 c0       	rjmp	.+98     	; 0x2a9c <fsp_decode+0x11a>
            }
            else if (fsp_decode_pos == (FSP_PKT_POS_TYPE + fsp->length + 1))    // CRC16 MSB
    2a3a:	e4 17       	cp	r30, r20
    2a3c:	f5 07       	cpc	r31, r21
    2a3e:	51 f4       	brne	.+20     	; 0x2a54 <fsp_decode+0xd2>
            {
                fsp->crc16 = (uint16_t)(byte << 8);
    2a40:	fb 01       	movw	r30, r22
    2a42:	e2 58       	subi	r30, 0x82	; 130
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	10 82       	st	Z, r1
    2a48:	21 83       	std	Z+1, r18	; 0x01
                
                fsp_decode_pos++;
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	24 c0       	rjmp	.+72     	; 0x2a9c <fsp_decode+0x11a>
            }
            else if (fsp_decode_pos == (FSP_PKT_POS_TYPE + fsp->length + 2))    // CRC16 LSB
    2a54:	16 96       	adiw	r26, 0x06	; 6
    2a56:	ea 17       	cp	r30, r26
    2a58:	fb 07       	cpc	r31, r27
    2a5a:	b9 f4       	brne	.+46     	; 0x2a8a <fsp_decode+0x108>
            {
                fsp->crc16 |= (uint16_t)(byte);
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	e2 58       	subi	r30, 0x82	; 130
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	c0 81       	ld	r28, Z
    2a64:	d1 81       	ldd	r29, Z+1	; 0x01
    2a66:	c2 2b       	or	r28, r18
    2a68:	d1 83       	std	Z+1, r29	; 0x01
    2a6a:	c0 83       	st	Z, r28
                
                fsp_decode_pos = FSP_PKT_POS_SOD;
    2a6c:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <fsp_decode_pos>
                
                if (fsp->crc16 == crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4))
    2a70:	44 e0       	ldi	r20, 0x04	; 4
    2a72:	49 0f       	add	r20, r25
    2a74:	6f 5f       	subi	r22, 0xFF	; 255
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <crc16_CCITT>
    2a80:	c8 17       	cp	r28, r24
    2a82:	d9 07       	cpc	r29, r25
    2a84:	51 f4       	brne	.+20     	; 0x2a9a <fsp_decode+0x118>
                {
                    return FSP_PKT_READY;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	09 c0       	rjmp	.+18     	; 0x2a9c <fsp_decode+0x11a>
                    return FSP_PKT_INVALID;
                }
            }
            else
            {
                fsp_decode_pos = FSP_PKT_POS_SOD;
    2a8a:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <fsp_decode_pos>
                
                return FSP_PKT_ERROR;
    2a8e:	84 e0       	ldi	r24, 0x04	; 4
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <fsp_decode+0x11a>
                
                return FSP_PKT_NOT_READY;
            }
            else
            {
                return FSP_PKT_INVALID;
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <fsp_decode+0x11a>
                return FSP_PKT_NOT_READY;
            }
            else
            {

                return FSP_PKT_WRONG_ADR;
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <fsp_decode+0x11a>
                {
                    return FSP_PKT_READY;
                }
                else
                {
                    return FSP_PKT_INVALID;
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
                fsp_decode_pos = FSP_PKT_POS_SOD;
                
                return FSP_PKT_ERROR;
            }
    }
}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	08 95       	ret

00002aa2 <__subsf3>:
    2aa2:	50 58       	subi	r21, 0x80	; 128

00002aa4 <__addsf3>:
    2aa4:	bb 27       	eor	r27, r27
    2aa6:	aa 27       	eor	r26, r26
    2aa8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__addsf3x>
    2aac:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__fp_round>
    2ab0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__fp_pscA>
    2ab4:	38 f0       	brcs	.+14     	; 0x2ac4 <__addsf3+0x20>
    2ab6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__fp_pscB>
    2aba:	20 f0       	brcs	.+8      	; 0x2ac4 <__addsf3+0x20>
    2abc:	39 f4       	brne	.+14     	; 0x2acc <__addsf3+0x28>
    2abe:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac0:	19 f4       	brne	.+6      	; 0x2ac8 <__addsf3+0x24>
    2ac2:	26 f4       	brtc	.+8      	; 0x2acc <__addsf3+0x28>
    2ac4:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__fp_nan>
    2ac8:	0e f4       	brtc	.+2      	; 0x2acc <__addsf3+0x28>
    2aca:	e0 95       	com	r30
    2acc:	e7 fb       	bst	r30, 7
    2ace:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__fp_inf>

00002ad2 <__addsf3x>:
    2ad2:	e9 2f       	mov	r30, r25
    2ad4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fp_split3>
    2ad8:	58 f3       	brcs	.-42     	; 0x2ab0 <__addsf3+0xc>
    2ada:	ba 17       	cp	r27, r26
    2adc:	62 07       	cpc	r22, r18
    2ade:	73 07       	cpc	r23, r19
    2ae0:	84 07       	cpc	r24, r20
    2ae2:	95 07       	cpc	r25, r21
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <__addsf3x+0x1c>
    2ae6:	79 f4       	brne	.+30     	; 0x2b06 <__addsf3x+0x34>
    2ae8:	a6 f5       	brtc	.+104    	; 0x2b52 <__addsf3x+0x80>
    2aea:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_zero>
    2aee:	0e f4       	brtc	.+2      	; 0x2af2 <__addsf3x+0x20>
    2af0:	e0 95       	com	r30
    2af2:	0b 2e       	mov	r0, r27
    2af4:	ba 2f       	mov	r27, r26
    2af6:	a0 2d       	mov	r26, r0
    2af8:	0b 01       	movw	r0, r22
    2afa:	b9 01       	movw	r22, r18
    2afc:	90 01       	movw	r18, r0
    2afe:	0c 01       	movw	r0, r24
    2b00:	ca 01       	movw	r24, r20
    2b02:	a0 01       	movw	r20, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	ff 27       	eor	r31, r31
    2b08:	59 1b       	sub	r21, r25
    2b0a:	99 f0       	breq	.+38     	; 0x2b32 <__addsf3x+0x60>
    2b0c:	59 3f       	cpi	r21, 0xF9	; 249
    2b0e:	50 f4       	brcc	.+20     	; 0x2b24 <__addsf3x+0x52>
    2b10:	50 3e       	cpi	r21, 0xE0	; 224
    2b12:	68 f1       	brcs	.+90     	; 0x2b6e <__addsf3x+0x9c>
    2b14:	1a 16       	cp	r1, r26
    2b16:	f0 40       	sbci	r31, 0x00	; 0
    2b18:	a2 2f       	mov	r26, r18
    2b1a:	23 2f       	mov	r18, r19
    2b1c:	34 2f       	mov	r19, r20
    2b1e:	44 27       	eor	r20, r20
    2b20:	58 5f       	subi	r21, 0xF8	; 248
    2b22:	f3 cf       	rjmp	.-26     	; 0x2b0a <__addsf3x+0x38>
    2b24:	46 95       	lsr	r20
    2b26:	37 95       	ror	r19
    2b28:	27 95       	ror	r18
    2b2a:	a7 95       	ror	r26
    2b2c:	f0 40       	sbci	r31, 0x00	; 0
    2b2e:	53 95       	inc	r21
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__addsf3x+0x52>
    2b32:	7e f4       	brtc	.+30     	; 0x2b52 <__addsf3x+0x80>
    2b34:	1f 16       	cp	r1, r31
    2b36:	ba 0b       	sbc	r27, r26
    2b38:	62 0b       	sbc	r22, r18
    2b3a:	73 0b       	sbc	r23, r19
    2b3c:	84 0b       	sbc	r24, r20
    2b3e:	ba f0       	brmi	.+46     	; 0x2b6e <__addsf3x+0x9c>
    2b40:	91 50       	subi	r25, 0x01	; 1
    2b42:	a1 f0       	breq	.+40     	; 0x2b6c <__addsf3x+0x9a>
    2b44:	ff 0f       	add	r31, r31
    2b46:	bb 1f       	adc	r27, r27
    2b48:	66 1f       	adc	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	88 1f       	adc	r24, r24
    2b4e:	c2 f7       	brpl	.-16     	; 0x2b40 <__addsf3x+0x6e>
    2b50:	0e c0       	rjmp	.+28     	; 0x2b6e <__addsf3x+0x9c>
    2b52:	ba 0f       	add	r27, r26
    2b54:	62 1f       	adc	r22, r18
    2b56:	73 1f       	adc	r23, r19
    2b58:	84 1f       	adc	r24, r20
    2b5a:	48 f4       	brcc	.+18     	; 0x2b6e <__addsf3x+0x9c>
    2b5c:	87 95       	ror	r24
    2b5e:	77 95       	ror	r23
    2b60:	67 95       	ror	r22
    2b62:	b7 95       	ror	r27
    2b64:	f7 95       	ror	r31
    2b66:	9e 3f       	cpi	r25, 0xFE	; 254
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <__addsf3x+0x9a>
    2b6a:	b0 cf       	rjmp	.-160    	; 0x2acc <__addsf3+0x28>
    2b6c:	93 95       	inc	r25
    2b6e:	88 0f       	add	r24, r24
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <__addsf3x+0xa2>
    2b72:	99 27       	eor	r25, r25
    2b74:	ee 0f       	add	r30, r30
    2b76:	97 95       	ror	r25
    2b78:	87 95       	ror	r24
    2b7a:	08 95       	ret

00002b7c <__fixunssfsi>:
    2b7c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__fp_splitA>
    2b80:	88 f0       	brcs	.+34     	; 0x2ba4 <__fixunssfsi+0x28>
    2b82:	9f 57       	subi	r25, 0x7F	; 127
    2b84:	98 f0       	brcs	.+38     	; 0x2bac <__fixunssfsi+0x30>
    2b86:	b9 2f       	mov	r27, r25
    2b88:	99 27       	eor	r25, r25
    2b8a:	b7 51       	subi	r27, 0x17	; 23
    2b8c:	b0 f0       	brcs	.+44     	; 0x2bba <__fixunssfsi+0x3e>
    2b8e:	e1 f0       	breq	.+56     	; 0x2bc8 <__fixunssfsi+0x4c>
    2b90:	66 0f       	add	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	1a f0       	brmi	.+6      	; 0x2ba0 <__fixunssfsi+0x24>
    2b9a:	ba 95       	dec	r27
    2b9c:	c9 f7       	brne	.-14     	; 0x2b90 <__fixunssfsi+0x14>
    2b9e:	14 c0       	rjmp	.+40     	; 0x2bc8 <__fixunssfsi+0x4c>
    2ba0:	b1 30       	cpi	r27, 0x01	; 1
    2ba2:	91 f0       	breq	.+36     	; 0x2bc8 <__fixunssfsi+0x4c>
    2ba4:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__fp_zero>
    2ba8:	b1 e0       	ldi	r27, 0x01	; 1
    2baa:	08 95       	ret
    2bac:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_zero>
    2bb0:	67 2f       	mov	r22, r23
    2bb2:	78 2f       	mov	r23, r24
    2bb4:	88 27       	eor	r24, r24
    2bb6:	b8 5f       	subi	r27, 0xF8	; 248
    2bb8:	39 f0       	breq	.+14     	; 0x2bc8 <__fixunssfsi+0x4c>
    2bba:	b9 3f       	cpi	r27, 0xF9	; 249
    2bbc:	cc f3       	brlt	.-14     	; 0x2bb0 <__fixunssfsi+0x34>
    2bbe:	86 95       	lsr	r24
    2bc0:	77 95       	ror	r23
    2bc2:	67 95       	ror	r22
    2bc4:	b3 95       	inc	r27
    2bc6:	d9 f7       	brne	.-10     	; 0x2bbe <__fixunssfsi+0x42>
    2bc8:	3e f4       	brtc	.+14     	; 0x2bd8 <__fixunssfsi+0x5c>
    2bca:	90 95       	com	r25
    2bcc:	80 95       	com	r24
    2bce:	70 95       	com	r23
    2bd0:	61 95       	neg	r22
    2bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd8:	08 95       	ret

00002bda <__floatunsisf>:
    2bda:	e8 94       	clt
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <__floatsisf+0x12>

00002bde <__floatsisf>:
    2bde:	97 fb       	bst	r25, 7
    2be0:	3e f4       	brtc	.+14     	; 0x2bf0 <__floatsisf+0x12>
    2be2:	90 95       	com	r25
    2be4:	80 95       	com	r24
    2be6:	70 95       	com	r23
    2be8:	61 95       	neg	r22
    2bea:	7f 4f       	sbci	r23, 0xFF	; 255
    2bec:	8f 4f       	sbci	r24, 0xFF	; 255
    2bee:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf0:	99 23       	and	r25, r25
    2bf2:	a9 f0       	breq	.+42     	; 0x2c1e <__floatsisf+0x40>
    2bf4:	f9 2f       	mov	r31, r25
    2bf6:	96 e9       	ldi	r25, 0x96	; 150
    2bf8:	bb 27       	eor	r27, r27
    2bfa:	93 95       	inc	r25
    2bfc:	f6 95       	lsr	r31
    2bfe:	87 95       	ror	r24
    2c00:	77 95       	ror	r23
    2c02:	67 95       	ror	r22
    2c04:	b7 95       	ror	r27
    2c06:	f1 11       	cpse	r31, r1
    2c08:	f8 cf       	rjmp	.-16     	; 0x2bfa <__floatsisf+0x1c>
    2c0a:	fa f4       	brpl	.+62     	; 0x2c4a <__floatsisf+0x6c>
    2c0c:	bb 0f       	add	r27, r27
    2c0e:	11 f4       	brne	.+4      	; 0x2c14 <__floatsisf+0x36>
    2c10:	60 ff       	sbrs	r22, 0
    2c12:	1b c0       	rjmp	.+54     	; 0x2c4a <__floatsisf+0x6c>
    2c14:	6f 5f       	subi	r22, 0xFF	; 255
    2c16:	7f 4f       	sbci	r23, 0xFF	; 255
    2c18:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	16 c0       	rjmp	.+44     	; 0x2c4a <__floatsisf+0x6c>
    2c1e:	88 23       	and	r24, r24
    2c20:	11 f0       	breq	.+4      	; 0x2c26 <__floatsisf+0x48>
    2c22:	96 e9       	ldi	r25, 0x96	; 150
    2c24:	11 c0       	rjmp	.+34     	; 0x2c48 <__floatsisf+0x6a>
    2c26:	77 23       	and	r23, r23
    2c28:	21 f0       	breq	.+8      	; 0x2c32 <__floatsisf+0x54>
    2c2a:	9e e8       	ldi	r25, 0x8E	; 142
    2c2c:	87 2f       	mov	r24, r23
    2c2e:	76 2f       	mov	r23, r22
    2c30:	05 c0       	rjmp	.+10     	; 0x2c3c <__floatsisf+0x5e>
    2c32:	66 23       	and	r22, r22
    2c34:	71 f0       	breq	.+28     	; 0x2c52 <__floatsisf+0x74>
    2c36:	96 e8       	ldi	r25, 0x86	; 134
    2c38:	86 2f       	mov	r24, r22
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	2a f0       	brmi	.+10     	; 0x2c4a <__floatsisf+0x6c>
    2c40:	9a 95       	dec	r25
    2c42:	66 0f       	add	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	88 1f       	adc	r24, r24
    2c48:	da f7       	brpl	.-10     	; 0x2c40 <__floatsisf+0x62>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	96 95       	lsr	r25
    2c4e:	87 95       	ror	r24
    2c50:	97 f9       	bld	r25, 7
    2c52:	08 95       	ret

00002c54 <__fp_inf>:
    2c54:	97 f9       	bld	r25, 7
    2c56:	9f 67       	ori	r25, 0x7F	; 127
    2c58:	80 e8       	ldi	r24, 0x80	; 128
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	08 95       	ret

00002c60 <__fp_nan>:
    2c60:	9f ef       	ldi	r25, 0xFF	; 255
    2c62:	80 ec       	ldi	r24, 0xC0	; 192
    2c64:	08 95       	ret

00002c66 <__fp_pscA>:
    2c66:	00 24       	eor	r0, r0
    2c68:	0a 94       	dec	r0
    2c6a:	16 16       	cp	r1, r22
    2c6c:	17 06       	cpc	r1, r23
    2c6e:	18 06       	cpc	r1, r24
    2c70:	09 06       	cpc	r0, r25
    2c72:	08 95       	ret

00002c74 <__fp_pscB>:
    2c74:	00 24       	eor	r0, r0
    2c76:	0a 94       	dec	r0
    2c78:	12 16       	cp	r1, r18
    2c7a:	13 06       	cpc	r1, r19
    2c7c:	14 06       	cpc	r1, r20
    2c7e:	05 06       	cpc	r0, r21
    2c80:	08 95       	ret

00002c82 <__fp_round>:
    2c82:	09 2e       	mov	r0, r25
    2c84:	03 94       	inc	r0
    2c86:	00 0c       	add	r0, r0
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <__fp_round+0xc>
    2c8a:	88 23       	and	r24, r24
    2c8c:	52 f0       	brmi	.+20     	; 0x2ca2 <__fp_round+0x20>
    2c8e:	bb 0f       	add	r27, r27
    2c90:	40 f4       	brcc	.+16     	; 0x2ca2 <__fp_round+0x20>
    2c92:	bf 2b       	or	r27, r31
    2c94:	11 f4       	brne	.+4      	; 0x2c9a <__fp_round+0x18>
    2c96:	60 ff       	sbrs	r22, 0
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <__fp_round+0x20>
    2c9a:	6f 5f       	subi	r22, 0xFF	; 255
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	08 95       	ret

00002ca4 <__fp_split3>:
    2ca4:	57 fd       	sbrc	r21, 7
    2ca6:	90 58       	subi	r25, 0x80	; 128
    2ca8:	44 0f       	add	r20, r20
    2caa:	55 1f       	adc	r21, r21
    2cac:	59 f0       	breq	.+22     	; 0x2cc4 <__fp_splitA+0x10>
    2cae:	5f 3f       	cpi	r21, 0xFF	; 255
    2cb0:	71 f0       	breq	.+28     	; 0x2cce <__fp_splitA+0x1a>
    2cb2:	47 95       	ror	r20

00002cb4 <__fp_splitA>:
    2cb4:	88 0f       	add	r24, r24
    2cb6:	97 fb       	bst	r25, 7
    2cb8:	99 1f       	adc	r25, r25
    2cba:	61 f0       	breq	.+24     	; 0x2cd4 <__fp_splitA+0x20>
    2cbc:	9f 3f       	cpi	r25, 0xFF	; 255
    2cbe:	79 f0       	breq	.+30     	; 0x2cde <__fp_splitA+0x2a>
    2cc0:	87 95       	ror	r24
    2cc2:	08 95       	ret
    2cc4:	12 16       	cp	r1, r18
    2cc6:	13 06       	cpc	r1, r19
    2cc8:	14 06       	cpc	r1, r20
    2cca:	55 1f       	adc	r21, r21
    2ccc:	f2 cf       	rjmp	.-28     	; 0x2cb2 <__fp_split3+0xe>
    2cce:	46 95       	lsr	r20
    2cd0:	f1 df       	rcall	.-30     	; 0x2cb4 <__fp_splitA>
    2cd2:	08 c0       	rjmp	.+16     	; 0x2ce4 <__fp_splitA+0x30>
    2cd4:	16 16       	cp	r1, r22
    2cd6:	17 06       	cpc	r1, r23
    2cd8:	18 06       	cpc	r1, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	f1 cf       	rjmp	.-30     	; 0x2cc0 <__fp_splitA+0xc>
    2cde:	86 95       	lsr	r24
    2ce0:	71 05       	cpc	r23, r1
    2ce2:	61 05       	cpc	r22, r1
    2ce4:	08 94       	sec
    2ce6:	08 95       	ret

00002ce8 <__fp_zero>:
    2ce8:	e8 94       	clt

00002cea <__fp_szero>:
    2cea:	bb 27       	eor	r27, r27
    2cec:	66 27       	eor	r22, r22
    2cee:	77 27       	eor	r23, r23
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	97 f9       	bld	r25, 7
    2cf4:	08 95       	ret

00002cf6 <__mulsf3>:
    2cf6:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <__mulsf3x>
    2cfa:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__fp_round>
    2cfe:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__fp_pscA>
    2d02:	38 f0       	brcs	.+14     	; 0x2d12 <__mulsf3+0x1c>
    2d04:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__fp_pscB>
    2d08:	20 f0       	brcs	.+8      	; 0x2d12 <__mulsf3+0x1c>
    2d0a:	95 23       	and	r25, r21
    2d0c:	11 f0       	breq	.+4      	; 0x2d12 <__mulsf3+0x1c>
    2d0e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__fp_inf>
    2d12:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__fp_nan>
    2d16:	11 24       	eor	r1, r1
    2d18:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>

00002d1c <__mulsf3x>:
    2d1c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__fp_split3>
    2d20:	70 f3       	brcs	.-36     	; 0x2cfe <__mulsf3+0x8>

00002d22 <__mulsf3_pse>:
    2d22:	95 9f       	mul	r25, r21
    2d24:	c1 f3       	breq	.-16     	; 0x2d16 <__mulsf3+0x20>
    2d26:	95 0f       	add	r25, r21
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	55 1f       	adc	r21, r21
    2d2c:	62 9f       	mul	r22, r18
    2d2e:	f0 01       	movw	r30, r0
    2d30:	72 9f       	mul	r23, r18
    2d32:	bb 27       	eor	r27, r27
    2d34:	f0 0d       	add	r31, r0
    2d36:	b1 1d       	adc	r27, r1
    2d38:	63 9f       	mul	r22, r19
    2d3a:	aa 27       	eor	r26, r26
    2d3c:	f0 0d       	add	r31, r0
    2d3e:	b1 1d       	adc	r27, r1
    2d40:	aa 1f       	adc	r26, r26
    2d42:	64 9f       	mul	r22, r20
    2d44:	66 27       	eor	r22, r22
    2d46:	b0 0d       	add	r27, r0
    2d48:	a1 1d       	adc	r26, r1
    2d4a:	66 1f       	adc	r22, r22
    2d4c:	82 9f       	mul	r24, r18
    2d4e:	22 27       	eor	r18, r18
    2d50:	b0 0d       	add	r27, r0
    2d52:	a1 1d       	adc	r26, r1
    2d54:	62 1f       	adc	r22, r18
    2d56:	73 9f       	mul	r23, r19
    2d58:	b0 0d       	add	r27, r0
    2d5a:	a1 1d       	adc	r26, r1
    2d5c:	62 1f       	adc	r22, r18
    2d5e:	83 9f       	mul	r24, r19
    2d60:	a0 0d       	add	r26, r0
    2d62:	61 1d       	adc	r22, r1
    2d64:	22 1f       	adc	r18, r18
    2d66:	74 9f       	mul	r23, r20
    2d68:	33 27       	eor	r19, r19
    2d6a:	a0 0d       	add	r26, r0
    2d6c:	61 1d       	adc	r22, r1
    2d6e:	23 1f       	adc	r18, r19
    2d70:	84 9f       	mul	r24, r20
    2d72:	60 0d       	add	r22, r0
    2d74:	21 1d       	adc	r18, r1
    2d76:	82 2f       	mov	r24, r18
    2d78:	76 2f       	mov	r23, r22
    2d7a:	6a 2f       	mov	r22, r26
    2d7c:	11 24       	eor	r1, r1
    2d7e:	9f 57       	subi	r25, 0x7F	; 127
    2d80:	50 40       	sbci	r21, 0x00	; 0
    2d82:	9a f0       	brmi	.+38     	; 0x2daa <__mulsf3_pse+0x88>
    2d84:	f1 f0       	breq	.+60     	; 0x2dc2 <__mulsf3_pse+0xa0>
    2d86:	88 23       	and	r24, r24
    2d88:	4a f0       	brmi	.+18     	; 0x2d9c <__mulsf3_pse+0x7a>
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	bb 1f       	adc	r27, r27
    2d90:	66 1f       	adc	r22, r22
    2d92:	77 1f       	adc	r23, r23
    2d94:	88 1f       	adc	r24, r24
    2d96:	91 50       	subi	r25, 0x01	; 1
    2d98:	50 40       	sbci	r21, 0x00	; 0
    2d9a:	a9 f7       	brne	.-22     	; 0x2d86 <__mulsf3_pse+0x64>
    2d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d9e:	51 05       	cpc	r21, r1
    2da0:	80 f0       	brcs	.+32     	; 0x2dc2 <__mulsf3_pse+0xa0>
    2da2:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__fp_inf>
    2da6:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>
    2daa:	5f 3f       	cpi	r21, 0xFF	; 255
    2dac:	e4 f3       	brlt	.-8      	; 0x2da6 <__mulsf3_pse+0x84>
    2dae:	98 3e       	cpi	r25, 0xE8	; 232
    2db0:	d4 f3       	brlt	.-12     	; 0x2da6 <__mulsf3_pse+0x84>
    2db2:	86 95       	lsr	r24
    2db4:	77 95       	ror	r23
    2db6:	67 95       	ror	r22
    2db8:	b7 95       	ror	r27
    2dba:	f7 95       	ror	r31
    2dbc:	e7 95       	ror	r30
    2dbe:	9f 5f       	subi	r25, 0xFF	; 255
    2dc0:	c1 f7       	brne	.-16     	; 0x2db2 <__mulsf3_pse+0x90>
    2dc2:	fe 2b       	or	r31, r30
    2dc4:	88 0f       	add	r24, r24
    2dc6:	91 1d       	adc	r25, r1
    2dc8:	96 95       	lsr	r25
    2dca:	87 95       	ror	r24
    2dcc:	97 f9       	bld	r25, 7
    2dce:	08 95       	ret

00002dd0 <vfprintf>:
    2dd0:	a0 e1       	ldi	r26, 0x10	; 16
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	ee ee       	ldi	r30, 0xEE	; 238
    2dd6:	f6 e1       	ldi	r31, 0x16	; 22
    2dd8:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__>
    2ddc:	7c 01       	movw	r14, r24
    2dde:	1b 01       	movw	r2, r22
    2de0:	6a 01       	movw	r12, r20
    2de2:	fc 01       	movw	r30, r24
    2de4:	17 82       	std	Z+7, r1	; 0x07
    2de6:	16 82       	std	Z+6, r1	; 0x06
    2de8:	83 81       	ldd	r24, Z+3	; 0x03
    2dea:	81 ff       	sbrs	r24, 1
    2dec:	44 c3       	rjmp	.+1672   	; 0x3476 <vfprintf+0x6a6>
    2dee:	9e 01       	movw	r18, r28
    2df0:	2f 5f       	subi	r18, 0xFF	; 255
    2df2:	3f 4f       	sbci	r19, 0xFF	; 255
    2df4:	39 01       	movw	r6, r18
    2df6:	f7 01       	movw	r30, r14
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	f1 01       	movw	r30, r2
    2dfc:	93 fd       	sbrc	r25, 3
    2dfe:	85 91       	lpm	r24, Z+
    2e00:	93 ff       	sbrs	r25, 3
    2e02:	81 91       	ld	r24, Z+
    2e04:	1f 01       	movw	r2, r30
    2e06:	88 23       	and	r24, r24
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <vfprintf+0x3c>
    2e0a:	31 c3       	rjmp	.+1634   	; 0x346e <vfprintf+0x69e>
    2e0c:	85 32       	cpi	r24, 0x25	; 37
    2e0e:	39 f4       	brne	.+14     	; 0x2e1e <vfprintf+0x4e>
    2e10:	93 fd       	sbrc	r25, 3
    2e12:	85 91       	lpm	r24, Z+
    2e14:	93 ff       	sbrs	r25, 3
    2e16:	81 91       	ld	r24, Z+
    2e18:	1f 01       	movw	r2, r30
    2e1a:	85 32       	cpi	r24, 0x25	; 37
    2e1c:	39 f4       	brne	.+14     	; 0x2e2c <vfprintf+0x5c>
    2e1e:	b7 01       	movw	r22, r14
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    2e26:	56 01       	movw	r10, r12
    2e28:	65 01       	movw	r12, r10
    2e2a:	e5 cf       	rjmp	.-54     	; 0x2df6 <vfprintf+0x26>
    2e2c:	10 e0       	ldi	r17, 0x00	; 0
    2e2e:	51 2c       	mov	r5, r1
    2e30:	91 2c       	mov	r9, r1
    2e32:	ff e1       	ldi	r31, 0x1F	; 31
    2e34:	f9 15       	cp	r31, r9
    2e36:	d8 f0       	brcs	.+54     	; 0x2e6e <vfprintf+0x9e>
    2e38:	8b 32       	cpi	r24, 0x2B	; 43
    2e3a:	79 f0       	breq	.+30     	; 0x2e5a <vfprintf+0x8a>
    2e3c:	38 f4       	brcc	.+14     	; 0x2e4c <vfprintf+0x7c>
    2e3e:	80 32       	cpi	r24, 0x20	; 32
    2e40:	79 f0       	breq	.+30     	; 0x2e60 <vfprintf+0x90>
    2e42:	83 32       	cpi	r24, 0x23	; 35
    2e44:	a1 f4       	brne	.+40     	; 0x2e6e <vfprintf+0x9e>
    2e46:	f9 2d       	mov	r31, r9
    2e48:	f0 61       	ori	r31, 0x10	; 16
    2e4a:	2e c0       	rjmp	.+92     	; 0x2ea8 <vfprintf+0xd8>
    2e4c:	8d 32       	cpi	r24, 0x2D	; 45
    2e4e:	61 f0       	breq	.+24     	; 0x2e68 <vfprintf+0x98>
    2e50:	80 33       	cpi	r24, 0x30	; 48
    2e52:	69 f4       	brne	.+26     	; 0x2e6e <vfprintf+0x9e>
    2e54:	29 2d       	mov	r18, r9
    2e56:	21 60       	ori	r18, 0x01	; 1
    2e58:	2d c0       	rjmp	.+90     	; 0x2eb4 <vfprintf+0xe4>
    2e5a:	39 2d       	mov	r19, r9
    2e5c:	32 60       	ori	r19, 0x02	; 2
    2e5e:	93 2e       	mov	r9, r19
    2e60:	89 2d       	mov	r24, r9
    2e62:	84 60       	ori	r24, 0x04	; 4
    2e64:	98 2e       	mov	r9, r24
    2e66:	2a c0       	rjmp	.+84     	; 0x2ebc <vfprintf+0xec>
    2e68:	e9 2d       	mov	r30, r9
    2e6a:	e8 60       	ori	r30, 0x08	; 8
    2e6c:	15 c0       	rjmp	.+42     	; 0x2e98 <vfprintf+0xc8>
    2e6e:	97 fc       	sbrc	r9, 7
    2e70:	2d c0       	rjmp	.+90     	; 0x2ecc <vfprintf+0xfc>
    2e72:	20 ed       	ldi	r18, 0xD0	; 208
    2e74:	28 0f       	add	r18, r24
    2e76:	2a 30       	cpi	r18, 0x0A	; 10
    2e78:	88 f4       	brcc	.+34     	; 0x2e9c <vfprintf+0xcc>
    2e7a:	96 fe       	sbrs	r9, 6
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <vfprintf+0xba>
    2e7e:	3a e0       	ldi	r19, 0x0A	; 10
    2e80:	13 9f       	mul	r17, r19
    2e82:	20 0d       	add	r18, r0
    2e84:	11 24       	eor	r1, r1
    2e86:	12 2f       	mov	r17, r18
    2e88:	19 c0       	rjmp	.+50     	; 0x2ebc <vfprintf+0xec>
    2e8a:	8a e0       	ldi	r24, 0x0A	; 10
    2e8c:	58 9e       	mul	r5, r24
    2e8e:	20 0d       	add	r18, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	52 2e       	mov	r5, r18
    2e94:	e9 2d       	mov	r30, r9
    2e96:	e0 62       	ori	r30, 0x20	; 32
    2e98:	9e 2e       	mov	r9, r30
    2e9a:	10 c0       	rjmp	.+32     	; 0x2ebc <vfprintf+0xec>
    2e9c:	8e 32       	cpi	r24, 0x2E	; 46
    2e9e:	31 f4       	brne	.+12     	; 0x2eac <vfprintf+0xdc>
    2ea0:	96 fc       	sbrc	r9, 6
    2ea2:	e5 c2       	rjmp	.+1482   	; 0x346e <vfprintf+0x69e>
    2ea4:	f9 2d       	mov	r31, r9
    2ea6:	f0 64       	ori	r31, 0x40	; 64
    2ea8:	9f 2e       	mov	r9, r31
    2eaa:	08 c0       	rjmp	.+16     	; 0x2ebc <vfprintf+0xec>
    2eac:	8c 36       	cpi	r24, 0x6C	; 108
    2eae:	21 f4       	brne	.+8      	; 0x2eb8 <vfprintf+0xe8>
    2eb0:	29 2d       	mov	r18, r9
    2eb2:	20 68       	ori	r18, 0x80	; 128
    2eb4:	92 2e       	mov	r9, r18
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <vfprintf+0xec>
    2eb8:	88 36       	cpi	r24, 0x68	; 104
    2eba:	41 f4       	brne	.+16     	; 0x2ecc <vfprintf+0xfc>
    2ebc:	f1 01       	movw	r30, r2
    2ebe:	93 fd       	sbrc	r25, 3
    2ec0:	85 91       	lpm	r24, Z+
    2ec2:	93 ff       	sbrs	r25, 3
    2ec4:	81 91       	ld	r24, Z+
    2ec6:	1f 01       	movw	r2, r30
    2ec8:	81 11       	cpse	r24, r1
    2eca:	b3 cf       	rjmp	.-154    	; 0x2e32 <vfprintf+0x62>
    2ecc:	9b eb       	ldi	r25, 0xBB	; 187
    2ece:	98 0f       	add	r25, r24
    2ed0:	93 30       	cpi	r25, 0x03	; 3
    2ed2:	20 f4       	brcc	.+8      	; 0x2edc <vfprintf+0x10c>
    2ed4:	99 2d       	mov	r25, r9
    2ed6:	90 61       	ori	r25, 0x10	; 16
    2ed8:	80 5e       	subi	r24, 0xE0	; 224
    2eda:	07 c0       	rjmp	.+14     	; 0x2eea <vfprintf+0x11a>
    2edc:	9b e9       	ldi	r25, 0x9B	; 155
    2ede:	98 0f       	add	r25, r24
    2ee0:	93 30       	cpi	r25, 0x03	; 3
    2ee2:	08 f0       	brcs	.+2      	; 0x2ee6 <vfprintf+0x116>
    2ee4:	66 c1       	rjmp	.+716    	; 0x31b2 <vfprintf+0x3e2>
    2ee6:	99 2d       	mov	r25, r9
    2ee8:	9f 7e       	andi	r25, 0xEF	; 239
    2eea:	96 ff       	sbrs	r25, 6
    2eec:	16 e0       	ldi	r17, 0x06	; 6
    2eee:	9f 73       	andi	r25, 0x3F	; 63
    2ef0:	99 2e       	mov	r9, r25
    2ef2:	85 36       	cpi	r24, 0x65	; 101
    2ef4:	19 f4       	brne	.+6      	; 0x2efc <vfprintf+0x12c>
    2ef6:	90 64       	ori	r25, 0x40	; 64
    2ef8:	99 2e       	mov	r9, r25
    2efa:	08 c0       	rjmp	.+16     	; 0x2f0c <vfprintf+0x13c>
    2efc:	86 36       	cpi	r24, 0x66	; 102
    2efe:	21 f4       	brne	.+8      	; 0x2f08 <vfprintf+0x138>
    2f00:	39 2f       	mov	r19, r25
    2f02:	30 68       	ori	r19, 0x80	; 128
    2f04:	93 2e       	mov	r9, r19
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <vfprintf+0x13c>
    2f08:	11 11       	cpse	r17, r1
    2f0a:	11 50       	subi	r17, 0x01	; 1
    2f0c:	97 fe       	sbrs	r9, 7
    2f0e:	07 c0       	rjmp	.+14     	; 0x2f1e <vfprintf+0x14e>
    2f10:	1c 33       	cpi	r17, 0x3C	; 60
    2f12:	50 f4       	brcc	.+20     	; 0x2f28 <vfprintf+0x158>
    2f14:	44 24       	eor	r4, r4
    2f16:	43 94       	inc	r4
    2f18:	41 0e       	add	r4, r17
    2f1a:	27 e0       	ldi	r18, 0x07	; 7
    2f1c:	0b c0       	rjmp	.+22     	; 0x2f34 <vfprintf+0x164>
    2f1e:	18 30       	cpi	r17, 0x08	; 8
    2f20:	38 f0       	brcs	.+14     	; 0x2f30 <vfprintf+0x160>
    2f22:	27 e0       	ldi	r18, 0x07	; 7
    2f24:	17 e0       	ldi	r17, 0x07	; 7
    2f26:	05 c0       	rjmp	.+10     	; 0x2f32 <vfprintf+0x162>
    2f28:	27 e0       	ldi	r18, 0x07	; 7
    2f2a:	9c e3       	ldi	r25, 0x3C	; 60
    2f2c:	49 2e       	mov	r4, r25
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <vfprintf+0x164>
    2f30:	21 2f       	mov	r18, r17
    2f32:	41 2c       	mov	r4, r1
    2f34:	56 01       	movw	r10, r12
    2f36:	84 e0       	ldi	r24, 0x04	; 4
    2f38:	a8 0e       	add	r10, r24
    2f3a:	b1 1c       	adc	r11, r1
    2f3c:	f6 01       	movw	r30, r12
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	04 2d       	mov	r16, r4
    2f48:	a3 01       	movw	r20, r6
    2f4a:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__ftoa_engine>
    2f4e:	6c 01       	movw	r12, r24
    2f50:	f9 81       	ldd	r31, Y+1	; 0x01
    2f52:	fc 87       	std	Y+12, r31	; 0x0c
    2f54:	f0 ff       	sbrs	r31, 0
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <vfprintf+0x18c>
    2f58:	f3 ff       	sbrs	r31, 3
    2f5a:	06 c0       	rjmp	.+12     	; 0x2f68 <vfprintf+0x198>
    2f5c:	91 fc       	sbrc	r9, 1
    2f5e:	06 c0       	rjmp	.+12     	; 0x2f6c <vfprintf+0x19c>
    2f60:	92 fe       	sbrs	r9, 2
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <vfprintf+0x1a0>
    2f64:	00 e2       	ldi	r16, 0x20	; 32
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <vfprintf+0x1a2>
    2f68:	0d e2       	ldi	r16, 0x2D	; 45
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <vfprintf+0x1a2>
    2f6c:	0b e2       	ldi	r16, 0x2B	; 43
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <vfprintf+0x1a2>
    2f70:	00 e0       	ldi	r16, 0x00	; 0
    2f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f74:	8c 70       	andi	r24, 0x0C	; 12
    2f76:	19 f0       	breq	.+6      	; 0x2f7e <vfprintf+0x1ae>
    2f78:	01 11       	cpse	r16, r1
    2f7a:	5a c2       	rjmp	.+1204   	; 0x3430 <vfprintf+0x660>
    2f7c:	9b c2       	rjmp	.+1334   	; 0x34b4 <vfprintf+0x6e4>
    2f7e:	97 fe       	sbrs	r9, 7
    2f80:	10 c0       	rjmp	.+32     	; 0x2fa2 <vfprintf+0x1d2>
    2f82:	4c 0c       	add	r4, r12
    2f84:	fc 85       	ldd	r31, Y+12	; 0x0c
    2f86:	f4 ff       	sbrs	r31, 4
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <vfprintf+0x1c2>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	81 33       	cpi	r24, 0x31	; 49
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <vfprintf+0x1c2>
    2f90:	4a 94       	dec	r4
    2f92:	14 14       	cp	r1, r4
    2f94:	74 f5       	brge	.+92     	; 0x2ff2 <vfprintf+0x222>
    2f96:	28 e0       	ldi	r18, 0x08	; 8
    2f98:	24 15       	cp	r18, r4
    2f9a:	78 f5       	brcc	.+94     	; 0x2ffa <vfprintf+0x22a>
    2f9c:	88 e0       	ldi	r24, 0x08	; 8
    2f9e:	48 2e       	mov	r4, r24
    2fa0:	2c c0       	rjmp	.+88     	; 0x2ffa <vfprintf+0x22a>
    2fa2:	96 fc       	sbrc	r9, 6
    2fa4:	2a c0       	rjmp	.+84     	; 0x2ffa <vfprintf+0x22a>
    2fa6:	81 2f       	mov	r24, r17
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	8c 15       	cp	r24, r12
    2fac:	9d 05       	cpc	r25, r13
    2fae:	9c f0       	brlt	.+38     	; 0x2fd6 <vfprintf+0x206>
    2fb0:	3c ef       	ldi	r19, 0xFC	; 252
    2fb2:	c3 16       	cp	r12, r19
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	d3 06       	cpc	r13, r19
    2fb8:	74 f0       	brlt	.+28     	; 0x2fd6 <vfprintf+0x206>
    2fba:	89 2d       	mov	r24, r9
    2fbc:	80 68       	ori	r24, 0x80	; 128
    2fbe:	98 2e       	mov	r9, r24
    2fc0:	0a c0       	rjmp	.+20     	; 0x2fd6 <vfprintf+0x206>
    2fc2:	e2 e0       	ldi	r30, 0x02	; 2
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	ec 0f       	add	r30, r28
    2fc8:	fd 1f       	adc	r31, r29
    2fca:	e1 0f       	add	r30, r17
    2fcc:	f1 1d       	adc	r31, r1
    2fce:	80 81       	ld	r24, Z
    2fd0:	80 33       	cpi	r24, 0x30	; 48
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <vfprintf+0x20a>
    2fd4:	11 50       	subi	r17, 0x01	; 1
    2fd6:	11 11       	cpse	r17, r1
    2fd8:	f4 cf       	rjmp	.-24     	; 0x2fc2 <vfprintf+0x1f2>
    2fda:	97 fe       	sbrs	r9, 7
    2fdc:	0e c0       	rjmp	.+28     	; 0x2ffa <vfprintf+0x22a>
    2fde:	44 24       	eor	r4, r4
    2fe0:	43 94       	inc	r4
    2fe2:	41 0e       	add	r4, r17
    2fe4:	81 2f       	mov	r24, r17
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	c8 16       	cp	r12, r24
    2fea:	d9 06       	cpc	r13, r25
    2fec:	2c f4       	brge	.+10     	; 0x2ff8 <vfprintf+0x228>
    2fee:	1c 19       	sub	r17, r12
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <vfprintf+0x22a>
    2ff2:	44 24       	eor	r4, r4
    2ff4:	43 94       	inc	r4
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <vfprintf+0x22a>
    2ff8:	10 e0       	ldi	r17, 0x00	; 0
    2ffa:	97 fe       	sbrs	r9, 7
    2ffc:	06 c0       	rjmp	.+12     	; 0x300a <vfprintf+0x23a>
    2ffe:	1c 14       	cp	r1, r12
    3000:	1d 04       	cpc	r1, r13
    3002:	34 f4       	brge	.+12     	; 0x3010 <vfprintf+0x240>
    3004:	c6 01       	movw	r24, r12
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	05 c0       	rjmp	.+10     	; 0x3014 <vfprintf+0x244>
    300a:	85 e0       	ldi	r24, 0x05	; 5
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <vfprintf+0x244>
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	01 11       	cpse	r16, r1
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	11 23       	and	r17, r17
    301a:	31 f0       	breq	.+12     	; 0x3028 <vfprintf+0x258>
    301c:	21 2f       	mov	r18, r17
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	2f 5f       	subi	r18, 0xFF	; 255
    3022:	3f 4f       	sbci	r19, 0xFF	; 255
    3024:	82 0f       	add	r24, r18
    3026:	93 1f       	adc	r25, r19
    3028:	25 2d       	mov	r18, r5
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	82 17       	cp	r24, r18
    302e:	93 07       	cpc	r25, r19
    3030:	14 f4       	brge	.+4      	; 0x3036 <vfprintf+0x266>
    3032:	58 1a       	sub	r5, r24
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <vfprintf+0x268>
    3036:	51 2c       	mov	r5, r1
    3038:	89 2d       	mov	r24, r9
    303a:	89 70       	andi	r24, 0x09	; 9
    303c:	49 f4       	brne	.+18     	; 0x3050 <vfprintf+0x280>
    303e:	55 20       	and	r5, r5
    3040:	39 f0       	breq	.+14     	; 0x3050 <vfprintf+0x280>
    3042:	b7 01       	movw	r22, r14
    3044:	80 e2       	ldi	r24, 0x20	; 32
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    304c:	5a 94       	dec	r5
    304e:	f7 cf       	rjmp	.-18     	; 0x303e <vfprintf+0x26e>
    3050:	00 23       	and	r16, r16
    3052:	29 f0       	breq	.+10     	; 0x305e <vfprintf+0x28e>
    3054:	b7 01       	movw	r22, r14
    3056:	80 2f       	mov	r24, r16
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    305e:	93 fc       	sbrc	r9, 3
    3060:	09 c0       	rjmp	.+18     	; 0x3074 <vfprintf+0x2a4>
    3062:	55 20       	and	r5, r5
    3064:	39 f0       	breq	.+14     	; 0x3074 <vfprintf+0x2a4>
    3066:	b7 01       	movw	r22, r14
    3068:	80 e3       	ldi	r24, 0x30	; 48
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3070:	5a 94       	dec	r5
    3072:	f7 cf       	rjmp	.-18     	; 0x3062 <vfprintf+0x292>
    3074:	97 fe       	sbrs	r9, 7
    3076:	4c c0       	rjmp	.+152    	; 0x3110 <vfprintf+0x340>
    3078:	46 01       	movw	r8, r12
    307a:	d7 fe       	sbrs	r13, 7
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <vfprintf+0x2b2>
    307e:	81 2c       	mov	r8, r1
    3080:	91 2c       	mov	r9, r1
    3082:	c6 01       	movw	r24, r12
    3084:	88 19       	sub	r24, r8
    3086:	99 09       	sbc	r25, r9
    3088:	f3 01       	movw	r30, r6
    308a:	e8 0f       	add	r30, r24
    308c:	f9 1f       	adc	r31, r25
    308e:	fe 87       	std	Y+14, r31	; 0x0e
    3090:	ed 87       	std	Y+13, r30	; 0x0d
    3092:	96 01       	movw	r18, r12
    3094:	24 19       	sub	r18, r4
    3096:	31 09       	sbc	r19, r1
    3098:	38 8b       	std	Y+16, r19	; 0x10
    309a:	2f 87       	std	Y+15, r18	; 0x0f
    309c:	01 2f       	mov	r16, r17
    309e:	10 e0       	ldi	r17, 0x00	; 0
    30a0:	11 95       	neg	r17
    30a2:	01 95       	neg	r16
    30a4:	11 09       	sbc	r17, r1
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	83 16       	cp	r8, r19
    30aa:	93 06       	cpc	r9, r19
    30ac:	29 f4       	brne	.+10     	; 0x30b8 <vfprintf+0x2e8>
    30ae:	b7 01       	movw	r22, r14
    30b0:	8e e2       	ldi	r24, 0x2E	; 46
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    30b8:	c8 14       	cp	r12, r8
    30ba:	d9 04       	cpc	r13, r9
    30bc:	4c f0       	brlt	.+18     	; 0x30d0 <vfprintf+0x300>
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	88 15       	cp	r24, r8
    30c4:	99 05       	cpc	r25, r9
    30c6:	24 f4       	brge	.+8      	; 0x30d0 <vfprintf+0x300>
    30c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    30ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    30cc:	81 81       	ldd	r24, Z+1	; 0x01
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <vfprintf+0x302>
    30d0:	80 e3       	ldi	r24, 0x30	; 48
    30d2:	f1 e0       	ldi	r31, 0x01	; 1
    30d4:	8f 1a       	sub	r8, r31
    30d6:	91 08       	sbc	r9, r1
    30d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    30da:	3e 85       	ldd	r19, Y+14	; 0x0e
    30dc:	2f 5f       	subi	r18, 0xFF	; 255
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	3e 87       	std	Y+14, r19	; 0x0e
    30e2:	2d 87       	std	Y+13, r18	; 0x0d
    30e4:	80 16       	cp	r8, r16
    30e6:	91 06       	cpc	r9, r17
    30e8:	2c f0       	brlt	.+10     	; 0x30f4 <vfprintf+0x324>
    30ea:	b7 01       	movw	r22, r14
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    30f2:	d9 cf       	rjmp	.-78     	; 0x30a6 <vfprintf+0x2d6>
    30f4:	c8 14       	cp	r12, r8
    30f6:	d9 04       	cpc	r13, r9
    30f8:	41 f4       	brne	.+16     	; 0x310a <vfprintf+0x33a>
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	96 33       	cpi	r25, 0x36	; 54
    30fe:	20 f4       	brcc	.+8      	; 0x3108 <vfprintf+0x338>
    3100:	95 33       	cpi	r25, 0x35	; 53
    3102:	19 f4       	brne	.+6      	; 0x310a <vfprintf+0x33a>
    3104:	3c 85       	ldd	r19, Y+12	; 0x0c
    3106:	34 ff       	sbrs	r19, 4
    3108:	81 e3       	ldi	r24, 0x31	; 49
    310a:	b7 01       	movw	r22, r14
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	4e c0       	rjmp	.+156    	; 0x31ac <vfprintf+0x3dc>
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	81 33       	cpi	r24, 0x31	; 49
    3114:	19 f0       	breq	.+6      	; 0x311c <vfprintf+0x34c>
    3116:	9c 85       	ldd	r25, Y+12	; 0x0c
    3118:	9f 7e       	andi	r25, 0xEF	; 239
    311a:	9c 87       	std	Y+12, r25	; 0x0c
    311c:	b7 01       	movw	r22, r14
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3124:	11 11       	cpse	r17, r1
    3126:	05 c0       	rjmp	.+10     	; 0x3132 <vfprintf+0x362>
    3128:	94 fc       	sbrc	r9, 4
    312a:	18 c0       	rjmp	.+48     	; 0x315c <vfprintf+0x38c>
    312c:	85 e6       	ldi	r24, 0x65	; 101
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	17 c0       	rjmp	.+46     	; 0x3160 <vfprintf+0x390>
    3132:	b7 01       	movw	r22, r14
    3134:	8e e2       	ldi	r24, 0x2E	; 46
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    313c:	1e 5f       	subi	r17, 0xFE	; 254
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	01 e0       	ldi	r16, 0x01	; 1
    3142:	08 0f       	add	r16, r24
    3144:	f3 01       	movw	r30, r6
    3146:	e8 0f       	add	r30, r24
    3148:	f1 1d       	adc	r31, r1
    314a:	80 81       	ld	r24, Z
    314c:	b7 01       	movw	r22, r14
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3154:	80 2f       	mov	r24, r16
    3156:	01 13       	cpse	r16, r17
    3158:	f3 cf       	rjmp	.-26     	; 0x3140 <vfprintf+0x370>
    315a:	e6 cf       	rjmp	.-52     	; 0x3128 <vfprintf+0x358>
    315c:	85 e4       	ldi	r24, 0x45	; 69
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	b7 01       	movw	r22, r14
    3162:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3166:	d7 fc       	sbrc	r13, 7
    3168:	06 c0       	rjmp	.+12     	; 0x3176 <vfprintf+0x3a6>
    316a:	c1 14       	cp	r12, r1
    316c:	d1 04       	cpc	r13, r1
    316e:	41 f4       	brne	.+16     	; 0x3180 <vfprintf+0x3b0>
    3170:	ec 85       	ldd	r30, Y+12	; 0x0c
    3172:	e4 ff       	sbrs	r30, 4
    3174:	05 c0       	rjmp	.+10     	; 0x3180 <vfprintf+0x3b0>
    3176:	d1 94       	neg	r13
    3178:	c1 94       	neg	r12
    317a:	d1 08       	sbc	r13, r1
    317c:	8d e2       	ldi	r24, 0x2D	; 45
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <vfprintf+0x3b2>
    3180:	8b e2       	ldi	r24, 0x2B	; 43
    3182:	b7 01       	movw	r22, r14
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    318a:	80 e3       	ldi	r24, 0x30	; 48
    318c:	2a e0       	ldi	r18, 0x0A	; 10
    318e:	c2 16       	cp	r12, r18
    3190:	d1 04       	cpc	r13, r1
    3192:	2c f0       	brlt	.+10     	; 0x319e <vfprintf+0x3ce>
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	fa e0       	ldi	r31, 0x0A	; 10
    3198:	cf 1a       	sub	r12, r31
    319a:	d1 08       	sbc	r13, r1
    319c:	f7 cf       	rjmp	.-18     	; 0x318c <vfprintf+0x3bc>
    319e:	b7 01       	movw	r22, r14
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    31a6:	b7 01       	movw	r22, r14
    31a8:	c6 01       	movw	r24, r12
    31aa:	c0 96       	adiw	r24, 0x30	; 48
    31ac:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    31b0:	54 c1       	rjmp	.+680    	; 0x345a <vfprintf+0x68a>
    31b2:	83 36       	cpi	r24, 0x63	; 99
    31b4:	31 f0       	breq	.+12     	; 0x31c2 <vfprintf+0x3f2>
    31b6:	83 37       	cpi	r24, 0x73	; 115
    31b8:	79 f0       	breq	.+30     	; 0x31d8 <vfprintf+0x408>
    31ba:	83 35       	cpi	r24, 0x53	; 83
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <vfprintf+0x3f0>
    31be:	56 c0       	rjmp	.+172    	; 0x326c <vfprintf+0x49c>
    31c0:	20 c0       	rjmp	.+64     	; 0x3202 <vfprintf+0x432>
    31c2:	56 01       	movw	r10, r12
    31c4:	32 e0       	ldi	r19, 0x02	; 2
    31c6:	a3 0e       	add	r10, r19
    31c8:	b1 1c       	adc	r11, r1
    31ca:	f6 01       	movw	r30, r12
    31cc:	80 81       	ld	r24, Z
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	01 e0       	ldi	r16, 0x01	; 1
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	63 01       	movw	r12, r6
    31d6:	12 c0       	rjmp	.+36     	; 0x31fc <vfprintf+0x42c>
    31d8:	56 01       	movw	r10, r12
    31da:	f2 e0       	ldi	r31, 0x02	; 2
    31dc:	af 0e       	add	r10, r31
    31de:	b1 1c       	adc	r11, r1
    31e0:	f6 01       	movw	r30, r12
    31e2:	c0 80       	ld	r12, Z
    31e4:	d1 80       	ldd	r13, Z+1	; 0x01
    31e6:	96 fe       	sbrs	r9, 6
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <vfprintf+0x420>
    31ea:	61 2f       	mov	r22, r17
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <vfprintf+0x424>
    31f0:	6f ef       	ldi	r22, 0xFF	; 255
    31f2:	7f ef       	ldi	r23, 0xFF	; 255
    31f4:	c6 01       	movw	r24, r12
    31f6:	0e 94 a6 1b 	call	0x374c	; 0x374c <strnlen>
    31fa:	8c 01       	movw	r16, r24
    31fc:	f9 2d       	mov	r31, r9
    31fe:	ff 77       	andi	r31, 0x7F	; 127
    3200:	14 c0       	rjmp	.+40     	; 0x322a <vfprintf+0x45a>
    3202:	56 01       	movw	r10, r12
    3204:	22 e0       	ldi	r18, 0x02	; 2
    3206:	a2 0e       	add	r10, r18
    3208:	b1 1c       	adc	r11, r1
    320a:	f6 01       	movw	r30, r12
    320c:	c0 80       	ld	r12, Z
    320e:	d1 80       	ldd	r13, Z+1	; 0x01
    3210:	96 fe       	sbrs	r9, 6
    3212:	03 c0       	rjmp	.+6      	; 0x321a <vfprintf+0x44a>
    3214:	61 2f       	mov	r22, r17
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	02 c0       	rjmp	.+4      	; 0x321e <vfprintf+0x44e>
    321a:	6f ef       	ldi	r22, 0xFF	; 255
    321c:	7f ef       	ldi	r23, 0xFF	; 255
    321e:	c6 01       	movw	r24, r12
    3220:	0e 94 92 1b 	call	0x3724	; 0x3724 <strnlen_P>
    3224:	8c 01       	movw	r16, r24
    3226:	f9 2d       	mov	r31, r9
    3228:	f0 68       	ori	r31, 0x80	; 128
    322a:	9f 2e       	mov	r9, r31
    322c:	f3 fd       	sbrc	r31, 3
    322e:	1a c0       	rjmp	.+52     	; 0x3264 <vfprintf+0x494>
    3230:	85 2d       	mov	r24, r5
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	08 17       	cp	r16, r24
    3236:	19 07       	cpc	r17, r25
    3238:	a8 f4       	brcc	.+42     	; 0x3264 <vfprintf+0x494>
    323a:	b7 01       	movw	r22, r14
    323c:	80 e2       	ldi	r24, 0x20	; 32
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3244:	5a 94       	dec	r5
    3246:	f4 cf       	rjmp	.-24     	; 0x3230 <vfprintf+0x460>
    3248:	f6 01       	movw	r30, r12
    324a:	97 fc       	sbrc	r9, 7
    324c:	85 91       	lpm	r24, Z+
    324e:	97 fe       	sbrs	r9, 7
    3250:	81 91       	ld	r24, Z+
    3252:	6f 01       	movw	r12, r30
    3254:	b7 01       	movw	r22, r14
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    325c:	51 10       	cpse	r5, r1
    325e:	5a 94       	dec	r5
    3260:	01 50       	subi	r16, 0x01	; 1
    3262:	11 09       	sbc	r17, r1
    3264:	01 15       	cp	r16, r1
    3266:	11 05       	cpc	r17, r1
    3268:	79 f7       	brne	.-34     	; 0x3248 <vfprintf+0x478>
    326a:	f7 c0       	rjmp	.+494    	; 0x345a <vfprintf+0x68a>
    326c:	84 36       	cpi	r24, 0x64	; 100
    326e:	11 f0       	breq	.+4      	; 0x3274 <vfprintf+0x4a4>
    3270:	89 36       	cpi	r24, 0x69	; 105
    3272:	61 f5       	brne	.+88     	; 0x32cc <vfprintf+0x4fc>
    3274:	56 01       	movw	r10, r12
    3276:	97 fe       	sbrs	r9, 7
    3278:	09 c0       	rjmp	.+18     	; 0x328c <vfprintf+0x4bc>
    327a:	24 e0       	ldi	r18, 0x04	; 4
    327c:	a2 0e       	add	r10, r18
    327e:	b1 1c       	adc	r11, r1
    3280:	f6 01       	movw	r30, r12
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <vfprintf+0x4d0>
    328c:	f2 e0       	ldi	r31, 0x02	; 2
    328e:	af 0e       	add	r10, r31
    3290:	b1 1c       	adc	r11, r1
    3292:	f6 01       	movw	r30, r12
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	07 2e       	mov	r0, r23
    329a:	00 0c       	add	r0, r0
    329c:	88 0b       	sbc	r24, r24
    329e:	99 0b       	sbc	r25, r25
    32a0:	f9 2d       	mov	r31, r9
    32a2:	ff 76       	andi	r31, 0x6F	; 111
    32a4:	9f 2e       	mov	r9, r31
    32a6:	97 ff       	sbrs	r25, 7
    32a8:	09 c0       	rjmp	.+18     	; 0x32bc <vfprintf+0x4ec>
    32aa:	90 95       	com	r25
    32ac:	80 95       	com	r24
    32ae:	70 95       	com	r23
    32b0:	61 95       	neg	r22
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	8f 4f       	sbci	r24, 0xFF	; 255
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	f0 68       	ori	r31, 0x80	; 128
    32ba:	9f 2e       	mov	r9, r31
    32bc:	2a e0       	ldi	r18, 0x0A	; 10
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	a3 01       	movw	r20, r6
    32c2:	0e 94 17 1c 	call	0x382e	; 0x382e <__ultoa_invert>
    32c6:	c8 2e       	mov	r12, r24
    32c8:	c6 18       	sub	r12, r6
    32ca:	3f c0       	rjmp	.+126    	; 0x334a <vfprintf+0x57a>
    32cc:	09 2d       	mov	r16, r9
    32ce:	85 37       	cpi	r24, 0x75	; 117
    32d0:	21 f4       	brne	.+8      	; 0x32da <vfprintf+0x50a>
    32d2:	0f 7e       	andi	r16, 0xEF	; 239
    32d4:	2a e0       	ldi	r18, 0x0A	; 10
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	1d c0       	rjmp	.+58     	; 0x3314 <vfprintf+0x544>
    32da:	09 7f       	andi	r16, 0xF9	; 249
    32dc:	8f 36       	cpi	r24, 0x6F	; 111
    32de:	91 f0       	breq	.+36     	; 0x3304 <vfprintf+0x534>
    32e0:	18 f4       	brcc	.+6      	; 0x32e8 <vfprintf+0x518>
    32e2:	88 35       	cpi	r24, 0x58	; 88
    32e4:	59 f0       	breq	.+22     	; 0x32fc <vfprintf+0x52c>
    32e6:	c3 c0       	rjmp	.+390    	; 0x346e <vfprintf+0x69e>
    32e8:	80 37       	cpi	r24, 0x70	; 112
    32ea:	19 f0       	breq	.+6      	; 0x32f2 <vfprintf+0x522>
    32ec:	88 37       	cpi	r24, 0x78	; 120
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <vfprintf+0x524>
    32f0:	be c0       	rjmp	.+380    	; 0x346e <vfprintf+0x69e>
    32f2:	00 61       	ori	r16, 0x10	; 16
    32f4:	04 ff       	sbrs	r16, 4
    32f6:	09 c0       	rjmp	.+18     	; 0x330a <vfprintf+0x53a>
    32f8:	04 60       	ori	r16, 0x04	; 4
    32fa:	07 c0       	rjmp	.+14     	; 0x330a <vfprintf+0x53a>
    32fc:	94 fe       	sbrs	r9, 4
    32fe:	08 c0       	rjmp	.+16     	; 0x3310 <vfprintf+0x540>
    3300:	06 60       	ori	r16, 0x06	; 6
    3302:	06 c0       	rjmp	.+12     	; 0x3310 <vfprintf+0x540>
    3304:	28 e0       	ldi	r18, 0x08	; 8
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <vfprintf+0x544>
    330a:	20 e1       	ldi	r18, 0x10	; 16
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <vfprintf+0x544>
    3310:	20 e1       	ldi	r18, 0x10	; 16
    3312:	32 e0       	ldi	r19, 0x02	; 2
    3314:	56 01       	movw	r10, r12
    3316:	07 ff       	sbrs	r16, 7
    3318:	09 c0       	rjmp	.+18     	; 0x332c <vfprintf+0x55c>
    331a:	84 e0       	ldi	r24, 0x04	; 4
    331c:	a8 0e       	add	r10, r24
    331e:	b1 1c       	adc	r11, r1
    3320:	f6 01       	movw	r30, r12
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	08 c0       	rjmp	.+16     	; 0x333c <vfprintf+0x56c>
    332c:	f2 e0       	ldi	r31, 0x02	; 2
    332e:	af 0e       	add	r10, r31
    3330:	b1 1c       	adc	r11, r1
    3332:	f6 01       	movw	r30, r12
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a3 01       	movw	r20, r6
    333e:	0e 94 17 1c 	call	0x382e	; 0x382e <__ultoa_invert>
    3342:	c8 2e       	mov	r12, r24
    3344:	c6 18       	sub	r12, r6
    3346:	0f 77       	andi	r16, 0x7F	; 127
    3348:	90 2e       	mov	r9, r16
    334a:	96 fe       	sbrs	r9, 6
    334c:	0b c0       	rjmp	.+22     	; 0x3364 <vfprintf+0x594>
    334e:	09 2d       	mov	r16, r9
    3350:	0e 7f       	andi	r16, 0xFE	; 254
    3352:	c1 16       	cp	r12, r17
    3354:	50 f4       	brcc	.+20     	; 0x336a <vfprintf+0x59a>
    3356:	94 fe       	sbrs	r9, 4
    3358:	0a c0       	rjmp	.+20     	; 0x336e <vfprintf+0x59e>
    335a:	92 fc       	sbrc	r9, 2
    335c:	08 c0       	rjmp	.+16     	; 0x336e <vfprintf+0x59e>
    335e:	09 2d       	mov	r16, r9
    3360:	0e 7e       	andi	r16, 0xEE	; 238
    3362:	05 c0       	rjmp	.+10     	; 0x336e <vfprintf+0x59e>
    3364:	dc 2c       	mov	r13, r12
    3366:	09 2d       	mov	r16, r9
    3368:	03 c0       	rjmp	.+6      	; 0x3370 <vfprintf+0x5a0>
    336a:	dc 2c       	mov	r13, r12
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <vfprintf+0x5a0>
    336e:	d1 2e       	mov	r13, r17
    3370:	04 ff       	sbrs	r16, 4
    3372:	0d c0       	rjmp	.+26     	; 0x338e <vfprintf+0x5be>
    3374:	fe 01       	movw	r30, r28
    3376:	ec 0d       	add	r30, r12
    3378:	f1 1d       	adc	r31, r1
    337a:	80 81       	ld	r24, Z
    337c:	80 33       	cpi	r24, 0x30	; 48
    337e:	11 f4       	brne	.+4      	; 0x3384 <vfprintf+0x5b4>
    3380:	09 7e       	andi	r16, 0xE9	; 233
    3382:	09 c0       	rjmp	.+18     	; 0x3396 <vfprintf+0x5c6>
    3384:	02 ff       	sbrs	r16, 2
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <vfprintf+0x5c4>
    3388:	d3 94       	inc	r13
    338a:	d3 94       	inc	r13
    338c:	04 c0       	rjmp	.+8      	; 0x3396 <vfprintf+0x5c6>
    338e:	80 2f       	mov	r24, r16
    3390:	86 78       	andi	r24, 0x86	; 134
    3392:	09 f0       	breq	.+2      	; 0x3396 <vfprintf+0x5c6>
    3394:	d3 94       	inc	r13
    3396:	03 fd       	sbrc	r16, 3
    3398:	11 c0       	rjmp	.+34     	; 0x33bc <vfprintf+0x5ec>
    339a:	00 ff       	sbrs	r16, 0
    339c:	06 c0       	rjmp	.+12     	; 0x33aa <vfprintf+0x5da>
    339e:	1c 2d       	mov	r17, r12
    33a0:	d5 14       	cp	r13, r5
    33a2:	80 f4       	brcc	.+32     	; 0x33c4 <vfprintf+0x5f4>
    33a4:	15 0d       	add	r17, r5
    33a6:	1d 19       	sub	r17, r13
    33a8:	0d c0       	rjmp	.+26     	; 0x33c4 <vfprintf+0x5f4>
    33aa:	d5 14       	cp	r13, r5
    33ac:	58 f4       	brcc	.+22     	; 0x33c4 <vfprintf+0x5f4>
    33ae:	b7 01       	movw	r22, r14
    33b0:	80 e2       	ldi	r24, 0x20	; 32
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    33b8:	d3 94       	inc	r13
    33ba:	f7 cf       	rjmp	.-18     	; 0x33aa <vfprintf+0x5da>
    33bc:	d5 14       	cp	r13, r5
    33be:	10 f4       	brcc	.+4      	; 0x33c4 <vfprintf+0x5f4>
    33c0:	5d 18       	sub	r5, r13
    33c2:	01 c0       	rjmp	.+2      	; 0x33c6 <vfprintf+0x5f6>
    33c4:	51 2c       	mov	r5, r1
    33c6:	04 ff       	sbrs	r16, 4
    33c8:	10 c0       	rjmp	.+32     	; 0x33ea <vfprintf+0x61a>
    33ca:	b7 01       	movw	r22, r14
    33cc:	80 e3       	ldi	r24, 0x30	; 48
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    33d4:	02 ff       	sbrs	r16, 2
    33d6:	17 c0       	rjmp	.+46     	; 0x3406 <vfprintf+0x636>
    33d8:	01 fd       	sbrc	r16, 1
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <vfprintf+0x612>
    33dc:	88 e7       	ldi	r24, 0x78	; 120
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <vfprintf+0x616>
    33e2:	88 e5       	ldi	r24, 0x58	; 88
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	b7 01       	movw	r22, r14
    33e8:	0c c0       	rjmp	.+24     	; 0x3402 <vfprintf+0x632>
    33ea:	80 2f       	mov	r24, r16
    33ec:	86 78       	andi	r24, 0x86	; 134
    33ee:	59 f0       	breq	.+22     	; 0x3406 <vfprintf+0x636>
    33f0:	01 ff       	sbrs	r16, 1
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <vfprintf+0x628>
    33f4:	8b e2       	ldi	r24, 0x2B	; 43
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <vfprintf+0x62a>
    33f8:	80 e2       	ldi	r24, 0x20	; 32
    33fa:	07 fd       	sbrc	r16, 7
    33fc:	8d e2       	ldi	r24, 0x2D	; 45
    33fe:	b7 01       	movw	r22, r14
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3406:	c1 16       	cp	r12, r17
    3408:	38 f4       	brcc	.+14     	; 0x3418 <vfprintf+0x648>
    340a:	b7 01       	movw	r22, r14
    340c:	80 e3       	ldi	r24, 0x30	; 48
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3414:	11 50       	subi	r17, 0x01	; 1
    3416:	f7 cf       	rjmp	.-18     	; 0x3406 <vfprintf+0x636>
    3418:	ca 94       	dec	r12
    341a:	f3 01       	movw	r30, r6
    341c:	ec 0d       	add	r30, r12
    341e:	f1 1d       	adc	r31, r1
    3420:	80 81       	ld	r24, Z
    3422:	b7 01       	movw	r22, r14
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    342a:	c1 10       	cpse	r12, r1
    342c:	f5 cf       	rjmp	.-22     	; 0x3418 <vfprintf+0x648>
    342e:	15 c0       	rjmp	.+42     	; 0x345a <vfprintf+0x68a>
    3430:	f4 e0       	ldi	r31, 0x04	; 4
    3432:	f5 15       	cp	r31, r5
    3434:	60 f5       	brcc	.+88     	; 0x348e <vfprintf+0x6be>
    3436:	84 e0       	ldi	r24, 0x04	; 4
    3438:	58 1a       	sub	r5, r24
    343a:	93 fe       	sbrs	r9, 3
    343c:	1f c0       	rjmp	.+62     	; 0x347c <vfprintf+0x6ac>
    343e:	01 11       	cpse	r16, r1
    3440:	27 c0       	rjmp	.+78     	; 0x3490 <vfprintf+0x6c0>
    3442:	2c 85       	ldd	r18, Y+12	; 0x0c
    3444:	23 ff       	sbrs	r18, 3
    3446:	2a c0       	rjmp	.+84     	; 0x349c <vfprintf+0x6cc>
    3448:	0c e8       	ldi	r16, 0x8C	; 140
    344a:	10 e0       	ldi	r17, 0x00	; 0
    344c:	39 2d       	mov	r19, r9
    344e:	30 71       	andi	r19, 0x10	; 16
    3450:	93 2e       	mov	r9, r19
    3452:	f8 01       	movw	r30, r16
    3454:	84 91       	lpm	r24, Z
    3456:	81 11       	cpse	r24, r1
    3458:	24 c0       	rjmp	.+72     	; 0x34a2 <vfprintf+0x6d2>
    345a:	55 20       	and	r5, r5
    345c:	09 f4       	brne	.+2      	; 0x3460 <vfprintf+0x690>
    345e:	e4 cc       	rjmp	.-1592   	; 0x2e28 <vfprintf+0x58>
    3460:	b7 01       	movw	r22, r14
    3462:	80 e2       	ldi	r24, 0x20	; 32
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    346a:	5a 94       	dec	r5
    346c:	f6 cf       	rjmp	.-20     	; 0x345a <vfprintf+0x68a>
    346e:	f7 01       	movw	r30, r14
    3470:	86 81       	ldd	r24, Z+6	; 0x06
    3472:	97 81       	ldd	r25, Z+7	; 0x07
    3474:	26 c0       	rjmp	.+76     	; 0x34c2 <vfprintf+0x6f2>
    3476:	8f ef       	ldi	r24, 0xFF	; 255
    3478:	9f ef       	ldi	r25, 0xFF	; 255
    347a:	23 c0       	rjmp	.+70     	; 0x34c2 <vfprintf+0x6f2>
    347c:	b7 01       	movw	r22, r14
    347e:	80 e2       	ldi	r24, 0x20	; 32
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    3486:	5a 94       	dec	r5
    3488:	51 10       	cpse	r5, r1
    348a:	f8 cf       	rjmp	.-16     	; 0x347c <vfprintf+0x6ac>
    348c:	d8 cf       	rjmp	.-80     	; 0x343e <vfprintf+0x66e>
    348e:	51 2c       	mov	r5, r1
    3490:	b7 01       	movw	r22, r14
    3492:	80 2f       	mov	r24, r16
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    349a:	d3 cf       	rjmp	.-90     	; 0x3442 <vfprintf+0x672>
    349c:	00 e9       	ldi	r16, 0x90	; 144
    349e:	10 e0       	ldi	r17, 0x00	; 0
    34a0:	d5 cf       	rjmp	.-86     	; 0x344c <vfprintf+0x67c>
    34a2:	91 10       	cpse	r9, r1
    34a4:	80 52       	subi	r24, 0x20	; 32
    34a6:	b7 01       	movw	r22, r14
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 b9 1b 	call	0x3772	; 0x3772 <fputc>
    34ae:	0f 5f       	subi	r16, 0xFF	; 255
    34b0:	1f 4f       	sbci	r17, 0xFF	; 255
    34b2:	cf cf       	rjmp	.-98     	; 0x3452 <vfprintf+0x682>
    34b4:	23 e0       	ldi	r18, 0x03	; 3
    34b6:	25 15       	cp	r18, r5
    34b8:	10 f4       	brcc	.+4      	; 0x34be <vfprintf+0x6ee>
    34ba:	83 e0       	ldi	r24, 0x03	; 3
    34bc:	bd cf       	rjmp	.-134    	; 0x3438 <vfprintf+0x668>
    34be:	51 2c       	mov	r5, r1
    34c0:	c0 cf       	rjmp	.-128    	; 0x3442 <vfprintf+0x672>
    34c2:	60 96       	adiw	r28, 0x10	; 16
    34c4:	e2 e1       	ldi	r30, 0x12	; 18
    34c6:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__>

000034ca <__prologue_saves__>:
    34ca:	2f 92       	push	r2
    34cc:	3f 92       	push	r3
    34ce:	4f 92       	push	r4
    34d0:	5f 92       	push	r5
    34d2:	6f 92       	push	r6
    34d4:	7f 92       	push	r7
    34d6:	8f 92       	push	r8
    34d8:	9f 92       	push	r9
    34da:	af 92       	push	r10
    34dc:	bf 92       	push	r11
    34de:	cf 92       	push	r12
    34e0:	df 92       	push	r13
    34e2:	ef 92       	push	r14
    34e4:	ff 92       	push	r15
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	ca 1b       	sub	r28, r26
    34f4:	db 0b       	sbc	r29, r27
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	09 94       	ijmp

00003502 <__epilogue_restores__>:
    3502:	2a 88       	ldd	r2, Y+18	; 0x12
    3504:	39 88       	ldd	r3, Y+17	; 0x11
    3506:	48 88       	ldd	r4, Y+16	; 0x10
    3508:	5f 84       	ldd	r5, Y+15	; 0x0f
    350a:	6e 84       	ldd	r6, Y+14	; 0x0e
    350c:	7d 84       	ldd	r7, Y+13	; 0x0d
    350e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3510:	9b 84       	ldd	r9, Y+11	; 0x0b
    3512:	aa 84       	ldd	r10, Y+10	; 0x0a
    3514:	b9 84       	ldd	r11, Y+9	; 0x09
    3516:	c8 84       	ldd	r12, Y+8	; 0x08
    3518:	df 80       	ldd	r13, Y+7	; 0x07
    351a:	ee 80       	ldd	r14, Y+6	; 0x06
    351c:	fd 80       	ldd	r15, Y+5	; 0x05
    351e:	0c 81       	ldd	r16, Y+4	; 0x04
    3520:	1b 81       	ldd	r17, Y+3	; 0x03
    3522:	aa 81       	ldd	r26, Y+2	; 0x02
    3524:	b9 81       	ldd	r27, Y+1	; 0x01
    3526:	ce 0f       	add	r28, r30
    3528:	d1 1d       	adc	r29, r1
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	ed 01       	movw	r28, r26
    3536:	08 95       	ret

00003538 <atoi>:
    3538:	fc 01       	movw	r30, r24
    353a:	88 27       	eor	r24, r24
    353c:	99 27       	eor	r25, r25
    353e:	e8 94       	clt
    3540:	21 91       	ld	r18, Z+
    3542:	20 32       	cpi	r18, 0x20	; 32
    3544:	e9 f3       	breq	.-6      	; 0x3540 <atoi+0x8>
    3546:	29 30       	cpi	r18, 0x09	; 9
    3548:	10 f0       	brcs	.+4      	; 0x354e <atoi+0x16>
    354a:	2e 30       	cpi	r18, 0x0E	; 14
    354c:	c8 f3       	brcs	.-14     	; 0x3540 <atoi+0x8>
    354e:	2b 32       	cpi	r18, 0x2B	; 43
    3550:	41 f0       	breq	.+16     	; 0x3562 <atoi+0x2a>
    3552:	2d 32       	cpi	r18, 0x2D	; 45
    3554:	39 f4       	brne	.+14     	; 0x3564 <atoi+0x2c>
    3556:	68 94       	set
    3558:	04 c0       	rjmp	.+8      	; 0x3562 <atoi+0x2a>
    355a:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__mulhi_const_10>
    355e:	82 0f       	add	r24, r18
    3560:	91 1d       	adc	r25, r1
    3562:	21 91       	ld	r18, Z+
    3564:	20 53       	subi	r18, 0x30	; 48
    3566:	2a 30       	cpi	r18, 0x0A	; 10
    3568:	c0 f3       	brcs	.-16     	; 0x355a <atoi+0x22>
    356a:	1e f4       	brtc	.+6      	; 0x3572 <atoi+0x3a>
    356c:	90 95       	com	r25
    356e:	81 95       	neg	r24
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	08 95       	ret

00003574 <__ftoa_engine>:
    3574:	28 30       	cpi	r18, 0x08	; 8
    3576:	08 f0       	brcs	.+2      	; 0x357a <__ftoa_engine+0x6>
    3578:	27 e0       	ldi	r18, 0x07	; 7
    357a:	33 27       	eor	r19, r19
    357c:	da 01       	movw	r26, r20
    357e:	99 0f       	add	r25, r25
    3580:	31 1d       	adc	r19, r1
    3582:	87 fd       	sbrc	r24, 7
    3584:	91 60       	ori	r25, 0x01	; 1
    3586:	00 96       	adiw	r24, 0x00	; 0
    3588:	61 05       	cpc	r22, r1
    358a:	71 05       	cpc	r23, r1
    358c:	39 f4       	brne	.+14     	; 0x359c <__ftoa_engine+0x28>
    358e:	32 60       	ori	r19, 0x02	; 2
    3590:	2e 5f       	subi	r18, 0xFE	; 254
    3592:	3d 93       	st	X+, r19
    3594:	30 e3       	ldi	r19, 0x30	; 48
    3596:	2a 95       	dec	r18
    3598:	e1 f7       	brne	.-8      	; 0x3592 <__ftoa_engine+0x1e>
    359a:	08 95       	ret
    359c:	9f 3f       	cpi	r25, 0xFF	; 255
    359e:	30 f0       	brcs	.+12     	; 0x35ac <__ftoa_engine+0x38>
    35a0:	80 38       	cpi	r24, 0x80	; 128
    35a2:	71 05       	cpc	r23, r1
    35a4:	61 05       	cpc	r22, r1
    35a6:	09 f0       	breq	.+2      	; 0x35aa <__ftoa_engine+0x36>
    35a8:	3c 5f       	subi	r19, 0xFC	; 252
    35aa:	3c 5f       	subi	r19, 0xFC	; 252
    35ac:	3d 93       	st	X+, r19
    35ae:	91 30       	cpi	r25, 0x01	; 1
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <__ftoa_engine+0x40>
    35b2:	80 68       	ori	r24, 0x80	; 128
    35b4:	91 1d       	adc	r25, r1
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	1f 93       	push	r17
    35bc:	0f 93       	push	r16
    35be:	ff 92       	push	r15
    35c0:	ef 92       	push	r14
    35c2:	19 2f       	mov	r17, r25
    35c4:	98 7f       	andi	r25, 0xF8	; 248
    35c6:	96 95       	lsr	r25
    35c8:	e9 2f       	mov	r30, r25
    35ca:	96 95       	lsr	r25
    35cc:	96 95       	lsr	r25
    35ce:	e9 0f       	add	r30, r25
    35d0:	ff 27       	eor	r31, r31
    35d2:	e2 51       	subi	r30, 0x12	; 18
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	99 27       	eor	r25, r25
    35d8:	33 27       	eor	r19, r19
    35da:	ee 24       	eor	r14, r14
    35dc:	ff 24       	eor	r15, r15
    35de:	a7 01       	movw	r20, r14
    35e0:	e7 01       	movw	r28, r14
    35e2:	05 90       	lpm	r0, Z+
    35e4:	08 94       	sec
    35e6:	07 94       	ror	r0
    35e8:	28 f4       	brcc	.+10     	; 0x35f4 <__ftoa_engine+0x80>
    35ea:	36 0f       	add	r19, r22
    35ec:	e7 1e       	adc	r14, r23
    35ee:	f8 1e       	adc	r15, r24
    35f0:	49 1f       	adc	r20, r25
    35f2:	51 1d       	adc	r21, r1
    35f4:	66 0f       	add	r22, r22
    35f6:	77 1f       	adc	r23, r23
    35f8:	88 1f       	adc	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	06 94       	lsr	r0
    35fe:	a1 f7       	brne	.-24     	; 0x35e8 <__ftoa_engine+0x74>
    3600:	05 90       	lpm	r0, Z+
    3602:	07 94       	ror	r0
    3604:	28 f4       	brcc	.+10     	; 0x3610 <__ftoa_engine+0x9c>
    3606:	e7 0e       	add	r14, r23
    3608:	f8 1e       	adc	r15, r24
    360a:	49 1f       	adc	r20, r25
    360c:	56 1f       	adc	r21, r22
    360e:	c1 1d       	adc	r28, r1
    3610:	77 0f       	add	r23, r23
    3612:	88 1f       	adc	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	66 1f       	adc	r22, r22
    3618:	06 94       	lsr	r0
    361a:	a1 f7       	brne	.-24     	; 0x3604 <__ftoa_engine+0x90>
    361c:	05 90       	lpm	r0, Z+
    361e:	07 94       	ror	r0
    3620:	28 f4       	brcc	.+10     	; 0x362c <__ftoa_engine+0xb8>
    3622:	f8 0e       	add	r15, r24
    3624:	49 1f       	adc	r20, r25
    3626:	56 1f       	adc	r21, r22
    3628:	c7 1f       	adc	r28, r23
    362a:	d1 1d       	adc	r29, r1
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	66 1f       	adc	r22, r22
    3632:	77 1f       	adc	r23, r23
    3634:	06 94       	lsr	r0
    3636:	a1 f7       	brne	.-24     	; 0x3620 <__ftoa_engine+0xac>
    3638:	05 90       	lpm	r0, Z+
    363a:	07 94       	ror	r0
    363c:	20 f4       	brcc	.+8      	; 0x3646 <__ftoa_engine+0xd2>
    363e:	49 0f       	add	r20, r25
    3640:	56 1f       	adc	r21, r22
    3642:	c7 1f       	adc	r28, r23
    3644:	d8 1f       	adc	r29, r24
    3646:	99 0f       	add	r25, r25
    3648:	66 1f       	adc	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	06 94       	lsr	r0
    3650:	a9 f7       	brne	.-22     	; 0x363c <__ftoa_engine+0xc8>
    3652:	84 91       	lpm	r24, Z
    3654:	10 95       	com	r17
    3656:	17 70       	andi	r17, 0x07	; 7
    3658:	41 f0       	breq	.+16     	; 0x366a <__ftoa_engine+0xf6>
    365a:	d6 95       	lsr	r29
    365c:	c7 95       	ror	r28
    365e:	57 95       	ror	r21
    3660:	47 95       	ror	r20
    3662:	f7 94       	ror	r15
    3664:	e7 94       	ror	r14
    3666:	1a 95       	dec	r17
    3668:	c1 f7       	brne	.-16     	; 0x365a <__ftoa_engine+0xe6>
    366a:	e4 e9       	ldi	r30, 0x94	; 148
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	68 94       	set
    3670:	15 90       	lpm	r1, Z+
    3672:	15 91       	lpm	r17, Z+
    3674:	35 91       	lpm	r19, Z+
    3676:	65 91       	lpm	r22, Z+
    3678:	95 91       	lpm	r25, Z+
    367a:	05 90       	lpm	r0, Z+
    367c:	7f e2       	ldi	r23, 0x2F	; 47
    367e:	73 95       	inc	r23
    3680:	e1 18       	sub	r14, r1
    3682:	f1 0a       	sbc	r15, r17
    3684:	43 0b       	sbc	r20, r19
    3686:	56 0b       	sbc	r21, r22
    3688:	c9 0b       	sbc	r28, r25
    368a:	d0 09       	sbc	r29, r0
    368c:	c0 f7       	brcc	.-16     	; 0x367e <__ftoa_engine+0x10a>
    368e:	e1 0c       	add	r14, r1
    3690:	f1 1e       	adc	r15, r17
    3692:	43 1f       	adc	r20, r19
    3694:	56 1f       	adc	r21, r22
    3696:	c9 1f       	adc	r28, r25
    3698:	d0 1d       	adc	r29, r0
    369a:	7e f4       	brtc	.+30     	; 0x36ba <__ftoa_engine+0x146>
    369c:	70 33       	cpi	r23, 0x30	; 48
    369e:	11 f4       	brne	.+4      	; 0x36a4 <__ftoa_engine+0x130>
    36a0:	8a 95       	dec	r24
    36a2:	e6 cf       	rjmp	.-52     	; 0x3670 <__ftoa_engine+0xfc>
    36a4:	e8 94       	clt
    36a6:	01 50       	subi	r16, 0x01	; 1
    36a8:	30 f0       	brcs	.+12     	; 0x36b6 <__ftoa_engine+0x142>
    36aa:	08 0f       	add	r16, r24
    36ac:	0a f4       	brpl	.+2      	; 0x36b0 <__ftoa_engine+0x13c>
    36ae:	00 27       	eor	r16, r16
    36b0:	02 17       	cp	r16, r18
    36b2:	08 f4       	brcc	.+2      	; 0x36b6 <__ftoa_engine+0x142>
    36b4:	20 2f       	mov	r18, r16
    36b6:	23 95       	inc	r18
    36b8:	02 2f       	mov	r16, r18
    36ba:	7a 33       	cpi	r23, 0x3A	; 58
    36bc:	28 f0       	brcs	.+10     	; 0x36c8 <__ftoa_engine+0x154>
    36be:	79 e3       	ldi	r23, 0x39	; 57
    36c0:	7d 93       	st	X+, r23
    36c2:	2a 95       	dec	r18
    36c4:	e9 f7       	brne	.-6      	; 0x36c0 <__ftoa_engine+0x14c>
    36c6:	10 c0       	rjmp	.+32     	; 0x36e8 <__ftoa_engine+0x174>
    36c8:	7d 93       	st	X+, r23
    36ca:	2a 95       	dec	r18
    36cc:	89 f6       	brne	.-94     	; 0x3670 <__ftoa_engine+0xfc>
    36ce:	06 94       	lsr	r0
    36d0:	97 95       	ror	r25
    36d2:	67 95       	ror	r22
    36d4:	37 95       	ror	r19
    36d6:	17 95       	ror	r17
    36d8:	17 94       	ror	r1
    36da:	e1 18       	sub	r14, r1
    36dc:	f1 0a       	sbc	r15, r17
    36de:	43 0b       	sbc	r20, r19
    36e0:	56 0b       	sbc	r21, r22
    36e2:	c9 0b       	sbc	r28, r25
    36e4:	d0 09       	sbc	r29, r0
    36e6:	98 f0       	brcs	.+38     	; 0x370e <__ftoa_engine+0x19a>
    36e8:	23 95       	inc	r18
    36ea:	7e 91       	ld	r23, -X
    36ec:	73 95       	inc	r23
    36ee:	7a 33       	cpi	r23, 0x3A	; 58
    36f0:	08 f0       	brcs	.+2      	; 0x36f4 <__ftoa_engine+0x180>
    36f2:	70 e3       	ldi	r23, 0x30	; 48
    36f4:	7c 93       	st	X, r23
    36f6:	20 13       	cpse	r18, r16
    36f8:	b8 f7       	brcc	.-18     	; 0x36e8 <__ftoa_engine+0x174>
    36fa:	7e 91       	ld	r23, -X
    36fc:	70 61       	ori	r23, 0x10	; 16
    36fe:	7d 93       	st	X+, r23
    3700:	30 f0       	brcs	.+12     	; 0x370e <__ftoa_engine+0x19a>
    3702:	83 95       	inc	r24
    3704:	71 e3       	ldi	r23, 0x31	; 49
    3706:	7d 93       	st	X+, r23
    3708:	70 e3       	ldi	r23, 0x30	; 48
    370a:	2a 95       	dec	r18
    370c:	e1 f7       	brne	.-8      	; 0x3706 <__ftoa_engine+0x192>
    370e:	11 24       	eor	r1, r1
    3710:	ef 90       	pop	r14
    3712:	ff 90       	pop	r15
    3714:	0f 91       	pop	r16
    3716:	1f 91       	pop	r17
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	99 27       	eor	r25, r25
    371e:	87 fd       	sbrc	r24, 7
    3720:	90 95       	com	r25
    3722:	08 95       	ret

00003724 <strnlen_P>:
    3724:	fc 01       	movw	r30, r24
    3726:	05 90       	lpm	r0, Z+
    3728:	61 50       	subi	r22, 0x01	; 1
    372a:	70 40       	sbci	r23, 0x00	; 0
    372c:	01 10       	cpse	r0, r1
    372e:	d8 f7       	brcc	.-10     	; 0x3726 <strnlen_P+0x2>
    3730:	80 95       	com	r24
    3732:	90 95       	com	r25
    3734:	8e 0f       	add	r24, r30
    3736:	9f 1f       	adc	r25, r31
    3738:	08 95       	ret

0000373a <strcmp>:
    373a:	fb 01       	movw	r30, r22
    373c:	dc 01       	movw	r26, r24
    373e:	8d 91       	ld	r24, X+
    3740:	01 90       	ld	r0, Z+
    3742:	80 19       	sub	r24, r0
    3744:	01 10       	cpse	r0, r1
    3746:	d9 f3       	breq	.-10     	; 0x373e <strcmp+0x4>
    3748:	99 0b       	sbc	r25, r25
    374a:	08 95       	ret

0000374c <strnlen>:
    374c:	fc 01       	movw	r30, r24
    374e:	61 50       	subi	r22, 0x01	; 1
    3750:	70 40       	sbci	r23, 0x00	; 0
    3752:	01 90       	ld	r0, Z+
    3754:	01 10       	cpse	r0, r1
    3756:	d8 f7       	brcc	.-10     	; 0x374e <strnlen+0x2>
    3758:	80 95       	com	r24
    375a:	90 95       	com	r25
    375c:	8e 0f       	add	r24, r30
    375e:	9f 1f       	adc	r25, r31
    3760:	08 95       	ret

00003762 <__mulhi_const_10>:
    3762:	7a e0       	ldi	r23, 0x0A	; 10
    3764:	97 9f       	mul	r25, r23
    3766:	90 2d       	mov	r25, r0
    3768:	87 9f       	mul	r24, r23
    376a:	80 2d       	mov	r24, r0
    376c:	91 0d       	add	r25, r1
    376e:	11 24       	eor	r1, r1
    3770:	08 95       	ret

00003772 <fputc>:
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	fb 01       	movw	r30, r22
    377c:	23 81       	ldd	r18, Z+3	; 0x03
    377e:	21 fd       	sbrc	r18, 1
    3780:	03 c0       	rjmp	.+6      	; 0x3788 <fputc+0x16>
    3782:	8f ef       	ldi	r24, 0xFF	; 255
    3784:	9f ef       	ldi	r25, 0xFF	; 255
    3786:	2c c0       	rjmp	.+88     	; 0x37e0 <fputc+0x6e>
    3788:	22 ff       	sbrs	r18, 2
    378a:	16 c0       	rjmp	.+44     	; 0x37b8 <fputc+0x46>
    378c:	46 81       	ldd	r20, Z+6	; 0x06
    378e:	57 81       	ldd	r21, Z+7	; 0x07
    3790:	24 81       	ldd	r18, Z+4	; 0x04
    3792:	35 81       	ldd	r19, Z+5	; 0x05
    3794:	42 17       	cp	r20, r18
    3796:	53 07       	cpc	r21, r19
    3798:	44 f4       	brge	.+16     	; 0x37aa <fputc+0x38>
    379a:	a0 81       	ld	r26, Z
    379c:	b1 81       	ldd	r27, Z+1	; 0x01
    379e:	9d 01       	movw	r18, r26
    37a0:	2f 5f       	subi	r18, 0xFF	; 255
    37a2:	3f 4f       	sbci	r19, 0xFF	; 255
    37a4:	31 83       	std	Z+1, r19	; 0x01
    37a6:	20 83       	st	Z, r18
    37a8:	8c 93       	st	X, r24
    37aa:	26 81       	ldd	r18, Z+6	; 0x06
    37ac:	37 81       	ldd	r19, Z+7	; 0x07
    37ae:	2f 5f       	subi	r18, 0xFF	; 255
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	37 83       	std	Z+7, r19	; 0x07
    37b4:	26 83       	std	Z+6, r18	; 0x06
    37b6:	14 c0       	rjmp	.+40     	; 0x37e0 <fputc+0x6e>
    37b8:	8b 01       	movw	r16, r22
    37ba:	ec 01       	movw	r28, r24
    37bc:	fb 01       	movw	r30, r22
    37be:	00 84       	ldd	r0, Z+8	; 0x08
    37c0:	f1 85       	ldd	r31, Z+9	; 0x09
    37c2:	e0 2d       	mov	r30, r0
    37c4:	09 95       	icall
    37c6:	89 2b       	or	r24, r25
    37c8:	e1 f6       	brne	.-72     	; 0x3782 <fputc+0x10>
    37ca:	d8 01       	movw	r26, r16
    37cc:	16 96       	adiw	r26, 0x06	; 6
    37ce:	8d 91       	ld	r24, X+
    37d0:	9c 91       	ld	r25, X
    37d2:	17 97       	sbiw	r26, 0x07	; 7
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	17 96       	adiw	r26, 0x07	; 7
    37d8:	9c 93       	st	X, r25
    37da:	8e 93       	st	-X, r24
    37dc:	16 97       	sbiw	r26, 0x06	; 6
    37de:	ce 01       	movw	r24, r28
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	08 95       	ret

000037ea <sprintf>:
    37ea:	ae e0       	ldi	r26, 0x0E	; 14
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	eb ef       	ldi	r30, 0xFB	; 251
    37f0:	fb e1       	ldi	r31, 0x1B	; 27
    37f2:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__prologue_saves__+0x1c>
    37f6:	0d 89       	ldd	r16, Y+21	; 0x15
    37f8:	1e 89       	ldd	r17, Y+22	; 0x16
    37fa:	86 e0       	ldi	r24, 0x06	; 6
    37fc:	8c 83       	std	Y+4, r24	; 0x04
    37fe:	1a 83       	std	Y+2, r17	; 0x02
    3800:	09 83       	std	Y+1, r16	; 0x01
    3802:	8f ef       	ldi	r24, 0xFF	; 255
    3804:	9f e7       	ldi	r25, 0x7F	; 127
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
    380a:	ae 01       	movw	r20, r28
    380c:	47 5e       	subi	r20, 0xE7	; 231
    380e:	5f 4f       	sbci	r21, 0xFF	; 255
    3810:	6f 89       	ldd	r22, Y+23	; 0x17
    3812:	78 8d       	ldd	r23, Y+24	; 0x18
    3814:	ce 01       	movw	r24, r28
    3816:	01 96       	adiw	r24, 0x01	; 1
    3818:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <vfprintf>
    381c:	ef 81       	ldd	r30, Y+7	; 0x07
    381e:	f8 85       	ldd	r31, Y+8	; 0x08
    3820:	e0 0f       	add	r30, r16
    3822:	f1 1f       	adc	r31, r17
    3824:	10 82       	st	Z, r1
    3826:	2e 96       	adiw	r28, 0x0e	; 14
    3828:	e4 e0       	ldi	r30, 0x04	; 4
    382a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__epilogue_restores__+0x1c>

0000382e <__ultoa_invert>:
    382e:	fa 01       	movw	r30, r20
    3830:	aa 27       	eor	r26, r26
    3832:	28 30       	cpi	r18, 0x08	; 8
    3834:	51 f1       	breq	.+84     	; 0x388a <__ultoa_invert+0x5c>
    3836:	20 31       	cpi	r18, 0x10	; 16
    3838:	81 f1       	breq	.+96     	; 0x389a <__ultoa_invert+0x6c>
    383a:	e8 94       	clt
    383c:	6f 93       	push	r22
    383e:	6e 7f       	andi	r22, 0xFE	; 254
    3840:	6e 5f       	subi	r22, 0xFE	; 254
    3842:	7f 4f       	sbci	r23, 0xFF	; 255
    3844:	8f 4f       	sbci	r24, 0xFF	; 255
    3846:	9f 4f       	sbci	r25, 0xFF	; 255
    3848:	af 4f       	sbci	r26, 0xFF	; 255
    384a:	b1 e0       	ldi	r27, 0x01	; 1
    384c:	3e d0       	rcall	.+124    	; 0x38ca <__ultoa_invert+0x9c>
    384e:	b4 e0       	ldi	r27, 0x04	; 4
    3850:	3c d0       	rcall	.+120    	; 0x38ca <__ultoa_invert+0x9c>
    3852:	67 0f       	add	r22, r23
    3854:	78 1f       	adc	r23, r24
    3856:	89 1f       	adc	r24, r25
    3858:	9a 1f       	adc	r25, r26
    385a:	a1 1d       	adc	r26, r1
    385c:	68 0f       	add	r22, r24
    385e:	79 1f       	adc	r23, r25
    3860:	8a 1f       	adc	r24, r26
    3862:	91 1d       	adc	r25, r1
    3864:	a1 1d       	adc	r26, r1
    3866:	6a 0f       	add	r22, r26
    3868:	71 1d       	adc	r23, r1
    386a:	81 1d       	adc	r24, r1
    386c:	91 1d       	adc	r25, r1
    386e:	a1 1d       	adc	r26, r1
    3870:	20 d0       	rcall	.+64     	; 0x38b2 <__ultoa_invert+0x84>
    3872:	09 f4       	brne	.+2      	; 0x3876 <__ultoa_invert+0x48>
    3874:	68 94       	set
    3876:	3f 91       	pop	r19
    3878:	2a e0       	ldi	r18, 0x0A	; 10
    387a:	26 9f       	mul	r18, r22
    387c:	11 24       	eor	r1, r1
    387e:	30 19       	sub	r19, r0
    3880:	30 5d       	subi	r19, 0xD0	; 208
    3882:	31 93       	st	Z+, r19
    3884:	de f6       	brtc	.-74     	; 0x383c <__ultoa_invert+0xe>
    3886:	cf 01       	movw	r24, r30
    3888:	08 95       	ret
    388a:	46 2f       	mov	r20, r22
    388c:	47 70       	andi	r20, 0x07	; 7
    388e:	40 5d       	subi	r20, 0xD0	; 208
    3890:	41 93       	st	Z+, r20
    3892:	b3 e0       	ldi	r27, 0x03	; 3
    3894:	0f d0       	rcall	.+30     	; 0x38b4 <__ultoa_invert+0x86>
    3896:	c9 f7       	brne	.-14     	; 0x388a <__ultoa_invert+0x5c>
    3898:	f6 cf       	rjmp	.-20     	; 0x3886 <__ultoa_invert+0x58>
    389a:	46 2f       	mov	r20, r22
    389c:	4f 70       	andi	r20, 0x0F	; 15
    389e:	40 5d       	subi	r20, 0xD0	; 208
    38a0:	4a 33       	cpi	r20, 0x3A	; 58
    38a2:	18 f0       	brcs	.+6      	; 0x38aa <__ultoa_invert+0x7c>
    38a4:	49 5d       	subi	r20, 0xD9	; 217
    38a6:	31 fd       	sbrc	r19, 1
    38a8:	40 52       	subi	r20, 0x20	; 32
    38aa:	41 93       	st	Z+, r20
    38ac:	02 d0       	rcall	.+4      	; 0x38b2 <__ultoa_invert+0x84>
    38ae:	a9 f7       	brne	.-22     	; 0x389a <__ultoa_invert+0x6c>
    38b0:	ea cf       	rjmp	.-44     	; 0x3886 <__ultoa_invert+0x58>
    38b2:	b4 e0       	ldi	r27, 0x04	; 4
    38b4:	a6 95       	lsr	r26
    38b6:	97 95       	ror	r25
    38b8:	87 95       	ror	r24
    38ba:	77 95       	ror	r23
    38bc:	67 95       	ror	r22
    38be:	ba 95       	dec	r27
    38c0:	c9 f7       	brne	.-14     	; 0x38b4 <__ultoa_invert+0x86>
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	61 05       	cpc	r22, r1
    38c6:	71 05       	cpc	r23, r1
    38c8:	08 95       	ret
    38ca:	9b 01       	movw	r18, r22
    38cc:	ac 01       	movw	r20, r24
    38ce:	0a 2e       	mov	r0, r26
    38d0:	06 94       	lsr	r0
    38d2:	57 95       	ror	r21
    38d4:	47 95       	ror	r20
    38d6:	37 95       	ror	r19
    38d8:	27 95       	ror	r18
    38da:	ba 95       	dec	r27
    38dc:	c9 f7       	brne	.-14     	; 0x38d0 <__ultoa_invert+0xa2>
    38de:	62 0f       	add	r22, r18
    38e0:	73 1f       	adc	r23, r19
    38e2:	84 1f       	adc	r24, r20
    38e4:	95 1f       	adc	r25, r21
    38e6:	a0 1d       	adc	r26, r0
    38e8:	08 95       	ret

000038ea <_exit>:
    38ea:	f8 94       	cli

000038ec <__stop_program>:
    38ec:	ff cf       	rjmp	.-2      	; 0x38ec <__stop_program>
