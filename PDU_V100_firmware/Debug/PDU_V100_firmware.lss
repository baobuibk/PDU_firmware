
PDU_V100_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fc  00800100  00003236  000032ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000498  008003fc  008003fc  000035c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f7c  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aea  00000000  00000000  00008b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d7f  00000000  00000000  0000a666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d80  00000000  00000000  0000d3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001907  00000000  00000000  0000e168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000279a  00000000  00000000  0000fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  00012209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 04 	jmp	0x870	; 0x870 <__ctors_end>
       4:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
       8:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
       c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      10:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      14:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      18:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      1c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      20:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      24:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      28:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      2c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      30:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      34:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      38:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      3c:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__vector_15>
      40:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      44:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      48:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_18>
      4c:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_19>
      50:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      54:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_21>
      58:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      5c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      60:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      64:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      68:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      6c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      70:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      74:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      78:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_30>
      7c:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_31>
      80:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      84:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      88:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__bad_interrupt>
      8c:	1f 0d       	add	r17, r15
      8e:	24 0d       	add	r18, r4
      90:	24 0d       	add	r18, r4
      92:	24 0d       	add	r18, r4
      94:	24 0d       	add	r18, r4
      96:	24 0d       	add	r18, r4
      98:	24 0d       	add	r18, r4
      9a:	24 0d       	add	r18, r4
      9c:	24 0d       	add	r18, r4
      9e:	24 0d       	add	r18, r4
      a0:	24 0d       	add	r18, r4
      a2:	c2 0a       	sbc	r12, r18
      a4:	c2 0a       	sbc	r12, r18
      a6:	c2 0a       	sbc	r12, r18
      a8:	c2 0a       	sbc	r12, r18
      aa:	c2 0a       	sbc	r12, r18
      ac:	c2 0a       	sbc	r12, r18
      ae:	c2 0a       	sbc	r12, r18
      b0:	c2 0a       	sbc	r12, r18
      b2:	c2 0a       	sbc	r12, r18
      b4:	c2 0a       	sbc	r12, r18
      b6:	24 0d       	add	r18, r4
      b8:	24 0d       	add	r18, r4
      ba:	24 0d       	add	r18, r4
      bc:	24 0d       	add	r18, r4
      be:	24 0d       	add	r18, r4
      c0:	24 0d       	add	r18, r4
      c2:	24 0d       	add	r18, r4
      c4:	24 0d       	add	r18, r4
      c6:	24 0d       	add	r18, r4
      c8:	24 0d       	add	r18, r4
      ca:	24 0d       	add	r18, r4
      cc:	24 0d       	add	r18, r4
      ce:	24 0d       	add	r18, r4
      d0:	24 0d       	add	r18, r4
      d2:	24 0d       	add	r18, r4
      d4:	24 0d       	add	r18, r4
      d6:	24 0d       	add	r18, r4
      d8:	24 0d       	add	r18, r4
      da:	24 0d       	add	r18, r4
      dc:	24 0d       	add	r18, r4
      de:	24 0d       	add	r18, r4
      e0:	24 0d       	add	r18, r4
      e2:	24 0d       	add	r18, r4
      e4:	24 0d       	add	r18, r4
      e6:	24 0d       	add	r18, r4
      e8:	24 0d       	add	r18, r4
      ea:	24 0d       	add	r18, r4
      ec:	24 0d       	add	r18, r4
      ee:	24 0d       	add	r18, r4
      f0:	24 0d       	add	r18, r4
      f2:	cc 0b       	sbc	r28, r28
      f4:	24 0d       	add	r18, r4
      f6:	24 0d       	add	r18, r4
      f8:	24 0d       	add	r18, r4
      fa:	24 0d       	add	r18, r4
      fc:	24 0d       	add	r18, r4
      fe:	24 0d       	add	r18, r4
     100:	24 0d       	add	r18, r4
     102:	24 0d       	add	r18, r4
     104:	24 0d       	add	r18, r4
     106:	24 0d       	add	r18, r4
     108:	fe 0a       	sbc	r15, r30
     10a:	12 0b       	sbc	r17, r18
     10c:	24 0d       	add	r18, r4
     10e:	24 0d       	add	r18, r4
     110:	24 0d       	add	r18, r4
     112:	24 0d       	add	r18, r4
     114:	12 0b       	sbc	r17, r18
     116:	24 0d       	add	r18, r4
     118:	24 0d       	add	r18, r4
     11a:	24 0d       	add	r18, r4
     11c:	24 0d       	add	r18, r4
     11e:	24 0d       	add	r18, r4
     120:	24 0d       	add	r18, r4
     122:	cc 0b       	sbc	r28, r28
     124:	24 0d       	add	r18, r4
     126:	24 0d       	add	r18, r4
     128:	4e 0b       	sbc	r20, r30
     12a:	24 0d       	add	r18, r4
     12c:	af 0b       	sbc	r26, r31
     12e:	24 0d       	add	r18, r4
     130:	24 0d       	add	r18, r4
     132:	cc 0b       	sbc	r28, r28

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2332>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <NAME_TABLE>:
     236:	54 45 43 31 5f 42 55 43 4b 00 00 00 54 45 43 32     TEC1_BUCK...TEC2
     246:	5f 42 55 43 4b 00 00 00 54 45 43 33 5f 42 55 43     _BUCK...TEC3_BUC
     256:	4b 00 00 00 54 45 43 34 5f 42 55 43 4b 00 00 00     K...TEC4_BUCK...
     266:	4d 43 55 5f 42 55 43 4b 20 00 00 00 4c 45 44 5f     MCU_BUCK ...LED_
     276:	42 55 43 4b 20 00 00 00 43 4d 34 5f 42 55 43 4b     BUCK ...CM4_BUCK
     286:	20 00 00 00 54 45 43 31 20 20 20 20 20 00 00 00      ...TEC1     ...
     296:	54 45 43 32 20 20 20 20 20 00 00 00 54 45 43 33     TEC2     ...TEC3
     2a6:	20 20 20 20 20 00 00 00 54 45 43 34 20 20 20 20          ...TEC4    
     2b6:	20 00 00 00 43 50 4f 43 20 20 20 20 20 00 00 00      ...CPOC     ...
     2c6:	49 4f 55 20 20 20 20 20 20 00 00 00 4c 45 44 5f     IOU      ...LED_
     2d6:	52 47 42 20 20 00 00 00 4c 45 44 5f 49 52 20 20     RGB  ...LED_IR  
     2e6:	20 00 00 00 43 4d 34 20 20 20 20 20 20 00 00 00      ...CM4      ...
     2f6:	52 41 44 49 4f 20 20 20 20 00 00 00 53 55 50 45     RADIO    ...SUPE
     306:	52 43 41 50 20 00 00 00 56 42 55 53 20 20 20 20     RCAP ...VBUS    
     316:	20 00 00 00                                          ...

0000031a <SPLASH>:
     31a:	0d 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     35a:	00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     36a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     37a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     38a:	2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00 00 00     ................
     39a:	00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     3aa:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     3ba:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     3ca:	2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00 00     ................
     3da:	00 00 00 2e 2e 20 20 20 20 20 5f 5f 5f 5f 20 20     .....     ____  
     3ea:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3fa:	20 20 20 20 20 5f 20 20 20 20 20 5f 20 5f 20 20          _     _ _  
     40a:	20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00             ........
     41a:	00 00 00 00 2e 2e 20 20 20 20 2f 20 5f 5f 5f 7c     ......    / ___|
     42a:	20 5f 20 5f 5f 20 20 20 5f 5f 20 5f 20 20 5f 5f      _ __   __ _  __
     43a:	5f 20 5f 5f 5f 7c 20 7c 20 20 20 28 5f 7c 5f 29     _ ___| |   (_|_)
     44a:	5f 20 5f 5f 5f 20 20 20 20 2e 2e 0d 0a 00 00 00     _ ___    .......
     45a:	00 00 00 00 00 2e 2e 20 20 20 20 5c 5f 5f 5f 20     .......    \___ 
     46a:	5c 7c 20 27 5f 20 5c 20 2f 20 5f 60 20 7c 2f 20     \| '_ \ / _` |/ 
     47a:	5f 5f 2f 20 5f 20 5c 20 7c 20 20 20 7c 20 7c 20     __/ _ \ |   | | 
     48a:	7c 20 27 5f 20 20 5c 20 20 20 2e 2e 0d 0a 00 00     | '_  \   ......
     49a:	00 00 00 00 00 00 2e 2e 20 20 20 20 20 5f 5f 5f     ........     ___
     4aa:	29 20 7c 20 7c 5f 29 20 7c 20 28 5f 7c 20 7c 20     ) | |_) | (_| | 
     4ba:	28 5f 7c 20 20 5f 5f 2f 20 7c 5f 5f 5f 7c 20 7c     (_|  __/ |___| |
     4ca:	20 7c 20 7c 20 7c 20 7c 20 20 20 2e 2e 0d 0a 00      | | | |   .....
     4da:	00 00 00 00 00 00 00 2e 2e 20 20 20 20 7c 5f 5f     .........    |__
     4ea:	5f 5f 2f 7c 20 2e 5f 5f 2f 20 5c 5f 5f 2c 5f 7c     __/| .__/ \__,_|
     4fa:	5c 5f 5f 5f 5c 5f 5f 5f 7c 5f 5f 5f 5f 5f 7c 5f     \___\___|_____|_
     50a:	7c 5f 7c 5f 7c 20 7c 5f 7c 20 20 20 2e 2e 0d 0a     |_|_| |_|   ....
	...
     522:	2e 2e 20 20 20 20 20 20 20 20 20 20 7c 5f 7c 20     ..          |_| 
     532:	20 20 20 5f 5f 5f 5f 20 20 5f 5f 5f 5f 20 20 5f        ____  ____  _
     542:	20 20 20 5f 20 20 20 20 20 20 20 20 20 20 20 20        _            
     552:	20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00 00          ...........
     562:	00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
     572:	20 20 20 7c 20 20 5f 20 5c 7c 20 20 5f 20 5c 7c        |  _ \|  _ \|
     582:	20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20 20      | | |          
     592:	20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00           ..........
     5a2:	00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20     ....            
     5b2:	20 20 20 20 7c 20 7c 5f 29 20 7c 20 7c 20 7c 20         | |_) | | | 
     5c2:	7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20     | | | |         
     5d2:	20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00            .........
     5e2:	00 00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20     .....           
     5f2:	20 20 20 20 20 7c 20 20 5f 5f 2f 7c 20 7c 5f 7c          |  __/| |_|
     602:	20 7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20      | |_| |        
     612:	20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00             ........
     622:	00 00 00 00 2e 2e 20 20 20 20 20 20 20 20 20 20     ......          
     632:	20 20 20 20 20 20 7c 5f 7c 20 20 20 7c 5f 5f 5f           |_|   |___
     642:	5f 2f 20 5c 5f 5f 5f 2f 20 20 20 20 20 20 20 20     _/ \___/        
     652:	20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00              .......
     662:	00 00 00 00 00 2e 2e 20 20 20 20 20 20 20 20 20     .......         
     672:	20 20 20 20 20 5f 5f 20 20 20 20 20 5f 5f 5f 20          __     ___ 
     682:	20 20 5f 5f 5f 20 20 20 5f 5f 5f 20 20 20 20 20       ___   ___     
     692:	20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00 00               ......
     6a2:	00 00 00 00 00 00 2e 2e 20 20 20 20 20 20 20 20     ........        
     6b2:	20 20 20 20 20 20 5c 20 5c 20 20 20 2f 20 2f 20           \ \   / / 
     6c2:	7c 20 2f 20 5f 20 5c 20 2f 20 5f 20 5c 20 20 20     | / _ \ / _ \   
     6d2:	20 20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a 00                .....
     6e2:	00 00 00 00 00 00 00 2e 2e 20 20 20 20 20 20 20     .........       
     6f2:	20 20 20 20 20 20 20 20 5c 20 5c 20 2f 20 2f 7c             \ \ / /|
     702:	20 7c 7c 20 7c 20 7c 20 7c 20 7c 20 7c 20 7c 20      || | | | | | | 
     712:	20 20 20 20 20 20 20 20 20 20 20 20 2e 2e 0d 0a                 ....
	...
     72a:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     73a:	20 20 5c 20 56 20 2f 20 7c 20 7c 7c 20 7c 5f 7c       \ V / | || |_|
     74a:	20 7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20      | |_| |        
     75a:	20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00 00          ...........
     76a:	00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
     77a:	20 20 20 20 5c 5f 2f 20 20 7c 5f 28 5f 29 5f 5f         \_/  |_(_)__
     78a:	5f 28 5f 29 5f 5f 5f 2f 20 20 20 20 20 20 20 20     _(_)___/        
     79a:	20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00 00           ..........
     7aa:	00 00 2e 2e 20 20 20 20 20 20 20 20 20 20 20 20     ....            
     7ba:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     7ca:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     7da:	20 20 20 20 20 20 20 2e 2e 0d 0a 00 00 00 00 00            .........
     7ea:	00 00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     7fa:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     80a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     81a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00 00     ................
     82a:	00 00 00 00 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     83a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     84a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     85a:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00 00     ................
     86a:	00 00 00 00 00 00                                   ......

00000870 <__ctors_end>:
     870:	11 24       	eor	r1, r1
     872:	1f be       	out	0x3f, r1	; 63
     874:	cf ef       	ldi	r28, 0xFF	; 255
     876:	d0 e1       	ldi	r29, 0x10	; 16
     878:	de bf       	out	0x3e, r29	; 62
     87a:	cd bf       	out	0x3d, r28	; 61

0000087c <__do_copy_data>:
     87c:	13 e0       	ldi	r17, 0x03	; 3
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b1 e0       	ldi	r27, 0x01	; 1
     882:	e6 e3       	ldi	r30, 0x36	; 54
     884:	f2 e3       	ldi	r31, 0x32	; 50
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x10>
     888:	05 90       	lpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	ac 3f       	cpi	r26, 0xFC	; 252
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0xc>

00000892 <__do_clear_bss>:
     892:	28 e0       	ldi	r18, 0x08	; 8
     894:	ac ef       	ldi	r26, 0xFC	; 252
     896:	b3 e0       	ldi	r27, 0x03	; 3
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	a4 39       	cpi	r26, 0x94	; 148
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>
     8a2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <main>
     8a6:	0c 94 19 19 	jmp	0x3232	; 0x3232 <_exit>

000008aa <__bad_interrupt>:
     8aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008ae <write_threshold>:
inline void ADC_Interrupt_Dis(void) {
	ADCSRA &= ~(1<<ADIE);
}

inline void ADC_Start_Convert(void) {
	ADCSRA |= (1 < ADSC);
     8ae:	84 31       	cpi	r24, 0x14	; 20
     8b0:	48 f4       	brcc	.+18     	; 0x8c4 <write_threshold+0x16>
     8b2:	e8 2f       	mov	r30, r24
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	73 96       	adiw	r30, 0x13	; 19
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ec 50       	subi	r30, 0x0C	; 12
     8be:	fa 4f       	sbci	r31, 0xFA	; 250
     8c0:	72 a7       	std	Z+42, r23	; 0x2a
     8c2:	61 a7       	std	Z+41, r22	; 0x29
     8c4:	08 95       	ret

000008c6 <ADC_init>:
     8c6:	f8 94       	cli
     8c8:	87 e8       	ldi	r24, 0x87	; 135
     8ca:	86 b9       	out	0x06, r24	; 6
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	87 b9       	out	0x07, r24	; 7
     8d0:	86 b1       	in	r24, 0x06	; 6
     8d2:	88 60       	ori	r24, 0x08	; 8
     8d4:	86 b9       	out	0x06, r24	; 6
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <ADC_data>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <ADC_init+0x26>
     8e0:	e8 2f       	mov	r30, r24
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	ec 50       	subi	r30, 0x0C	; 12
     8e6:	fa 4f       	sbci	r31, 0xFA	; 250
     8e8:	11 82       	std	Z+1, r1	; 0x01
     8ea:	8f 5f       	subi	r24, 0xFF	; 255
     8ec:	83 31       	cpi	r24, 0x13	; 19
     8ee:	c0 f3       	brcs	.-16     	; 0x8e0 <ADC_init+0x1a>
     8f0:	61 e1       	ldi	r22, 0x11	; 17
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     8fa:	6f e5       	ldi	r22, 0x5F	; 95
     8fc:	73 e0       	ldi	r23, 0x03	; 3
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     904:	61 e1       	ldi	r22, 0x11	; 17
     906:	73 e0       	ldi	r23, 0x03	; 3
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     90e:	6f e5       	ldi	r22, 0x5F	; 95
     910:	73 e0       	ldi	r23, 0x03	; 3
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     918:	6f e5       	ldi	r22, 0x5F	; 95
     91a:	73 e0       	ldi	r23, 0x03	; 3
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     922:	61 e1       	ldi	r22, 0x11	; 17
     924:	73 e0       	ldi	r23, 0x03	; 3
     926:	85 e0       	ldi	r24, 0x05	; 5
     928:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     92c:	6f e5       	ldi	r22, 0x5F	; 95
     92e:	73 e0       	ldi	r23, 0x03	; 3
     930:	86 e0       	ldi	r24, 0x06	; 6
     932:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     936:	61 e1       	ldi	r22, 0x11	; 17
     938:	73 e0       	ldi	r23, 0x03	; 3
     93a:	87 e0       	ldi	r24, 0x07	; 7
     93c:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     940:	6f e5       	ldi	r22, 0x5F	; 95
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     94a:	6f e5       	ldi	r22, 0x5F	; 95
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	89 e0       	ldi	r24, 0x09	; 9
     950:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     954:	61 e1       	ldi	r22, 0x11	; 17
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     95e:	6f e5       	ldi	r22, 0x5F	; 95
     960:	71 e0       	ldi	r23, 0x01	; 1
     962:	8b e0       	ldi	r24, 0x0B	; 11
     964:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     968:	6f e5       	ldi	r22, 0x5F	; 95
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     972:	61 e1       	ldi	r22, 0x11	; 17
     974:	73 e0       	ldi	r23, 0x03	; 3
     976:	8d e0       	ldi	r24, 0x0D	; 13
     978:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     97c:	61 e1       	ldi	r22, 0x11	; 17
     97e:	73 e0       	ldi	r23, 0x03	; 3
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     986:	6f e5       	ldi	r22, 0x5F	; 95
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	8f e0       	ldi	r24, 0x0F	; 15
     98c:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     990:	60 e2       	ldi	r22, 0x20	; 32
     992:	73 e0       	ldi	r23, 0x03	; 3
     994:	80 e1       	ldi	r24, 0x10	; 16
     996:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     99a:	6c e5       	ldi	r22, 0x5C	; 92
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	81 e1       	ldi	r24, 0x11	; 17
     9a0:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     9a4:	60 ea       	ldi	r22, 0xA0	; 160
     9a6:	71 e0       	ldi	r23, 0x01	; 1
     9a8:	82 e1       	ldi	r24, 0x12	; 18
     9aa:	0e 94 57 04 	call	0x8ae	; 0x8ae <write_threshold>
     9ae:	0e 94 60 05 	call	0xac0	; 0xac0 <MUX_Init>
     9b2:	78 94       	sei
     9b4:	08 95       	ret

000009b6 <__vector_21>:
}
uint8_t kk;
ISR(ADC_vect)
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	cf 93       	push	r28
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
	uint8_t adc_temp = ADC_data.Channel_to_read;
     9de:	c0 91 08 06 	lds	r28, 0x0608	; 0x800608 <ADC_data+0x14>
	if(ADC_data.RAW[1][adc_temp] < ADCW) {	//OVERLOAD, OVERVOLTAGE, OVERCURRENT {
     9e2:	0c 2f       	mov	r16, r28
     9e4:	10 e0       	ldi	r17, 0x00	; 0
     9e6:	f8 01       	movw	r30, r16
     9e8:	73 96       	adiw	r30, 0x13	; 19
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ec 50       	subi	r30, 0x0C	; 12
     9f0:	fa 4f       	sbci	r31, 0xFA	; 250
     9f2:	21 a5       	ldd	r18, Z+41	; 0x29
     9f4:	32 a5       	ldd	r19, Z+42	; 0x2a
     9f6:	84 b1       	in	r24, 0x04	; 4
     9f8:	95 b1       	in	r25, 0x05	; 5
     9fa:	28 17       	cp	r18, r24
     9fc:	39 07       	cpc	r19, r25
     9fe:	88 f4       	brcc	.+34     	; 0xa22 <__vector_21+0x6c>
//		ADC_data.RAW_Status[adc_temp] = ADC_to_Erro_Mapping[adc_temp];
		ADC_data.Error_Counter[adc_temp]++;
     a00:	f8 01       	movw	r30, r16
     a02:	ec 50       	subi	r30, 0x0C	; 12
     a04:	fa 4f       	sbci	r31, 0xFA	; 250
     a06:	86 89       	ldd	r24, Z+22	; 0x16
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	86 8b       	std	Z+22, r24	; 0x16
		if(ADC_data.Error_Counter[adc_temp] > 10)
     a0c:	86 89       	ldd	r24, Z+22	; 0x16
     a0e:	8b 30       	cpi	r24, 0x0B	; 11
     a10:	70 f0       	brcs	.+28     	; 0xa2e <__vector_21+0x78>
		{
			OVER_ERR_CUTOFF(adc_temp);
     a12:	8c 2f       	mov	r24, r28
     a14:	0e 94 03 08 	call	0x1006	; 0x1006 <OVER_ERR_CUTOFF>
			ADC_data.Error_Counter[adc_temp] = 0;
     a18:	f8 01       	movw	r30, r16
     a1a:	ec 50       	subi	r30, 0x0C	; 12
     a1c:	fa 4f       	sbci	r31, 0xFA	; 250
     a1e:	16 8a       	std	Z+22, r1	; 0x16
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <__vector_21+0x78>
		}
	} else {
		ADC_data.RAW_Status[adc_temp] = READY;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	f8 01       	movw	r30, r16
     a26:	ec 50       	subi	r30, 0x0C	; 12
     a28:	fa 4f       	sbci	r31, 0xFA	; 250
     a2a:	81 83       	std	Z+1, r24	; 0x01
		ADC_data.Error_Counter[adc_temp] = 0;
     a2c:	16 8a       	std	Z+22, r1	; 0x16
	}
	ADC_data.RAW[0][adc_temp] = ADCW;
     a2e:	84 b1       	in	r24, 0x04	; 4
     a30:	95 b1       	in	r25, 0x05	; 5
     a32:	00 0f       	add	r16, r16
     a34:	11 1f       	adc	r17, r17
     a36:	f8 01       	movw	r30, r16
     a38:	ec 50       	subi	r30, 0x0C	; 12
     a3a:	fa 4f       	sbci	r31, 0xFA	; 250
     a3c:	92 a7       	std	Z+42, r25	; 0x2a
     a3e:	81 a7       	std	Z+41, r24	; 0x29
	
	adc_temp++;
     a40:	cf 5f       	subi	r28, 0xFF	; 255
	kk = adc_temp;
     a42:	c0 93 69 06 	sts	0x0669, r28	; 0x800669 <kk>
	if(adc_temp > (ANALOG_CHANNEL - 1)) {
     a46:	c3 31       	cpi	r28, 0x13	; 19
     a48:	50 f0       	brcs	.+20     	; 0xa5e <__vector_21+0xa8>
		ADMUX = 0x03;
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	87 b9       	out	0x07, r24	; 7
		MUX_Set_Channel(0);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 83 05 	call	0xb06	; 0xb06 <MUX_Set_Channel>
		adc_temp = 0;
		ADC_data.Status = DATAREADY;
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <ADC_data>
	adc_temp++;
	kk = adc_temp;
	if(adc_temp > (ANALOG_CHANNEL - 1)) {
		ADMUX = 0x03;
		MUX_Set_Channel(0);
		adc_temp = 0;
     a5a:	c0 e0       	ldi	r28, 0x00	; 0
     a5c:	18 c0       	rjmp	.+48     	; 0xa8e <__vector_21+0xd8>
		ADC_data.Status = DATAREADY;
	} else {
		if(adc_temp < 16) {
     a5e:	c0 31       	cpi	r28, 0x10	; 16
     a60:	30 f4       	brcc	.+12     	; 0xa6e <__vector_21+0xb8>
			MUX_Set_Channel(adc_temp);
     a62:	8c 2f       	mov	r24, r28
     a64:	0e 94 83 05 	call	0xb06	; 0xb06 <MUX_Set_Channel>
			ADMUX = 0x03;
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	87 b9       	out	0x07, r24	; 7
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <__vector_21+0xd2>
		}
		else if(adc_temp == 16)	
     a6e:	c0 31       	cpi	r28, 0x10	; 16
     a70:	11 f4       	brne	.+4      	; 0xa76 <__vector_21+0xc0>
			ADMUX = 0x00;
     a72:	17 b8       	out	0x07, r1	; 7
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <__vector_21+0xd2>
		else if(adc_temp == 17)
     a76:	c1 31       	cpi	r28, 0x11	; 17
     a78:	19 f4       	brne	.+6      	; 0xa80 <__vector_21+0xca>
			ADMUX = 0x01;	
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	87 b9       	out	0x07, r24	; 7
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__vector_21+0xd2>
		else if(adc_temp == 18)
     a80:	c2 31       	cpi	r28, 0x12	; 18
     a82:	11 f4       	brne	.+4      	; 0xa88 <__vector_21+0xd2>
			ADMUX = 0x02;	
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	87 b9       	out	0x07, r24	; 7
		
		ADC_data.Status = WAIT;
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <ADC_data>
	}

	ADC_data.Channel_to_read = adc_temp;
     a8e:	e4 ef       	ldi	r30, 0xF4	; 244
     a90:	f5 e0       	ldi	r31, 0x05	; 5
     a92:	c4 8b       	std	Z+20, r28	; 0x14
	ADC_data.Wait = MUX_WAIT_FOR_STABLE;
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	85 8b       	std	Z+21, r24	; 0x15
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	cf 91       	pop	r28
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <MUX_Init>:
#include "HC4067.h"
#include "PDU_board.h"

void MUX_Init(){
	
	MUX_A0_DDR |= (1<<MUX_A0_PIN);
     ac0:	82 b1       	in	r24, 0x02	; 2
     ac2:	84 60       	ori	r24, 0x04	; 4
     ac4:	82 b9       	out	0x02, r24	; 2
	MUX_A1_DDR |= (1<<MUX_A1_PIN);
     ac6:	82 b1       	in	r24, 0x02	; 2
     ac8:	88 60       	ori	r24, 0x08	; 8
     aca:	82 b9       	out	0x02, r24	; 2
	MUX_A2_DDR |= (1<<MUX_A2_PIN);
     acc:	82 b1       	in	r24, 0x02	; 2
     ace:	80 62       	ori	r24, 0x20	; 32
     ad0:	82 b9       	out	0x02, r24	; 2
	MUX_A3_DDR |= (1<<MUX_A3_PIN);
     ad2:	82 b1       	in	r24, 0x02	; 2
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	82 b9       	out	0x02, r24	; 2
	MUX_OUT_DDR &= ~(1<<MUX_OUT_PIN);
     ad8:	e1 e6       	ldi	r30, 0x61	; 97
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	87 7f       	andi	r24, 0xF7	; 247
     ae0:	80 83       	st	Z, r24
	#waring "Using MUX_ENABLE"
		MUX_EN_DDR |= (1<<MUX_EN_PIN);
		MUX_EN_PORT &= ~(1<<MUX_EN_PIN);
	#endif
	
	MUX_A0_PORT &= ~(1<<MUX_A0_PIN);
     ae2:	83 b1       	in	r24, 0x03	; 3
     ae4:	8b 7f       	andi	r24, 0xFB	; 251
     ae6:	83 b9       	out	0x03, r24	; 3
	MUX_A1_PORT &= ~(1<<MUX_A1_PIN);
     ae8:	83 b1       	in	r24, 0x03	; 3
     aea:	87 7f       	andi	r24, 0xF7	; 247
     aec:	83 b9       	out	0x03, r24	; 3
	MUX_A2_PORT &= ~(1<<MUX_A2_PIN);
     aee:	83 b1       	in	r24, 0x03	; 3
     af0:	8f 7d       	andi	r24, 0xDF	; 223
     af2:	83 b9       	out	0x03, r24	; 3
	MUX_A3_PORT &= ~(1<<MUX_A3_PIN);
     af4:	83 b1       	in	r24, 0x03	; 3
     af6:	8f 7e       	andi	r24, 0xEF	; 239
     af8:	83 b9       	out	0x03, r24	; 3
	MUX_OUT_PORT &= ~(1<<MUX_OUT_PIN);
     afa:	e2 e6       	ldi	r30, 0x62	; 98
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 83       	st	Z, r24
     b04:	08 95       	ret

00000b06 <MUX_Set_Channel>:
	
	#ifdef MUX_EN_PORT
		MUX_EN_PORT |= (1<<MUX_EN_PIN);
	#endif

	if(channel & 0x01)	
     b06:	80 ff       	sbrs	r24, 0
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <MUX_Set_Channel+0xc>
		MUX_A0_PORT |= (1<<MUX_A0_PIN);
     b0a:	93 b1       	in	r25, 0x03	; 3
     b0c:	94 60       	ori	r25, 0x04	; 4
     b0e:	93 b9       	out	0x03, r25	; 3
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <MUX_Set_Channel+0x12>
	else			
		MUX_A0_PORT &= ~(1<<MUX_A0_PIN);
     b12:	93 b1       	in	r25, 0x03	; 3
     b14:	9b 7f       	andi	r25, 0xFB	; 251
     b16:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x02)
     b18:	81 ff       	sbrs	r24, 1
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <MUX_Set_Channel+0x1e>
		MUX_A1_PORT |= (1<<MUX_A1_PIN);
     b1c:	93 b1       	in	r25, 0x03	; 3
     b1e:	98 60       	ori	r25, 0x08	; 8
     b20:	93 b9       	out	0x03, r25	; 3
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <MUX_Set_Channel+0x24>
	else
		MUX_A1_PORT &= ~(1<<MUX_A1_PIN);
     b24:	93 b1       	in	r25, 0x03	; 3
     b26:	97 7f       	andi	r25, 0xF7	; 247
     b28:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x04)
     b2a:	82 ff       	sbrs	r24, 2
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <MUX_Set_Channel+0x30>
		MUX_A2_PORT |= (1<<MUX_A2_PIN);
     b2e:	93 b1       	in	r25, 0x03	; 3
     b30:	90 62       	ori	r25, 0x20	; 32
     b32:	93 b9       	out	0x03, r25	; 3
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <MUX_Set_Channel+0x36>
	else
		MUX_A2_PORT &= ~(1<<MUX_A2_PIN);
     b36:	93 b1       	in	r25, 0x03	; 3
     b38:	9f 7d       	andi	r25, 0xDF	; 223
     b3a:	93 b9       	out	0x03, r25	; 3
		
	if(channel & 0x08)
     b3c:	83 ff       	sbrs	r24, 3
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <MUX_Set_Channel+0x42>
		MUX_A3_PORT |= (1<<MUX_A3_PIN);
     b40:	83 b1       	in	r24, 0x03	; 3
     b42:	80 61       	ori	r24, 0x10	; 16
     b44:	83 b9       	out	0x03, r24	; 3
     b46:	08 95       	ret
	else
		MUX_A3_PORT &= ~(1<<MUX_A3_PIN);
     b48:	83 b1       	in	r24, 0x03	; 3
     b4a:	8f 7e       	andi	r24, 0xEF	; 239
     b4c:	83 b9       	out	0x03, r24	; 3
     b4e:	08 95       	ret

00000b50 <COPC_task_update>:
}

static void COPC_task_update(void)
{
	char rxData;
	while (! rbuffer_empty(p_COPCBuffer))
     b50:	0a c0       	rjmp	.+20     	; 0xb66 <COPC_task_update+0x16>
	{

		rxData = rbuffer_remove(p_COPCBuffer);
     b52:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <p_COPCBuffer>
     b56:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <p_COPCBuffer+0x1>
     b5a:	0e 94 9a 08 	call	0x1134	; 0x1134 <rbuffer_remove>
		switch ( fsp_decode(rxData,&s_COPC_FspPacket))
     b5e:	6c ef       	ldi	r22, 0xFC	; 252
     b60:	73 e0       	ldi	r23, 0x03	; 3
     b62:	0e 94 af 11 	call	0x235e	; 0x235e <fsp_decode>
}

static void COPC_task_update(void)
{
	char rxData;
	while (! rbuffer_empty(p_COPCBuffer))
     b66:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <p_COPCBuffer>
     b6a:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <p_COPCBuffer+0x1>
     b6e:	0e 94 76 08 	call	0x10ec	; 0x10ec <rbuffer_empty>
     b72:	88 23       	and	r24, r24
     b74:	71 f3       	breq	.-36     	; 0xb52 <COPC_task_update+0x2>

	           break;
			
		}
	}
}
     b76:	08 95       	ret

00000b78 <COPC_init>:
};


void	COPC_init(void)
{	
	usart0_init();
     b78:	0e 94 b7 08 	call	0x116e	; 0x116e <usart0_init>
	fsp_init(PDU_ADDRESS);
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	0e 94 aa 11 	call	0x2354	; 0x2354 <fsp_init>
	p_COPCBuffer = uart_get_uart0_rx_buffer_address();
     b82:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <uart_get_uart0_rx_buffer_address>
     b86:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <p_COPCBuffer+0x1>
     b8a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <p_COPCBuffer>
     b8e:	08 95       	ret

00000b90 <COPC_create_task>:
	}
}

void	COPC_create_task(void)
{
	COPC_init();
     b90:	0e 94 bc 05 	call	0xb78	; 0xb78 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <SCH_TASK_CreateTask>
     ba0:	08 95       	ret

00000ba2 <status_led_led1_off>:
static void status_led_led2_on(void);
static void status_led_led2_off(void);
static	void	status_led_powerup(void);
void	status_led_set_status(Led_DisplayStateTypedef status)
{
	s_led_display_status.state = status;
     ba2:	82 b3       	in	r24, 0x12	; 18
     ba4:	80 64       	ori	r24, 0x40	; 64
     ba6:	82 bb       	out	0x12, r24	; 18
     ba8:	08 95       	ret

00000baa <status_led_led1_on>:
     baa:	82 b3       	in	r24, 0x12	; 18
     bac:	8f 7b       	andi	r24, 0xBF	; 191
     bae:	82 bb       	out	0x12, r24	; 18
     bb0:	08 95       	ret

00000bb2 <status_led_led2_off>:
     bb2:	82 b3       	in	r24, 0x12	; 18
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	82 bb       	out	0x12, r24	; 18
     bb8:	08 95       	ret

00000bba <status_led_led2_on>:
     bba:	82 b3       	in	r24, 0x12	; 18
     bbc:	8f 77       	andi	r24, 0x7F	; 127
     bbe:	82 bb       	out	0x12, r24	; 18
     bc0:	08 95       	ret

00000bc2 <status_led_powerup>:
     bc2:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     bc6:	98 2f       	mov	r25, r24
     bc8:	91 70       	andi	r25, 0x01	; 1
     bca:	80 ff       	sbrs	r24, 0
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <status_led_powerup+0x38>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
     bd4:	88 23       	and	r24, r24
     bd6:	c9 f1       	breq	.+114    	; 0xc4a <status_led_powerup+0x88>
     bd8:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <s_led_display_status>
     be2:	0e 94 d1 05 	call	0xba2	; 0xba2 <status_led_led1_off>
     be6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <status_led_led2_off>
     bea:	48 ee       	ldi	r20, 0xE8	; 232
     bec:	53 e0       	ldi	r21, 0x03	; 3
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
     bf8:	08 95       	ret
     bfa:	91 11       	cpse	r25, r1
     bfc:	16 c0       	rjmp	.+44     	; 0xc2a <status_led_powerup+0x68>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
     c04:	88 23       	and	r24, r24
     c06:	09 f1       	breq	.+66     	; 0xc4a <status_led_powerup+0x88>
     c08:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <s_led_display_status>
     c12:	0e 94 d5 05 	call	0xbaa	; 0xbaa <status_led_led1_on>
     c16:	0e 94 dd 05 	call	0xbba	; 0xbba <status_led_led2_on>
     c1a:	48 ee       	ldi	r20, 0xE8	; 232
     c1c:	53 e0       	ldi	r21, 0x03	; 3
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
     c28:	08 95       	ret
     c2a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <s_led_display_status>
     c34:	0e 94 d1 05 	call	0xba2	; 0xba2 <status_led_led1_off>
     c38:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <status_led_led2_off>
     c3c:	48 ee       	ldi	r20, 0xE8	; 232
     c3e:	53 e0       	ldi	r21, 0x03	; 3
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
     c4a:	08 95       	ret

00000c4c <status_led_normal>:
     c4c:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     c50:	98 2f       	mov	r25, r24
     c52:	91 70       	andi	r25, 0x01	; 1
     c54:	80 ff       	sbrs	r24, 0
     c56:	14 c0       	rjmp	.+40     	; 0xc80 <status_led_normal+0x34>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
     c5e:	88 23       	and	r24, r24
     c60:	21 f1       	breq	.+72     	; 0xcaa <status_led_normal+0x5e>
     c62:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <s_led_display_status>
     c6c:	0e 94 d1 05 	call	0xba2	; 0xba2 <status_led_led1_off>
     c70:	48 eb       	ldi	r20, 0xB8	; 184
     c72:	5b e0       	ldi	r21, 0x0B	; 11
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
     c7e:	08 95       	ret
     c80:	99 23       	and	r25, r25
     c82:	99 f0       	breq	.+38     	; 0xcaa <status_led_normal+0x5e>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
     c8a:	88 23       	and	r24, r24
     c8c:	71 f0       	breq	.+28     	; 0xcaa <status_led_normal+0x5e>
     c8e:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     c92:	81 60       	ori	r24, 0x01	; 1
     c94:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <s_led_display_status>
     c98:	0e 94 d5 05 	call	0xbaa	; 0xbaa <status_led_led1_on>
     c9c:	44 ef       	ldi	r20, 0xF4	; 244
     c9e:	51 e0       	ldi	r21, 0x01	; 1
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
     caa:	08 95       	ret

00000cac <status_led_update>:
     cac:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <s_led_display_status>
     cb0:	86 95       	lsr	r24
     cb2:	86 95       	lsr	r24
     cb4:	19 f0       	breq	.+6      	; 0xcbc <status_led_update+0x10>
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	21 f0       	breq	.+8      	; 0xcc2 <status_led_update+0x16>
     cba:	08 95       	ret
     cbc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <status_led_powerup>
     cc0:	08 95       	ret
     cc2:	0e 94 26 06 	call	0xc4c	; 0xc4c <status_led_normal>
     cc6:	08 95       	ret

00000cc8 <status_led_init>:
}

void status_led_init(void)
{
	LED1_DIR_PORT |= (1 << LED1_PIN);
     cc8:	81 b3       	in	r24, 0x11	; 17
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	81 bb       	out	0x11, r24	; 17
	LED1_DATA_PORT &= ~((1 << LED1_PIN));
     cce:	82 b3       	in	r24, 0x12	; 18
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	82 bb       	out	0x12, r24	; 18
	LED2_DIR_PORT |= (1 << LED2_PIN);
     cd4:	81 b3       	in	r24, 0x11	; 17
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	81 bb       	out	0x11, r24	; 17
	LED2_DATA_PORT &= ~((1 << LED2_PIN));	
     cda:	82 b3       	in	r24, 0x12	; 18
     cdc:	8f 77       	andi	r24, 0x7F	; 127
     cde:	82 bb       	out	0x12, r24	; 18
	s_led_display_status.led1 = 0;
	s_led_display_status.led2 = 0;
	s_led_display_status.state = POWERUP;
     ce0:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <s_led_display_status>
	status_led_led1_off();
     ce4:	0e 94 d1 05 	call	0xba2	; 0xba2 <status_led_led1_off>
	status_led_led2_off();
     ce8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <status_led_led2_off>
     cec:	08 95       	ret

00000cee <status_led_create_task>:
	}
}

void	status_led_create_task(void)
{
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
     cee:	68 e0       	ldi	r22, 0x08	; 8
     cf0:	71 e0       	ldi	r23, 0x01	; 1
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <SCH_TASK_CreateTask>
     cfa:	08 95       	ret

00000cfc <main>:
#include <util/delay.h>


int main(void)
{
	status_led_init();
     cfc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <status_led_init>
	usart0_init();
     d00:	0e 94 b7 08 	call	0x116e	; 0x116e <usart0_init>
	
//	usart1_init();
	SCH_Initialize();
     d04:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <SCH_Initialize>
	status_led_create_task();
     d08:	0e 94 77 06 	call	0xcee	; 0xcee <status_led_create_task>
	COPC_init();
     d0c:	0e 94 bc 05 	call	0xb78	; 0xb78 <COPC_init>
	COPC_create_task();
     d10:	0e 94 c8 05 	call	0xb90	; 0xb90 <COPC_create_task>
	command_init();
     d14:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <command_init>
	command_create_task();	
     d18:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <command_create_task>
	WDT_init();
     d1c:	0e 94 38 08 	call	0x1070	; 0x1070 <WDT_init>
	SCH_StartSchedular();
     d20:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SCH_StartSchedular>
	ADC_init();
     d24:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_init>

	POWER_IO_init();
     d28:	0e 94 54 07 	call	0xea8	; 0xea8 <POWER_IO_init>

    while (1) 
    {
		SCH_HandleScheduledTask();
     d2c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <SCH_HandleScheduledTask>
		if(ADC_data.Status == DATAREADY) {
     d30:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <ADC_data>
     d34:	85 30       	cpi	r24, 0x05	; 5
     d36:	19 f4       	brne	.+6      	; 0xd3e <main+0x42>
// 			for(uint8_t i = 0 ; i < 18 ; i ++)
// 				UARTprintf("%d ", ADC_data.RAW[0][i]);
// 			UARTprintf("%d \r\n", ADC_data.RAW[0][18]);
// 			_delay_ms(1000);
			ADC_data.Status = WAIT;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <ADC_data>
		}
		if(Error_Flag)	
     d3e:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <Error_Flag>
     d42:	88 23       	and	r24, r24
     d44:	99 f3       	breq	.-26     	; 0xd2c <main+0x30>
		{
			UARTprintf("Error detected !\r\n");
     d46:	8d ea       	ldi	r24, 0xAD	; 173
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <UARTprintf>
			Error_Flag = 0;
     d52:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <Error_Flag>
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	e8 cf       	rjmp	.-48     	; 0xd2c <main+0x30>

00000d5c <TEC1_Buck_On>:
void RADIO_Off()		{ RADIO_PWR_EN_PORT &= ~(1<<RADIO_PWR_EN_PIN);	}
void CM4_On()			{ CM4_PWR_EN_PORT |= (1<<CM4_PWR_EN_PIN);		}
void CM4_Off()			{ CM4_PWR_EN_PORT &= ~(1<<CM4_PWR_EN_PIN);		}	

void HDRM_On()			{ HDRM_PORT |= (1<<HDRM_PIN);					}
void HDRM_Off()			{ HDRM_PORT &= ~(1<<HDRM_PIN);					}
     d5c:	8b b3       	in	r24, 0x1b	; 27
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	8b bb       	out	0x1b, r24	; 27
     d62:	08 95       	ret

00000d64 <TEC1_Buck_Off>:
     d64:	8b b3       	in	r24, 0x1b	; 27
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	8b bb       	out	0x1b, r24	; 27
     d6a:	08 95       	ret

00000d6c <TEC2_Buck_On>:
     d6c:	8b b3       	in	r24, 0x1b	; 27
     d6e:	88 60       	ori	r24, 0x08	; 8
     d70:	8b bb       	out	0x1b, r24	; 27
     d72:	08 95       	ret

00000d74 <TEC2_Buck_Off>:
     d74:	8b b3       	in	r24, 0x1b	; 27
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	8b bb       	out	0x1b, r24	; 27
     d7a:	08 95       	ret

00000d7c <TEC3_Buck_On>:
     d7c:	8b b3       	in	r24, 0x1b	; 27
     d7e:	80 62       	ori	r24, 0x20	; 32
     d80:	8b bb       	out	0x1b, r24	; 27
     d82:	08 95       	ret

00000d84 <TEC3_Buck_Off>:
     d84:	8b b3       	in	r24, 0x1b	; 27
     d86:	8f 7d       	andi	r24, 0xDF	; 223
     d88:	8b bb       	out	0x1b, r24	; 27
     d8a:	08 95       	ret

00000d8c <TEC4_Buck_On>:
     d8c:	e5 e6       	ldi	r30, 0x65	; 101
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	84 60       	ori	r24, 0x04	; 4
     d94:	80 83       	st	Z, r24
     d96:	08 95       	ret

00000d98 <TEC4_Buck_Off>:
     d98:	e5 e6       	ldi	r30, 0x65	; 101
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8b 7f       	andi	r24, 0xFB	; 251
     da0:	80 83       	st	Z, r24
     da2:	08 95       	ret

00000da4 <LED_Buck_On>:
     da4:	85 b3       	in	r24, 0x15	; 21
     da6:	80 61       	ori	r24, 0x10	; 16
     da8:	85 bb       	out	0x15, r24	; 21
     daa:	08 95       	ret

00000dac <LED_Buck_Off>:
     dac:	85 b3       	in	r24, 0x15	; 21
     dae:	8f 7e       	andi	r24, 0xEF	; 239
     db0:	85 bb       	out	0x15, r24	; 21
     db2:	08 95       	ret

00000db4 <CM4_Buck_On>:
     db4:	85 b3       	in	r24, 0x15	; 21
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	85 bb       	out	0x15, r24	; 21
     dba:	08 95       	ret

00000dbc <CM4_Buck_Off>:
     dbc:	85 b3       	in	r24, 0x15	; 21
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	85 bb       	out	0x15, r24	; 21
     dc2:	08 95       	ret

00000dc4 <MCU_Buck_On>:
     dc4:	85 b3       	in	r24, 0x15	; 21
     dc6:	88 60       	ori	r24, 0x08	; 8
     dc8:	85 bb       	out	0x15, r24	; 21
     dca:	08 95       	ret

00000dcc <MCU_Buck_Off>:
     dcc:	85 b3       	in	r24, 0x15	; 21
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	85 bb       	out	0x15, r24	; 21
     dd2:	08 95       	ret

00000dd4 <TEC1_On>:
     dd4:	8b b3       	in	r24, 0x1b	; 27
     dd6:	82 60       	ori	r24, 0x02	; 2
     dd8:	8b bb       	out	0x1b, r24	; 27
     dda:	08 95       	ret

00000ddc <TEC1_Off>:
     ddc:	8b b3       	in	r24, 0x1b	; 27
     dde:	8d 7f       	andi	r24, 0xFD	; 253
     de0:	8b bb       	out	0x1b, r24	; 27
     de2:	08 95       	ret

00000de4 <TEC2_On>:
     de4:	8b b3       	in	r24, 0x1b	; 27
     de6:	84 60       	ori	r24, 0x04	; 4
     de8:	8b bb       	out	0x1b, r24	; 27
     dea:	08 95       	ret

00000dec <TEC2_Off>:
     dec:	8b b3       	in	r24, 0x1b	; 27
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8b bb       	out	0x1b, r24	; 27
     df2:	08 95       	ret

00000df4 <TEC3_On>:
     df4:	8b b3       	in	r24, 0x1b	; 27
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	8b bb       	out	0x1b, r24	; 27
     dfa:	08 95       	ret

00000dfc <TEC3_Off>:
     dfc:	8b b3       	in	r24, 0x1b	; 27
     dfe:	8f 7e       	andi	r24, 0xEF	; 239
     e00:	8b bb       	out	0x1b, r24	; 27
     e02:	08 95       	ret

00000e04 <TEC4_On>:
     e04:	8b b3       	in	r24, 0x1b	; 27
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	8b bb       	out	0x1b, r24	; 27
     e0a:	08 95       	ret

00000e0c <TEC4_Off>:
     e0c:	8b b3       	in	r24, 0x1b	; 27
     e0e:	8f 7b       	andi	r24, 0xBF	; 191
     e10:	8b bb       	out	0x1b, r24	; 27
     e12:	08 95       	ret

00000e14 <IOU_On>:
     e14:	85 b3       	in	r24, 0x15	; 21
     e16:	80 64       	ori	r24, 0x40	; 64
     e18:	85 bb       	out	0x15, r24	; 21
     e1a:	08 95       	ret

00000e1c <IOU_Off>:
     e1c:	85 b3       	in	r24, 0x15	; 21
     e1e:	8f 7b       	andi	r24, 0xBF	; 191
     e20:	85 bb       	out	0x15, r24	; 21
     e22:	08 95       	ret

00000e24 <COPC_On>:
     e24:	85 b3       	in	r24, 0x15	; 21
     e26:	80 62       	ori	r24, 0x20	; 32
     e28:	85 bb       	out	0x15, r24	; 21
     e2a:	08 95       	ret

00000e2c <COPC_Off>:
     e2c:	85 b3       	in	r24, 0x15	; 21
     e2e:	8f 7d       	andi	r24, 0xDF	; 223
     e30:	85 bb       	out	0x15, r24	; 21
     e32:	08 95       	ret

00000e34 <LEDIR_On>:
     e34:	8b b3       	in	r24, 0x1b	; 27
     e36:	80 68       	ori	r24, 0x80	; 128
     e38:	8b bb       	out	0x1b, r24	; 27
     e3a:	08 95       	ret

00000e3c <LEDIR_Off>:
     e3c:	8b b3       	in	r24, 0x1b	; 27
     e3e:	8f 77       	andi	r24, 0x7F	; 127
     e40:	8b bb       	out	0x1b, r24	; 27
     e42:	08 95       	ret

00000e44 <LEDRGB_On>:
     e44:	85 b3       	in	r24, 0x15	; 21
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	85 bb       	out	0x15, r24	; 21
     e4a:	08 95       	ret

00000e4c <LEDRGB_Off>:
     e4c:	85 b3       	in	r24, 0x15	; 21
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	85 bb       	out	0x15, r24	; 21
     e52:	08 95       	ret

00000e54 <RADIO_On>:
     e54:	e5 e6       	ldi	r30, 0x65	; 101
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	80 83       	st	Z, r24
     e5e:	08 95       	ret

00000e60 <RADIO_Off>:
     e60:	e5 e6       	ldi	r30, 0x65	; 101
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8e 7f       	andi	r24, 0xFE	; 254
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret

00000e6c <CM4_On>:
     e6c:	e5 e6       	ldi	r30, 0x65	; 101
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	80 83       	st	Z, r24
     e76:	08 95       	ret

00000e78 <CM4_Off>:
     e78:	e5 e6       	ldi	r30, 0x65	; 101
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	80 83       	st	Z, r24
     e82:	08 95       	ret

00000e84 <CAPC_On>:
     e84:	88 b3       	in	r24, 0x18	; 24
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	88 bb       	out	0x18, r24	; 24
     e8a:	08 95       	ret

00000e8c <CAPC_Off>:
     e8c:	88 b3       	in	r24, 0x18	; 24
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	88 bb       	out	0x18, r24	; 24
     e92:	08 95       	ret

00000e94 <VBUS_Low>:
     e94:	80 ec       	ldi	r24, 0xC0	; 192
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
     e9c:	08 95       	ret

00000e9e <VBUS_High>:
     e9e:	80 ed       	ldi	r24, 0xD0	; 208
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
     ea6:	08 95       	ret

00000ea8 <POWER_IO_init>:
     ea8:	88 b3       	in	r24, 0x18	; 24
     eaa:	8f 7b       	andi	r24, 0xBF	; 191
     eac:	88 bb       	out	0x18, r24	; 24
     eae:	88 b3       	in	r24, 0x18	; 24
     eb0:	8f 77       	andi	r24, 0x7F	; 127
     eb2:	88 bb       	out	0x18, r24	; 24
     eb4:	87 b3       	in	r24, 0x17	; 23
     eb6:	80 64       	ori	r24, 0x40	; 64
     eb8:	87 bb       	out	0x17, r24	; 23
     eba:	87 b3       	in	r24, 0x17	; 23
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	87 bb       	out	0x17, r24	; 23
     ec0:	8b b3       	in	r24, 0x1b	; 27
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	8b bb       	out	0x1b, r24	; 27
     ec6:	8b b3       	in	r24, 0x1b	; 27
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	8b bb       	out	0x1b, r24	; 27
     ecc:	8b b3       	in	r24, 0x1b	; 27
     ece:	8f 7d       	andi	r24, 0xDF	; 223
     ed0:	8b bb       	out	0x1b, r24	; 27
     ed2:	e5 e6       	ldi	r30, 0x65	; 101
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8b 7f       	andi	r24, 0xFB	; 251
     eda:	80 83       	st	Z, r24
     edc:	85 b3       	in	r24, 0x15	; 21
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	85 bb       	out	0x15, r24	; 21
     ee2:	85 b3       	in	r24, 0x15	; 21
     ee4:	8e 7f       	andi	r24, 0xFE	; 254
     ee6:	85 bb       	out	0x15, r24	; 21
     ee8:	85 b3       	in	r24, 0x15	; 21
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	85 bb       	out	0x15, r24	; 21
     eee:	8b b3       	in	r24, 0x1b	; 27
     ef0:	8d 7f       	andi	r24, 0xFD	; 253
     ef2:	8b bb       	out	0x1b, r24	; 27
     ef4:	8b b3       	in	r24, 0x1b	; 27
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	8b bb       	out	0x1b, r24	; 27
     efa:	8b b3       	in	r24, 0x1b	; 27
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	8b bb       	out	0x1b, r24	; 27
     f00:	8b b3       	in	r24, 0x1b	; 27
     f02:	8f 7b       	andi	r24, 0xBF	; 191
     f04:	8b bb       	out	0x1b, r24	; 27
     f06:	85 b3       	in	r24, 0x15	; 21
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	85 bb       	out	0x15, r24	; 21
     f0c:	85 b3       	in	r24, 0x15	; 21
     f0e:	8f 7d       	andi	r24, 0xDF	; 223
     f10:	85 bb       	out	0x15, r24	; 21
     f12:	8b b3       	in	r24, 0x1b	; 27
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8b bb       	out	0x1b, r24	; 27
     f18:	85 b3       	in	r24, 0x15	; 21
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	85 bb       	out	0x15, r24	; 21
     f1e:	80 81       	ld	r24, Z
     f20:	8d 7f       	andi	r24, 0xFD	; 253
     f22:	80 83       	st	Z, r24
     f24:	80 81       	ld	r24, Z
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	80 83       	st	Z, r24
     f2a:	8a b3       	in	r24, 0x1a	; 26
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	8a bb       	out	0x1a, r24	; 26
     f30:	8a b3       	in	r24, 0x1a	; 26
     f32:	88 60       	ori	r24, 0x08	; 8
     f34:	8a bb       	out	0x1a, r24	; 26
     f36:	8a b3       	in	r24, 0x1a	; 26
     f38:	80 62       	ori	r24, 0x20	; 32
     f3a:	8a bb       	out	0x1a, r24	; 26
     f3c:	e4 e6       	ldi	r30, 0x64	; 100
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	80 83       	st	Z, r24
     f46:	84 b3       	in	r24, 0x14	; 20
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	84 bb       	out	0x14, r24	; 20
     f4c:	84 b3       	in	r24, 0x14	; 20
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	84 bb       	out	0x14, r24	; 20
     f52:	84 b3       	in	r24, 0x14	; 20
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	84 bb       	out	0x14, r24	; 20
     f58:	8a b3       	in	r24, 0x1a	; 26
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	8a bb       	out	0x1a, r24	; 26
     f5e:	8a b3       	in	r24, 0x1a	; 26
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	8a bb       	out	0x1a, r24	; 26
     f64:	8a b3       	in	r24, 0x1a	; 26
     f66:	80 61       	ori	r24, 0x10	; 16
     f68:	8a bb       	out	0x1a, r24	; 26
     f6a:	8a b3       	in	r24, 0x1a	; 26
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	8a bb       	out	0x1a, r24	; 26
     f70:	84 b3       	in	r24, 0x14	; 20
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	84 bb       	out	0x14, r24	; 20
     f76:	84 b3       	in	r24, 0x14	; 20
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	84 bb       	out	0x14, r24	; 20
     f7c:	8a b3       	in	r24, 0x1a	; 26
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8a bb       	out	0x1a, r24	; 26
     f82:	84 b3       	in	r24, 0x14	; 20
     f84:	80 68       	ori	r24, 0x80	; 128
     f86:	84 bb       	out	0x14, r24	; 20
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	80 83       	st	Z, r24
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <POWER_IO_init+0xfc>
     f98:	e8 2f       	mov	r30, r24
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	e6 59       	subi	r30, 0x96	; 150
     f9e:	f9 4f       	sbci	r31, 0xF9	; 249
     fa0:	10 82       	st	Z, r1
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	83 31       	cpi	r24, 0x13	; 19
     fa6:	c0 f3       	brcs	.-16     	; 0xf98 <POWER_IO_init+0xf0>
     fa8:	08 95       	ret

00000faa <POWER_ACTIVATE>:
				
void VBUS_Low()			{ usart1_send_string("VBUS IS TOO LOW");		}
void VBUS_High()			{ usart1_send_string("VBUS IS TOO HIGH");		}
	
uint8_t POWER_ACTIVATE(uint8_t channel, uint8_t state) {
	if(channel > (POWERIO_CHANNEL - 1))	return 0;
     faa:	83 31       	cpi	r24, 0x13	; 19
     fac:	50 f5       	brcc	.+84     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
	if(state)
     fae:	66 23       	and	r22, r22
     fb0:	59 f0       	breq	.+22     	; 0xfc8 <POWER_ACTIVATE+0x1e>
		CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]] = ON;
     fb2:	e8 2f       	mov	r30, r24
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	ea 5f       	subi	r30, 0xFA	; 250
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	e0 81       	ld	r30, Z
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	e6 59       	subi	r30, 0x96	; 150
     fc0:	f9 4f       	sbci	r31, 0xF9	; 249
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	90 83       	st	Z, r25
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <POWER_ACTIVATE+0x30>
	else
		CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]] = OFF;
     fc8:	e8 2f       	mov	r30, r24
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ea 5f       	subi	r30, 0xFA	; 250
     fce:	fd 4f       	sbci	r31, 0xFD	; 253
     fd0:	e0 81       	ld	r30, Z
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e6 59       	subi	r30, 0x96	; 150
     fd6:	f9 4f       	sbci	r31, 0xF9	; 249
     fd8:	10 82       	st	Z, r1
		
	function_array[cmd_to_channel_mapping[channel]][state]();
     fda:	e8 2f       	mov	r30, r24
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	ea 5f       	subi	r30, 0xFA	; 250
     fe0:	fd 4f       	sbci	r31, 0xFD	; 253
     fe2:	e0 81       	ld	r30, Z
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	e6 0f       	add	r30, r22
     fec:	f1 1d       	adc	r31, r1
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e2 5f       	subi	r30, 0xF2	; 242
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	01 90       	ld	r0, Z+
     ff8:	f0 81       	ld	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	09 95       	icall
	return 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	08 95       	ret
				
void VBUS_Low()			{ usart1_send_string("VBUS IS TOO LOW");		}
void VBUS_High()			{ usart1_send_string("VBUS IS TOO HIGH");		}
	
uint8_t POWER_ACTIVATE(uint8_t channel, uint8_t state) {
	if(channel > (POWERIO_CHANNEL - 1))	return 0;
    1002:	80 e0       	ldi	r24, 0x00	; 0
	else
		CHANNEL_STATUS_TABLE[cmd_to_channel_mapping[channel]] = OFF;
		
	function_array[cmd_to_channel_mapping[channel]][state]();
	return 1;
}
    1004:	08 95       	ret

00001006 <OVER_ERR_CUTOFF>:

void OVER_ERR_CUTOFF(uint8_t channel) {
	if(channel > (POWERIO_CHANNEL - 1))	return;
    1006:	83 31       	cpi	r24, 0x13	; 19
    1008:	48 f4       	brcc	.+18     	; 0x101c <OVER_ERR_CUTOFF+0x16>
//	function_array[channel][0]();
	CHANNEL_STATUS_TABLE[channel] = ADC_to_Erro_Mapping[channel];
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	fc 01       	movw	r30, r24
    100e:	e6 56       	subi	r30, 0x66	; 102
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	20 81       	ld	r18, Z
    1014:	fc 01       	movw	r30, r24
    1016:	e6 59       	subi	r30, 0x96	; 150
    1018:	f9 4f       	sbci	r31, 0xF9	; 249
    101a:	20 83       	st	Z, r18
    101c:	08 95       	ret

0000101e <status_wdt_update>:
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
}

void	status_wdt_update(void)
{
		if (WDT_Current){
    101e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <WDT_Current>
    1022:	88 23       	and	r24, r24
    1024:	91 f0       	breq	.+36     	; 0x104a <status_wdt_update+0x2c>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
    102c:	88 23       	and	r24, r24
    102e:	f9 f0       	breq	.+62     	; 0x106e <status_wdt_update+0x50>
			{
				WDT_Current = 0;
    1030:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <WDT_Current>
				TPL5010_DONE_PORT &= ~(1 << TPL5010_DONE_PIN);
    1034:	83 b1       	in	r24, 0x03	; 3
    1036:	8f 7b       	andi	r24, 0xBF	; 191
    1038:	83 b9       	out	0x03, r24	; 3
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
    103a:	48 ee       	ldi	r20, 0xE8	; 232
    103c:	53 e0       	ldi	r21, 0x03	; 3
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
    1048:	08 95       	ret
			}
		} else {
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <SCH_TIM_HasCompleted>
    1050:	88 23       	and	r24, r24
    1052:	69 f0       	breq	.+26     	; 0x106e <status_wdt_update+0x50>
			{
				WDT_Current = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <WDT_Current>
				TPL5010_DONE_PORT |= (1 << TPL5010_DONE_PIN);
    105a:	83 b1       	in	r24, 0x03	; 3
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	83 b9       	out	0x03, r24	; 3
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
    1060:	48 ec       	ldi	r20, 0xC8	; 200
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <SCH_TIM_Start>
    106e:	08 95       	ret

00001070 <WDT_init>:
	}
};

void WDT_init(void)
{
	TPL5010_DONE_DDR |= (1 << TPL5010_DONE_PIN);
    1070:	82 b1       	in	r24, 0x02	; 2
    1072:	80 64       	ori	r24, 0x40	; 64
    1074:	82 b9       	out	0x02, r24	; 2
	TPL5010_WAKE_DDR &= ~((1 << TPL5010_WAKE_PIN));
    1076:	82 b1       	in	r24, 0x02	; 2
    1078:	8f 77       	andi	r24, 0x7F	; 127
    107a:	82 b9       	out	0x02, r24	; 2
	TPL5010_DONE_PORT |= (1 << TPL5010_DONE_PIN);
    107c:	83 b1       	in	r24, 0x03	; 3
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	83 b9       	out	0x03, r24	; 3
	TPL5010_WAKE_PORT &= ~((1 << TPL5010_WAKE_PIN));
    1082:	83 b1       	in	r24, 0x03	; 3
    1084:	8f 77       	andi	r24, 0x7F	; 127
    1086:	83 b9       	out	0x03, r24	; 3
	WDT_Current = 0;
    1088:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <WDT_Current>
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
    108c:	6b e5       	ldi	r22, 0x5B	; 91
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	8a e5       	ldi	r24, 0x5A	; 90
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <SCH_TASK_CreateTask>
    1098:	08 95       	ret

0000109a <timer_start_timer0>:
			  // enable global interrupts
	sei();
}
void	timer_stop_timer0(void)
{
	TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));	
    109a:	83 b7       	in	r24, 0x33	; 51
    109c:	84 60       	ori	r24, 0x04	; 4
    109e:	83 bf       	out	0x33, r24	; 51
    10a0:	87 b7       	in	r24, 0x37	; 55
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	87 bf       	out	0x37, r24	; 55
    10a6:	78 94       	sei
    10a8:	08 95       	ret

000010aa <timer_timer0_init>:
}
void	timer_timer0_init(void)
{
	  // set up timer with prescaler = 64 and CTC mode
	  TCCR0 |= (1 << WGM01);
    10aa:	83 b7       	in	r24, 0x33	; 51
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	83 bf       	out	0x33, r24	; 51

	  // initialize counter
	  TCNT0 = 0;
    10b0:	12 be       	out	0x32, r1	; 50

	  // initialize compare value (tick every 1ms)
	  OCR0 = 125 - 1;
    10b2:	8c e7       	ldi	r24, 0x7C	; 124
    10b4:	81 bf       	out	0x31, r24	; 49
    10b6:	08 95       	ret

000010b8 <rbuffer_init>:
	while(!(UCSR1A & (1 << TXC)));										// Wait for Tx unit to transmit the LAST character of ringbuffer

	_delay_ms(200);                                             // Extra safety for Tx to finish!

	UCSR1B &= ~( (1<<RXEN)|(1<<TXEN)|(1<<RXCIE) | (1<<	UDRIE));					//disable TX, RX, RX interrupt
	UCSR1C &= (1<<UCSZ1) | (1<<UCSZ0);
    10b8:	3f b7       	in	r19, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <rbuffer_init+0x1a>
    10c0:	fc 01       	movw	r30, r24
    10c2:	e0 58       	subi	r30, 0x80	; 128
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	10 82       	st	Z, r1
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	10 82       	st	Z, r1
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	10 82       	st	Z, r1
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	21 11       	cpse	r18, r1
    10d4:	f5 cf       	rjmp	.-22     	; 0x10c0 <rbuffer_init+0x8>
    10d6:	3f bf       	out	0x3f, r19	; 63
    10d8:	08 95       	ret

000010da <rbuffer_full>:
    10da:	8e 57       	subi	r24, 0x7E	; 126
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	fc 01       	movw	r30, r24
    10e0:	90 81       	ld	r25, Z
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 38       	cpi	r25, 0x80	; 128
    10e6:	09 f0       	breq	.+2      	; 0x10ea <rbuffer_full+0x10>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	08 95       	ret

000010ec <rbuffer_empty>:
    10ec:	8e 57       	subi	r24, 0x7E	; 126
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	fc 01       	movw	r30, r24
    10f2:	90 81       	ld	r25, Z
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	91 11       	cpse	r25, r1
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	08 95       	ret

000010fc <rbuffer_insert>:
    10fc:	fb 01       	movw	r30, r22
    10fe:	e0 58       	subi	r30, 0x80	; 128
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	90 81       	ld	r25, Z
    1104:	fb 01       	movw	r30, r22
    1106:	e9 0f       	add	r30, r25
    1108:	f1 1d       	adc	r31, r1
    110a:	80 83       	st	Z, r24
    110c:	9f b7       	in	r25, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0c c0       	rjmp	.+24     	; 0x112c <__stack+0x2d>
    1114:	fb 01       	movw	r30, r22
    1116:	e0 58       	subi	r30, 0x80	; 128
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	8f 77       	andi	r24, 0x7F	; 127
    1120:	80 83       	st	Z, r24
    1122:	32 96       	adiw	r30, 0x02	; 2
    1124:	80 81       	ld	r24, Z
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 83       	st	Z, r24
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	81 11       	cpse	r24, r1
    112e:	f2 cf       	rjmp	.-28     	; 0x1114 <__stack+0x15>
    1130:	9f bf       	out	0x3f, r25	; 63
    1132:	08 95       	ret

00001134 <rbuffer_remove>:
    1134:	9c 01       	movw	r18, r24
    1136:	fc 01       	movw	r30, r24
    1138:	ef 57       	subi	r30, 0x7F	; 127
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	f9 01       	movw	r30, r18
    1140:	e8 0f       	add	r30, r24
    1142:	f1 1d       	adc	r31, r1
    1144:	80 81       	ld	r24, Z
    1146:	4f b7       	in	r20, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0c c0       	rjmp	.+24     	; 0x1166 <rbuffer_remove+0x32>
    114e:	f9 01       	movw	r30, r18
    1150:	ef 57       	subi	r30, 0x7F	; 127
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	90 81       	ld	r25, Z
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	9f 77       	andi	r25, 0x7F	; 127
    115a:	90 83       	st	Z, r25
    115c:	31 96       	adiw	r30, 0x01	; 1
    115e:	90 81       	ld	r25, Z
    1160:	91 50       	subi	r25, 0x01	; 1
    1162:	90 83       	st	Z, r25
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	91 11       	cpse	r25, r1
    1168:	f2 cf       	rjmp	.-28     	; 0x114e <rbuffer_remove+0x1a>
    116a:	4f bf       	out	0x3f, r20	; 63
    116c:	08 95       	ret

0000116e <usart0_init>:
    116e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    1172:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    1176:	8d 57       	subi	r24, 0x7D	; 125
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rbuffer_init>
    117e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    1182:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    1186:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rbuffer_init>
    118a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
    118e:	83 e3       	ldi	r24, 0x33	; 51
    1190:	89 b9       	out	0x09, r24	; 9
    1192:	8a b1       	in	r24, 0x0a	; 10
    1194:	88 69       	ori	r24, 0x98	; 152
    1196:	8a b9       	out	0x0a, r24	; 10
    1198:	e5 e9       	ldi	r30, 0x95	; 149
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	86 60       	ori	r24, 0x06	; 6
    11a0:	80 83       	st	Z, r24
    11a2:	78 94       	sei
    11a4:	08 95       	ret

000011a6 <uart_get_uart0_rx_buffer_address>:
    11a6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    11aa:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    11ae:	08 95       	ret

000011b0 <usart1_init>:
    11b0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    11b4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    11b8:	8d 57       	subi	r24, 0x7D	; 125
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rbuffer_init>
    11c0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    11c4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    11c8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rbuffer_init>
    11cc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f0098>
    11d0:	83 e3       	ldi	r24, 0x33	; 51
    11d2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f0099>
    11d6:	ea e9       	ldi	r30, 0x9A	; 154
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	88 69       	ori	r24, 0x98	; 152
    11de:	80 83       	st	Z, r24
    11e0:	ed e9       	ldi	r30, 0x9D	; 157
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	86 60       	ori	r24, 0x06	; 6
    11e8:	80 83       	st	Z, r24
    11ea:	08 95       	ret

000011ec <usart1_send_char>:
    11ec:	cf 93       	push	r28
    11ee:	c8 2f       	mov	r28, r24
    11f0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    11f4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    11f8:	8d 57       	subi	r24, 0x7D	; 125
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	0e 94 6d 08 	call	0x10da	; 0x10da <rbuffer_full>
    1200:	81 11       	cpse	r24, r1
    1202:	f6 cf       	rjmp	.-20     	; 0x11f0 <usart1_send_char+0x4>
    1204:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <p_UART1_meta>
    1208:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    120c:	6d 57       	subi	r22, 0x7D	; 125
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8c 2f       	mov	r24, r28
    1212:	0e 94 7e 08 	call	0x10fc	; 0x10fc <rbuffer_insert>
    1216:	ea e9       	ldi	r30, 0x9A	; 154
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 62       	ori	r24, 0x20	; 32
    121e:	80 83       	st	Z, r24
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <usart1_send_string>:
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <usart1_send_string+0xe>
    122c:	21 96       	adiw	r28, 0x01	; 1
    122e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
    1232:	88 81       	ld	r24, Y
    1234:	81 11       	cpse	r24, r1
    1236:	fa cf       	rjmp	.-12     	; 0x122c <usart1_send_string+0x8>
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <usart1_send_array>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	fc 01       	movw	r30, r24
    1248:	d6 2f       	mov	r29, r22
    124a:	c0 e0       	ldi	r28, 0x00	; 0
    124c:	08 c0       	rjmp	.+16     	; 0x125e <usart1_send_array+0x20>
    124e:	8f 01       	movw	r16, r30
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
    125a:	cf 5f       	subi	r28, 0xFF	; 255
    125c:	f8 01       	movw	r30, r16
    125e:	cd 17       	cp	r28, r29
    1260:	b0 f3       	brcs	.-20     	; 0x124e <usart1_send_array+0x10>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <usart1_send_string_P>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	fc 01       	movw	r30, r24
    1272:	03 c0       	rjmp	.+6      	; 0x127a <usart1_send_string_P+0xe>
    1274:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
    1278:	fe 01       	movw	r30, r28
    127a:	ef 01       	movw	r28, r30
    127c:	21 96       	adiw	r28, 0x01	; 1
    127e:	84 91       	lpm	r24, Z
    1280:	81 11       	cpse	r24, r1
    1282:	f8 cf       	rjmp	.-16     	; 0x1274 <usart1_send_string_P+0x8>
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <uart_get_uart1_rx_buffer_address>:


volatile ringbuffer_t * uart_get_uart1_rx_buffer_address(void)
{
	return &(p_UART1_meta->rb_rx);
}
    128a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    128e:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    1292:	08 95       	ret

00001294 <__vector_18>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART0_RX_vect) {
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	cf 93       	push	r28
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	
   char	data = UDR0;
    12b8:	cc b1       	in	r28, 0x0c	; 12

    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
    12ba:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    12be:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    12c2:	0e 94 6d 08 	call	0x10da	; 0x10da <rbuffer_full>
    12c6:	81 11       	cpse	r24, r1
    12c8:	13 c0       	rjmp	.+38     	; 0x12f0 <__vector_18+0x5c>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
    12ca:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <p_UART0_meta>
    12ce:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    12d2:	8c 2f       	mov	r24, r28
    12d4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
    12d8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <p_UART0_meta>
    12dc:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    12e0:	8b b1       	in	r24, 0x0b	; 11
    12e2:	8c 71       	andi	r24, 0x1C	; 28
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	ea 5f       	subi	r30, 0xFA	; 250
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24
    12ee:	0c c0       	rjmp	.+24     	; 0x1308 <__vector_18+0x74>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
    12f0:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <p_UART0_meta>
    12f4:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    12f8:	8b b1       	in	r24, 0x0b	; 11
    12fa:	8c 71       	andi	r24, 0x1C	; 28
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	ea 5f       	subi	r30, 0xFA	; 250
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
    }   
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	cf 91       	pop	r28
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_19>:
ISR(USART0_UDRE_vect) {
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
    134e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    1352:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    1356:	8d 57       	subi	r24, 0x7D	; 125
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	0e 94 76 08 	call	0x10ec	; 0x10ec <rbuffer_empty>
    135e:	81 11       	cpse	r24, r1
    1360:	0a c0       	rjmp	.+20     	; 0x1376 <__vector_19+0x4a>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
    1362:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <p_UART0_meta>
    1366:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <p_UART0_meta+0x1>
    136a:	8d 57       	subi	r24, 0x7D	; 125
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	0e 94 9a 08 	call	0x1134	; 0x1134 <rbuffer_remove>
    1372:	8c b9       	out	0x0c, r24	; 12
    1374:	03 c0       	rjmp	.+6      	; 0x137c <__vector_19+0x50>
    }
    else {
	    UCSR0B &= ~(1 << UDRE);                   // Enable Tx buffer empty interrupt 
    1376:	8a b1       	in	r24, 0x0a	; 10
    1378:	8f 7d       	andi	r24, 0xDF	; 223
    137a:	8a b9       	out	0x0a, r24	; 10
    }
}
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_30>:
#endif

#ifdef USART1_ENABLE
ISR(USART1_RX_vect) {
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	cf 93       	push	r28
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
	
   char	data = UDR1;
    13c2:	c0 91 9c 00 	lds	r28, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f009c>
    if(!rbuffer_full(&p_UART1_meta->rb_rx)) {
    13c6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    13ca:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    13ce:	0e 94 6d 08 	call	0x10da	; 0x10da <rbuffer_full>
    13d2:	81 11       	cpse	r24, r1
    13d4:	14 c0       	rjmp	.+40     	; 0x13fe <__vector_30+0x60>
	    rbuffer_insert(data, &p_UART1_meta->rb_rx);
    13d6:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <p_UART1_meta>
    13da:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    13de:	8c 2f       	mov	r24, r28
    13e0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <rbuffer_insert>
	    p_UART1_meta->usart_error = UCSR1A & USART_RX_ERROR_MASK ;
    13e4:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <p_UART1_meta>
    13e8:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    13ec:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f009b>
    13f0:	8c 71       	andi	r24, 0x1C	; 28
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	ea 5f       	subi	r30, 0xFA	; 250
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <__vector_30+0x7a>

    }
    else {
	    p_UART1_meta->usart_error = ((UCSR1A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW);
    13fe:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <p_UART1_meta>
    1402:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    1406:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f009b>
    140a:	8c 71       	andi	r24, 0x1C	; 28
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	91 60       	ori	r25, 0x01	; 1
    1410:	ea 5f       	subi	r30, 0xFA	; 250
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    }   
}
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	cf 91       	pop	r28
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <__vector_31>:
ISR(USART1_UDRE_vect) {
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART1_meta->rb_tx)) {
    145e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    1462:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    1466:	8d 57       	subi	r24, 0x7D	; 125
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	0e 94 76 08 	call	0x10ec	; 0x10ec <rbuffer_empty>
    146e:	81 11       	cpse	r24, r1
    1470:	0b c0       	rjmp	.+22     	; 0x1488 <__vector_31+0x4c>
	    UDR1 = rbuffer_remove(&p_UART1_meta->rb_tx);
    1472:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <p_UART1_meta>
    1476:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <p_UART1_meta+0x1>
    147a:	8d 57       	subi	r24, 0x7D	; 125
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	0e 94 9a 08 	call	0x1134	; 0x1134 <rbuffer_remove>
    1482:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7f009c>
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <__vector_31+0x56>
		
    }
    else {
	    UCSR1B &= ~(1 << UDRE);                   // Enable Tx buffer empty interrupt 
    1488:	ea e9       	ldi	r30, 0x9A	; 154
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7d       	andi	r24, 0xDF	; 223
    1490:	80 83       	st	Z, r24
    }
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
    14b4:	4f 92       	push	r4
    14b6:	5f 92       	push	r5
    14b8:	6f 92       	push	r6
    14ba:	7f 92       	push	r7
    14bc:	8f 92       	push	r8
    14be:	9f 92       	push	r9
    14c0:	af 92       	push	r10
    14c2:	bf 92       	push	r11
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	a8 97       	sbiw	r28, 0x28	; 40
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	8c 01       	movw	r16, r24
    14e2:	7b 01       	movw	r14, r22
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    14e4:	b8 c2       	rjmp	.+1392   	; 0x1a56 <UARTvprintf+0x5a2>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	1b 82       	std	Y+3, r1	; 0x03
    14ec:	1c 82       	std	Y+4, r1	; 0x04
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <UARTvprintf+0x52>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	ab 81       	ldd	r26, Y+3	; 0x03
    14f6:	bc 81       	ldd	r27, Y+4	; 0x04
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	b1 1d       	adc	r27, r1
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	ab 83       	std	Y+3, r26	; 0x03
    1504:	bc 83       	std	Y+4, r27	; 0x04
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	ab 81       	ldd	r26, Y+3	; 0x03
    150c:	bc 81       	ldd	r27, Y+4	; 0x04
    150e:	f8 01       	movw	r30, r16
    1510:	e8 0f       	add	r30, r24
    1512:	f9 1f       	adc	r31, r25
    1514:	80 81       	ld	r24, Z
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    1516:	85 32       	cpi	r24, 0x25	; 37
    1518:	51 f0       	breq	.+20     	; 0x152e <UARTvprintf+0x7a>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	ab 81       	ldd	r26, Y+3	; 0x03
    1520:	bc 81       	ldd	r27, Y+4	; 0x04
    1522:	f8 01       	movw	r30, r16
    1524:	e8 0f       	add	r30, r24
    1526:	f9 1f       	adc	r31, r25
    1528:	80 81       	ld	r24, Z
    152a:	81 11       	cpse	r24, r1
    152c:	e1 cf       	rjmp	.-62     	; 0x14f0 <UARTvprintf+0x3c>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	7a 81       	ldd	r23, Y+2	; 0x02
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	c8 01       	movw	r24, r16
    1538:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	ab 81       	ldd	r26, Y+3	; 0x03
    1542:	bc 81       	ldd	r27, Y+4	; 0x04
    1544:	08 0f       	add	r16, r24
    1546:	19 1f       	adc	r17, r25

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
    1548:	f8 01       	movw	r30, r16
    154a:	80 81       	ld	r24, Z
    154c:	85 32       	cpi	r24, 0x25	; 37
    154e:	09 f0       	breq	.+2      	; 0x1552 <UARTvprintf+0x9e>
    1550:	82 c2       	rjmp	.+1284   	; 0x1a56 <UARTvprintf+0x5a2>
        {
            //
            // Skip the %.
            //
            pcString++;
    1552:	d8 01       	movw	r26, r16
    1554:	11 96       	adiw	r26, 0x01	; 1

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
    1556:	1d 86       	std	Y+13, r1	; 0x0d
    1558:	1e 86       	std	Y+14, r1	; 0x0e
    155a:	1f 86       	std	Y+15, r1	; 0x0f
    155c:	18 8a       	std	Y+16, r1	; 0x10
            cFill = ' ';
    155e:	68 94       	set
    1560:	bb 24       	eor	r11, r11
    1562:	b5 f8       	bld	r11, 5
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    1564:	8d 01       	movw	r16, r26
    1566:	0f 5f       	subi	r16, 0xFF	; 255
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	8c 91       	ld	r24, X
    156c:	48 2f       	mov	r20, r24
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	fa 01       	movw	r30, r20
    1572:	b5 97       	sbiw	r30, 0x25	; 37
    1574:	e4 35       	cpi	r30, 0x54	; 84
    1576:	f1 05       	cpc	r31, r1
    1578:	08 f0       	brcs	.+2      	; 0x157c <UARTvprintf+0xc8>
    157a:	66 c2       	rjmp	.+1228   	; 0x1a48 <UARTvprintf+0x594>
    157c:	ea 5b       	subi	r30, 0xBA	; 186
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__tablejump2__>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
    1584:	80 33       	cpi	r24, 0x30	; 48
    1586:	61 f4       	brne	.+24     	; 0x15a0 <UARTvprintf+0xec>
    1588:	4d 85       	ldd	r20, Y+13	; 0x0d
    158a:	5e 85       	ldd	r21, Y+14	; 0x0e
    158c:	6f 85       	ldd	r22, Y+15	; 0x0f
    158e:	78 89       	ldd	r23, Y+16	; 0x10
    1590:	45 2b       	or	r20, r21
    1592:	46 2b       	or	r20, r22
    1594:	47 2b       	or	r20, r23
    1596:	21 f4       	brne	.+8      	; 0x15a0 <UARTvprintf+0xec>
                    {
                        cFill = '0';
    1598:	0f 2e       	mov	r0, r31
    159a:	f0 e3       	ldi	r31, 0x30	; 48
    159c:	bf 2e       	mov	r11, r31
    159e:	f0 2d       	mov	r31, r0
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
    15a0:	4d 85       	ldd	r20, Y+13	; 0x0d
    15a2:	5e 85       	ldd	r21, Y+14	; 0x0e
    15a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    15a6:	78 89       	ldd	r23, Y+16	; 0x10
    15a8:	44 0f       	add	r20, r20
    15aa:	55 1f       	adc	r21, r21
    15ac:	66 1f       	adc	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	2a 01       	movw	r4, r20
    15b2:	3b 01       	movw	r6, r22
    15b4:	44 0c       	add	r4, r4
    15b6:	55 1c       	adc	r5, r5
    15b8:	66 1c       	adc	r6, r6
    15ba:	77 1c       	adc	r7, r7
    15bc:	44 0c       	add	r4, r4
    15be:	55 1c       	adc	r5, r5
    15c0:	66 1c       	adc	r6, r6
    15c2:	77 1c       	adc	r7, r7
    15c4:	44 0d       	add	r20, r4
    15c6:	55 1d       	adc	r21, r5
    15c8:	66 1d       	adc	r22, r6
    15ca:	77 1d       	adc	r23, r7
    15cc:	4d 87       	std	Y+13, r20	; 0x0d
    15ce:	5e 87       	std	Y+14, r21	; 0x0e
    15d0:	6f 87       	std	Y+15, r22	; 0x0f
    15d2:	78 8b       	std	Y+16, r23	; 0x10
                    ui32Count += pcString[-1] - '0';
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	c0 97       	sbiw	r24, 0x30	; 48
    15d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    15da:	5e 85       	ldd	r21, Y+14	; 0x0e
    15dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    15de:	78 89       	ldd	r23, Y+16	; 0x10
    15e0:	09 2e       	mov	r0, r25
    15e2:	00 0c       	add	r0, r0
    15e4:	aa 0b       	sbc	r26, r26
    15e6:	bb 0b       	sbc	r27, r27
    15e8:	84 0f       	add	r24, r20
    15ea:	95 1f       	adc	r25, r21
    15ec:	a6 1f       	adc	r26, r22
    15ee:	b7 1f       	adc	r27, r23
    15f0:	8d 87       	std	Y+13, r24	; 0x0d
    15f2:	9e 87       	std	Y+14, r25	; 0x0e
    15f4:	af 87       	std	Y+15, r26	; 0x0f
    15f6:	b8 8b       	std	Y+16, r27	; 0x10
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    15f8:	d8 01       	movw	r26, r16
                    ui32Count += pcString[-1] - '0';

                    //
                    // Get the next character.
                    //
                    goto again;
    15fa:	b4 cf       	rjmp	.-152    	; 0x1564 <UARTvprintf+0xb0>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    15fc:	57 01       	movw	r10, r14
    15fe:	f4 e0       	ldi	r31, 0x04	; 4
    1600:	af 0e       	add	r10, r31
    1602:	b1 1c       	adc	r11, r1
    1604:	f7 01       	movw	r30, r14
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	a2 81       	ldd	r26, Z+2	; 0x02
    160c:	b3 81       	ldd	r27, Z+3	; 0x03
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	af 83       	std	Y+7, r26	; 0x07
    1614:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	ce 01       	movw	r24, r28
    161a:	05 96       	adiw	r24, 0x05	; 5
    161c:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    1620:	75 01       	movw	r14, r10
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);

                    //
                    // This command has been handled.
                    //
                    break;
    1622:	19 c2       	rjmp	.+1074   	; 0x1a56 <UARTvprintf+0x5a2>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1624:	97 01       	movw	r18, r14
    1626:	2e 5f       	subi	r18, 0xFE	; 254
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	f7 01       	movw	r30, r14
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	af 83       	std	Y+7, r26	; 0x07
    163a:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    163c:	19 86       	std	Y+9, r1	; 0x09
    163e:	1a 86       	std	Y+10, r1	; 0x0a
    1640:	1b 86       	std	Y+11, r1	; 0x0b
    1642:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	af 81       	ldd	r26, Y+7	; 0x07
    164a:	b8 85       	ldd	r27, Y+8	; 0x08
    164c:	bb 23       	and	r27, r27
    164e:	c4 f4       	brge	.+48     	; 0x1680 <UARTvprintf+0x1cc>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	af 81       	ldd	r26, Y+7	; 0x07
    1656:	b8 85       	ldd	r27, Y+8	; 0x08
    1658:	b0 95       	com	r27
    165a:	a0 95       	com	r26
    165c:	90 95       	com	r25
    165e:	81 95       	neg	r24
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	af 4f       	sbci	r26, 0xFF	; 255
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	af 83       	std	Y+7, r26	; 0x07
    166c:	b8 87       	std	Y+8, r27	; 0x08

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	8d 8b       	std	Y+21, r24	; 0x15
    1678:	9e 8b       	std	Y+22, r25	; 0x16
    167a:	af 8b       	std	Y+23, r26	; 0x17
    167c:	b8 8f       	std	Y+24, r27	; 0x18
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <UARTvprintf+0x1d4>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
    1680:	1d 8a       	std	Y+21, r1	; 0x15
    1682:	1e 8a       	std	Y+22, r1	; 0x16
    1684:	1f 8a       	std	Y+23, r1	; 0x17
    1686:	18 8e       	std	Y+24, r1	; 0x18
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    1688:	8a e0       	ldi	r24, 0x0A	; 10
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	89 8b       	std	Y+17, r24	; 0x11
    1692:	9a 8b       	std	Y+18, r25	; 0x12
    1694:	ab 8b       	std	Y+19, r26	; 0x13
    1696:	bc 8b       	std	Y+20, r27	; 0x14
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1698:	79 01       	movw	r14, r18
                    ui32Base = 10;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    169a:	9a c0       	rjmp	.+308    	; 0x17d0 <UARTvprintf+0x31c>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    169c:	57 01       	movw	r10, r14
    169e:	f2 e0       	ldi	r31, 0x02	; 2
    16a0:	af 0e       	add	r10, r31
    16a2:	b1 1c       	adc	r11, r1
    16a4:	f7 01       	movw	r30, r14
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	1a 82       	std	Y+2, r1	; 0x02
    16ae:	1b 82       	std	Y+3, r1	; 0x03
    16b0:	1c 82       	std	Y+4, r1	; 0x04
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <UARTvprintf+0x218>
    16b4:	49 81       	ldd	r20, Y+1	; 0x01
    16b6:	5a 81       	ldd	r21, Y+2	; 0x02
    16b8:	6b 81       	ldd	r22, Y+3	; 0x03
    16ba:	7c 81       	ldd	r23, Y+4	; 0x04
    16bc:	4f 5f       	subi	r20, 0xFF	; 255
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	6f 4f       	sbci	r22, 0xFF	; 255
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	49 83       	std	Y+1, r20	; 0x01
    16c6:	5a 83       	std	Y+2, r21	; 0x02
    16c8:	6b 83       	std	Y+3, r22	; 0x03
    16ca:	7c 83       	std	Y+4, r23	; 0x04
    16cc:	49 81       	ldd	r20, Y+1	; 0x01
    16ce:	5a 81       	ldd	r21, Y+2	; 0x02
    16d0:	6b 81       	ldd	r22, Y+3	; 0x03
    16d2:	7c 81       	ldd	r23, Y+4	; 0x04
    16d4:	fc 01       	movw	r30, r24
    16d6:	e4 0f       	add	r30, r20
    16d8:	f5 1f       	adc	r31, r21
    16da:	20 81       	ld	r18, Z
    16dc:	21 11       	cpse	r18, r1
    16de:	ea cf       	rjmp	.-44     	; 0x16b4 <UARTvprintf+0x200>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
    16e0:	49 81       	ldd	r20, Y+1	; 0x01
    16e2:	5a 81       	ldd	r21, Y+2	; 0x02
    16e4:	6b 81       	ldd	r22, Y+3	; 0x03
    16e6:	7c 81       	ldd	r23, Y+4	; 0x04
    16e8:	64 2f       	mov	r22, r20
    16ea:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
    16ee:	4d 85       	ldd	r20, Y+13	; 0x0d
    16f0:	5e 85       	ldd	r21, Y+14	; 0x0e
    16f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16f4:	78 89       	ldd	r23, Y+16	; 0x10
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	ab 81       	ldd	r26, Y+3	; 0x03
    16fc:	bc 81       	ldd	r27, Y+4	; 0x04
    16fe:	84 17       	cp	r24, r20
    1700:	95 07       	cpc	r25, r21
    1702:	a6 07       	cpc	r26, r22
    1704:	b7 07       	cpc	r27, r23
    1706:	08 f0       	brcs	.+2      	; 0x170a <UARTvprintf+0x256>
    1708:	a5 c1       	rjmp	.+842    	; 0x1a54 <UARTvprintf+0x5a0>
                    {
                        ui32Count -= ui32Idx;
    170a:	49 81       	ldd	r20, Y+1	; 0x01
    170c:	5a 81       	ldd	r21, Y+2	; 0x02
    170e:	6b 81       	ldd	r22, Y+3	; 0x03
    1710:	7c 81       	ldd	r23, Y+4	; 0x04
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	af 85       	ldd	r26, Y+15	; 0x0f
    1718:	b8 89       	ldd	r27, Y+16	; 0x10
    171a:	84 1b       	sub	r24, r20
    171c:	95 0b       	sbc	r25, r21
    171e:	a6 0b       	sbc	r26, r22
    1720:	b7 0b       	sbc	r27, r23
    1722:	8d 87       	std	Y+13, r24	; 0x0d
    1724:	9e 87       	std	Y+14, r25	; 0x0e
    1726:	af 87       	std	Y+15, r26	; 0x0f
    1728:	b8 8b       	std	Y+16, r27	; 0x10
                        while(ui32Count--)
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <UARTvprintf+0x282>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	87 e6       	ldi	r24, 0x67	; 103
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
                    {
                        ui32Count -= ui32Idx;
                        while(ui32Count--)
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	9e 85       	ldd	r25, Y+14	; 0x0e
    173a:	af 85       	ldd	r26, Y+15	; 0x0f
    173c:	b8 89       	ldd	r27, Y+16	; 0x10
    173e:	ac 01       	movw	r20, r24
    1740:	bd 01       	movw	r22, r26
    1742:	41 50       	subi	r20, 0x01	; 1
    1744:	51 09       	sbc	r21, r1
    1746:	61 09       	sbc	r22, r1
    1748:	71 09       	sbc	r23, r1
    174a:	4d 87       	std	Y+13, r20	; 0x0d
    174c:	5e 87       	std	Y+14, r21	; 0x0e
    174e:	6f 87       	std	Y+15, r22	; 0x0f
    1750:	78 8b       	std	Y+16, r23	; 0x10
    1752:	89 2b       	or	r24, r25
    1754:	8a 2b       	or	r24, r26
    1756:	8b 2b       	or	r24, r27
    1758:	49 f7       	brne	.-46     	; 0x172c <UARTvprintf+0x278>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    175a:	75 01       	movw	r14, r10
    175c:	7c c1       	rjmp	.+760    	; 0x1a56 <UARTvprintf+0x5a2>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    175e:	f7 01       	movw	r30, r14
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	af 83       	std	Y+7, r26	; 0x07
    176e:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    1770:	19 86       	std	Y+9, r1	; 0x09
    1772:	1a 86       	std	Y+10, r1	; 0x0a
    1774:	1b 86       	std	Y+11, r1	; 0x0b
    1776:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    1778:	8a e0       	ldi	r24, 0x0A	; 10
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	89 8b       	std	Y+17, r24	; 0x11
    1782:	9a 8b       	std	Y+18, r25	; 0x12
    1784:	ab 8b       	std	Y+19, r26	; 0x13
    1786:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    1788:	1d 8a       	std	Y+21, r1	; 0x15
    178a:	1e 8a       	std	Y+22, r1	; 0x16
    178c:	1f 8a       	std	Y+23, r1	; 0x17
    178e:	18 8e       	std	Y+24, r1	; 0x18
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1790:	c7 01       	movw	r24, r14
    1792:	02 96       	adiw	r24, 0x02	; 2
    1794:	7c 01       	movw	r14, r24
                    ui32Neg = 0;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    1796:	1c c0       	rjmp	.+56     	; 0x17d0 <UARTvprintf+0x31c>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1798:	f7 01       	movw	r30, r14
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	af 83       	std	Y+7, r26	; 0x07
    17a8:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    17aa:	19 86       	std	Y+9, r1	; 0x09
    17ac:	1a 86       	std	Y+10, r1	; 0x0a
    17ae:	1b 86       	std	Y+11, r1	; 0x0b
    17b0:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
    17b2:	80 e1       	ldi	r24, 0x10	; 16
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	89 8b       	std	Y+17, r24	; 0x11
    17bc:	9a 8b       	std	Y+18, r25	; 0x12
    17be:	ab 8b       	std	Y+19, r26	; 0x13
    17c0:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    17c2:	1d 8a       	std	Y+21, r1	; 0x15
    17c4:	1e 8a       	std	Y+22, r1	; 0x16
    17c6:	1f 8a       	std	Y+23, r1	; 0x17
    17c8:	18 8e       	std	Y+24, r1	; 0x18
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    17ca:	c7 01       	movw	r24, r14
    17cc:	02 96       	adiw	r24, 0x02	; 2
    17ce:	7c 01       	movw	r14, r24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	ab 83       	std	Y+3, r26	; 0x03
    17de:	bc 83       	std	Y+4, r27	; 0x04
    17e0:	19 c0       	rjmp	.+50     	; 0x1814 <UARTvprintf+0x360>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
    17e2:	29 89       	ldd	r18, Y+17	; 0x11
    17e4:	3a 89       	ldd	r19, Y+18	; 0x12
    17e6:	4b 89       	ldd	r20, Y+19	; 0x13
    17e8:	5c 89       	ldd	r21, Y+20	; 0x14
    17ea:	69 81       	ldd	r22, Y+1	; 0x01
    17ec:	7a 81       	ldd	r23, Y+2	; 0x02
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__mulsi3>
    17f6:	69 83       	std	Y+1, r22	; 0x01
    17f8:	7a 83       	std	Y+2, r23	; 0x02
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	af 85       	ldd	r26, Y+15	; 0x0f
    1804:	b8 89       	ldd	r27, Y+16	; 0x10
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	a1 09       	sbc	r26, r1
    180a:	b1 09       	sbc	r27, r1
    180c:	8d 87       	std	Y+13, r24	; 0x0d
    180e:	9e 87       	std	Y+14, r25	; 0x0e
    1810:	af 87       	std	Y+15, r26	; 0x0f
    1812:	b8 8b       	std	Y+16, r27	; 0x10
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    1814:	29 81       	ldd	r18, Y+1	; 0x01
    1816:	3a 81       	ldd	r19, Y+2	; 0x02
    1818:	4b 81       	ldd	r20, Y+3	; 0x03
    181a:	5c 81       	ldd	r21, Y+4	; 0x04
    181c:	69 89       	ldd	r22, Y+17	; 0x11
    181e:	7a 89       	ldd	r23, Y+18	; 0x12
    1820:	8b 89       	ldd	r24, Y+19	; 0x13
    1822:	9c 89       	ldd	r25, Y+20	; 0x14
    1824:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__mulsi3>
    1828:	4d 80       	ldd	r4, Y+5	; 0x05
    182a:	5e 80       	ldd	r5, Y+6	; 0x06
    182c:	6f 80       	ldd	r6, Y+7	; 0x07
    182e:	78 84       	ldd	r7, Y+8	; 0x08
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    1830:	46 16       	cp	r4, r22
    1832:	57 06       	cpc	r5, r23
    1834:	68 06       	cpc	r6, r24
    1836:	79 06       	cpc	r7, r25
    1838:	d0 f0       	brcs	.+52     	; 0x186e <UARTvprintf+0x3ba>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
    183a:	29 81       	ldd	r18, Y+1	; 0x01
    183c:	3a 81       	ldd	r19, Y+2	; 0x02
    183e:	4b 81       	ldd	r20, Y+3	; 0x03
    1840:	5c 81       	ldd	r21, Y+4	; 0x04
    1842:	69 89       	ldd	r22, Y+17	; 0x11
    1844:	7a 89       	ldd	r23, Y+18	; 0x12
    1846:	8b 89       	ldd	r24, Y+19	; 0x13
    1848:	9c 89       	ldd	r25, Y+20	; 0x14
    184a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__mulsi3>
    184e:	29 89       	ldd	r18, Y+17	; 0x11
    1850:	3a 89       	ldd	r19, Y+18	; 0x12
    1852:	4b 89       	ldd	r20, Y+19	; 0x13
    1854:	5c 89       	ldd	r21, Y+20	; 0x14
    1856:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodsi4>
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	ab 81       	ldd	r26, Y+3	; 0x03
    1860:	bc 81       	ldd	r27, Y+4	; 0x04
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    1862:	28 17       	cp	r18, r24
    1864:	39 07       	cpc	r19, r25
    1866:	4a 07       	cpc	r20, r26
    1868:	5b 07       	cpc	r21, r27
    186a:	09 f4       	brne	.+2      	; 0x186e <UARTvprintf+0x3ba>
    186c:	ba cf       	rjmp	.-140    	; 0x17e2 <UARTvprintf+0x32e>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
    186e:	8d 89       	ldd	r24, Y+21	; 0x15
    1870:	9e 89       	ldd	r25, Y+22	; 0x16
    1872:	af 89       	ldd	r26, Y+23	; 0x17
    1874:	b8 8d       	ldd	r27, Y+24	; 0x18
    1876:	89 2b       	or	r24, r25
    1878:	8a 2b       	or	r24, r26
    187a:	8b 2b       	or	r24, r27
    187c:	59 f0       	breq	.+22     	; 0x1894 <UARTvprintf+0x3e0>
                    {
                        ui32Count--;
    187e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1880:	9e 85       	ldd	r25, Y+14	; 0x0e
    1882:	af 85       	ldd	r26, Y+15	; 0x0f
    1884:	b8 89       	ldd	r27, Y+16	; 0x10
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	a1 09       	sbc	r26, r1
    188a:	b1 09       	sbc	r27, r1
    188c:	8d 87       	std	Y+13, r24	; 0x0d
    188e:	9e 87       	std	Y+14, r25	; 0x0e
    1890:	af 87       	std	Y+15, r26	; 0x0f
    1892:	b8 8b       	std	Y+16, r27	; 0x10

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
    1894:	8d 89       	ldd	r24, Y+21	; 0x15
    1896:	9e 89       	ldd	r25, Y+22	; 0x16
    1898:	af 89       	ldd	r26, Y+23	; 0x17
    189a:	b8 8d       	ldd	r27, Y+24	; 0x18
    189c:	89 2b       	or	r24, r25
    189e:	8a 2b       	or	r24, r26
    18a0:	8b 2b       	or	r24, r27
    18a2:	e9 f0       	breq	.+58     	; 0x18de <UARTvprintf+0x42a>
    18a4:	90 e3       	ldi	r25, 0x30	; 48
    18a6:	b9 12       	cpse	r11, r25
    18a8:	1a c0       	rjmp	.+52     	; 0x18de <UARTvprintf+0x42a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    18b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    18b2:	ac 01       	movw	r20, r24
    18b4:	bd 01       	movw	r22, r26
    18b6:	4f 5f       	subi	r20, 0xFF	; 255
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	6f 4f       	sbci	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	49 87       	std	Y+9, r20	; 0x09
    18c0:	5a 87       	std	Y+10, r21	; 0x0a
    18c2:	6b 87       	std	Y+11, r22	; 0x0b
    18c4:	7c 87       	std	Y+12, r23	; 0x0c
    18c6:	e9 e1       	ldi	r30, 0x19	; 25
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	ec 0f       	add	r30, r28
    18cc:	fd 1f       	adc	r31, r29
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	2d e2       	ldi	r18, 0x2D	; 45
    18d4:	20 83       	st	Z, r18

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
    18d6:	1d 8a       	std	Y+21, r1	; 0x15
    18d8:	1e 8a       	std	Y+22, r1	; 0x16
    18da:	1f 8a       	std	Y+23, r1	; 0x17
    18dc:	18 8e       	std	Y+24, r1	; 0x18

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	af 85       	ldd	r26, Y+15	; 0x0f
    18e4:	b8 89       	ldd	r27, Y+16	; 0x10
    18e6:	02 97       	sbiw	r24, 0x02	; 2
    18e8:	a1 05       	cpc	r26, r1
    18ea:	b1 05       	cpc	r27, r1
    18ec:	e0 f1       	brcs	.+120    	; 0x1966 <UARTvprintf+0x4b2>
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	af 85       	ldd	r26, Y+15	; 0x0f
    18f4:	b8 89       	ldd	r27, Y+16	; 0x10
    18f6:	40 97       	sbiw	r24, 0x10	; 16
    18f8:	a1 05       	cpc	r26, r1
    18fa:	b1 05       	cpc	r27, r1
    18fc:	a0 f5       	brcc	.+104    	; 0x1966 <UARTvprintf+0x4b2>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	9e 85       	ldd	r25, Y+14	; 0x0e
    1902:	af 85       	ldd	r26, Y+15	; 0x0f
    1904:	b8 89       	ldd	r27, Y+16	; 0x10
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	a1 09       	sbc	r26, r1
    190a:	b1 09       	sbc	r27, r1
    190c:	8d 87       	std	Y+13, r24	; 0x0d
    190e:	9e 87       	std	Y+14, r25	; 0x0e
    1910:	af 87       	std	Y+15, r26	; 0x0f
    1912:	b8 8b       	std	Y+16, r27	; 0x10
    1914:	20 c0       	rjmp	.+64     	; 0x1956 <UARTvprintf+0x4a2>
                        {
                            pcBuf[ui32Pos++] = cFill;
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	ab 85       	ldd	r26, Y+11	; 0x0b
    191c:	bc 85       	ldd	r27, Y+12	; 0x0c
    191e:	ac 01       	movw	r20, r24
    1920:	bd 01       	movw	r22, r26
    1922:	4f 5f       	subi	r20, 0xFF	; 255
    1924:	5f 4f       	sbci	r21, 0xFF	; 255
    1926:	6f 4f       	sbci	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	49 87       	std	Y+9, r20	; 0x09
    192c:	5a 87       	std	Y+10, r21	; 0x0a
    192e:	6b 87       	std	Y+11, r22	; 0x0b
    1930:	7c 87       	std	Y+12, r23	; 0x0c
    1932:	e9 e1       	ldi	r30, 0x19	; 25
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	ec 0f       	add	r30, r28
    1938:	fd 1f       	adc	r31, r29
    193a:	e8 0f       	add	r30, r24
    193c:	f9 1f       	adc	r31, r25
    193e:	b0 82       	st	Z, r11
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    1940:	8d 85       	ldd	r24, Y+13	; 0x0d
    1942:	9e 85       	ldd	r25, Y+14	; 0x0e
    1944:	af 85       	ldd	r26, Y+15	; 0x0f
    1946:	b8 89       	ldd	r27, Y+16	; 0x10
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	a1 09       	sbc	r26, r1
    194c:	b1 09       	sbc	r27, r1
    194e:	8d 87       	std	Y+13, r24	; 0x0d
    1950:	9e 87       	std	Y+14, r25	; 0x0e
    1952:	af 87       	std	Y+15, r26	; 0x0f
    1954:	b8 8b       	std	Y+16, r27	; 0x10
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	af 85       	ldd	r26, Y+15	; 0x0f
    195c:	b8 89       	ldd	r27, Y+16	; 0x10
    195e:	89 2b       	or	r24, r25
    1960:	8a 2b       	or	r24, r26
    1962:	8b 2b       	or	r24, r27
    1964:	c1 f6       	brne	.-80     	; 0x1916 <UARTvprintf+0x462>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
    1966:	8d 89       	ldd	r24, Y+21	; 0x15
    1968:	9e 89       	ldd	r25, Y+22	; 0x16
    196a:	af 89       	ldd	r26, Y+23	; 0x17
    196c:	b8 8d       	ldd	r27, Y+24	; 0x18
    196e:	89 2b       	or	r24, r25
    1970:	8a 2b       	or	r24, r26
    1972:	8b 2b       	or	r24, r27
    1974:	09 f4       	brne	.+2      	; 0x1978 <UARTvprintf+0x4c4>
    1976:	51 c0       	rjmp	.+162    	; 0x1a1a <UARTvprintf+0x566>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	ab 85       	ldd	r26, Y+11	; 0x0b
    197e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1980:	ac 01       	movw	r20, r24
    1982:	bd 01       	movw	r22, r26
    1984:	4f 5f       	subi	r20, 0xFF	; 255
    1986:	5f 4f       	sbci	r21, 0xFF	; 255
    1988:	6f 4f       	sbci	r22, 0xFF	; 255
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	49 87       	std	Y+9, r20	; 0x09
    198e:	5a 87       	std	Y+10, r21	; 0x0a
    1990:	6b 87       	std	Y+11, r22	; 0x0b
    1992:	7c 87       	std	Y+12, r23	; 0x0c
    1994:	e9 e1       	ldi	r30, 0x19	; 25
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	ec 0f       	add	r30, r28
    199a:	fd 1f       	adc	r31, r29
    199c:	e8 0f       	add	r30, r24
    199e:	f9 1f       	adc	r31, r25
    19a0:	2d e2       	ldi	r18, 0x2D	; 45
    19a2:	20 83       	st	Z, r18
    19a4:	3a c0       	rjmp	.+116    	; 0x1a1a <UARTvprintf+0x566>
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    19a6:	89 84       	ldd	r8, Y+9	; 0x09
    19a8:	9a 84       	ldd	r9, Y+10	; 0x0a
    19aa:	ab 84       	ldd	r10, Y+11	; 0x0b
    19ac:	bc 84       	ldd	r11, Y+12	; 0x0c
    19ae:	d5 01       	movw	r26, r10
    19b0:	c4 01       	movw	r24, r8
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	a1 1d       	adc	r26, r1
    19b6:	b1 1d       	adc	r27, r1
    19b8:	89 87       	std	Y+9, r24	; 0x09
    19ba:	9a 87       	std	Y+10, r25	; 0x0a
    19bc:	ab 87       	std	Y+11, r26	; 0x0b
    19be:	bc 87       	std	Y+12, r27	; 0x0c
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
    19c0:	6d 81       	ldd	r22, Y+5	; 0x05
    19c2:	7e 81       	ldd	r23, Y+6	; 0x06
    19c4:	8f 81       	ldd	r24, Y+7	; 0x07
    19c6:	98 85       	ldd	r25, Y+8	; 0x08
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	3a 81       	ldd	r19, Y+2	; 0x02
    19cc:	4b 81       	ldd	r20, Y+3	; 0x03
    19ce:	5c 81       	ldd	r21, Y+4	; 0x04
    19d0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodsi4>
    19d4:	49 88       	ldd	r4, Y+17	; 0x11
    19d6:	5a 88       	ldd	r5, Y+18	; 0x12
    19d8:	6b 88       	ldd	r6, Y+19	; 0x13
    19da:	7c 88       	ldd	r7, Y+20	; 0x14
    19dc:	ca 01       	movw	r24, r20
    19de:	b9 01       	movw	r22, r18
    19e0:	a3 01       	movw	r20, r6
    19e2:	92 01       	movw	r18, r4
    19e4:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodsi4>
    19e8:	fb 01       	movw	r30, r22
    19ea:	ed 5d       	subi	r30, 0xDD	; 221
    19ec:	fd 4f       	sbci	r31, 0xFD	; 253
    19ee:	80 81       	ld	r24, Z
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    19f0:	e9 e1       	ldi	r30, 0x19	; 25
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	ec 0f       	add	r30, r28
    19f6:	fd 1f       	adc	r31, r29
    19f8:	e8 0d       	add	r30, r8
    19fa:	f9 1d       	adc	r31, r9
    19fc:	80 83       	st	Z, r24
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
                    }
    19fe:	29 89       	ldd	r18, Y+17	; 0x11
    1a00:	3a 89       	ldd	r19, Y+18	; 0x12
    1a02:	4b 89       	ldd	r20, Y+19	; 0x13
    1a04:	5c 89       	ldd	r21, Y+20	; 0x14
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
    1a06:	69 81       	ldd	r22, Y+1	; 0x01
    1a08:	7a 81       	ldd	r23, Y+2	; 0x02
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodsi4>
    1a12:	29 83       	std	Y+1, r18	; 0x01
    1a14:	3a 83       	std	Y+2, r19	; 0x02
    1a16:	4b 83       	std	Y+3, r20	; 0x03
    1a18:	5c 83       	std	Y+4, r21	; 0x04
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1a20:	bc 81       	ldd	r27, Y+4	; 0x04
    1a22:	89 2b       	or	r24, r25
    1a24:	8a 2b       	or	r24, r26
    1a26:	8b 2b       	or	r24, r27
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <UARTvprintf+0x578>
    1a2a:	bd cf       	rjmp	.-134    	; 0x19a6 <UARTvprintf+0x4f2>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	ce 01       	movw	r24, r28
    1a36:	49 96       	adiw	r24, 0x19	; 25
    1a38:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    1a3c:	0c c0       	rjmp	.+24     	; 0x1a56 <UARTvprintf+0x5a2>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <UARTvprintf+0x5a2>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
    1a48:	65 e0       	ldi	r22, 0x05	; 5
    1a4a:	84 e3       	ldi	r24, 0x34	; 52
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 1f 09 	call	0x123e	; 0x123e <usart1_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <UARTvprintf+0x5a2>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1a54:	75 01       	movw	r14, r10
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	44 cd       	rjmp	.-1400   	; 0x14e6 <UARTvprintf+0x32>
                    break;
                }
            }
        }
    }
}
    1a5e:	a8 96       	adiw	r28, 0x28	; 40
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	bf 90       	pop	r11
    1a78:	af 90       	pop	r10
    1a7a:	9f 90       	pop	r9
    1a7c:	8f 90       	pop	r8
    1a7e:	7f 90       	pop	r7
    1a80:	6f 90       	pop	r6
    1a82:	5f 90       	pop	r5
    1a84:	4f 90       	pop	r4
    1a86:	08 95       	ret

00001a88 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	be 01       	movw	r22, r28
    1a92:	6b 5f       	subi	r22, 0xFB	; 251
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	fb 01       	movw	r30, r22
    1a98:	81 91       	ld	r24, Z+
    1a9a:	91 91       	ld	r25, Z+
    1a9c:	bf 01       	movw	r22, r30
    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);

    UARTvprintf(pcString, vaArgP);
    1a9e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <CmdLineProcess>:
//! \b CMDLINE_TOO_MANY_ARGS if there are more arguments than can be parsed.
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t CmdLineProcess(char *pcCmdLine)
{
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	fc 01       	movw	r30, r24
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
    1ab0:	91 e0       	ldi	r25, 0x01	; 1

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
    1ab2:	c0 e0       	ldi	r28, 0x00	; 0
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <CmdLineProcess+0x36>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
    1ab6:	80 32       	cpi	r24, 0x20	; 32
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <CmdLineProcess+0x18>
        {
            *pcChar = 0;
    1aba:	10 82       	st	Z, r1
            bFindArg = true;
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	0e c0       	rjmp	.+28     	; 0x1adc <CmdLineProcess+0x34>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
    1ac0:	99 23       	and	r25, r25
    1ac2:	61 f0       	breq	.+24     	; 0x1adc <CmdLineProcess+0x34>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
    1ac4:	c8 30       	cpi	r28, 0x08	; 8
    1ac6:	90 f5       	brcc	.+100    	; 0x1b2c <CmdLineProcess+0x84>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
    1ac8:	ac 2f       	mov	r26, r28
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	aa 0f       	add	r26, r26
    1ace:	bb 1f       	adc	r27, r27
    1ad0:	a0 50       	subi	r26, 0x00	; 0
    1ad2:	bb 4f       	sbci	r27, 0xFB	; 251
    1ad4:	ed 93       	st	X+, r30
    1ad6:	fc 93       	st	X, r31
                    ui8Argc++;
    1ad8:	cf 5f       	subi	r28, 0xFF	; 255
                    bFindArg = false;
    1ada:	90 e0       	ldi	r25, 0x00	; 0
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
    1adc:	31 96       	adiw	r30, 0x01	; 1
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
    1ade:	80 81       	ld	r24, Z
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	e9 cf       	rjmp	.-46     	; 0x1ab6 <CmdLineProcess+0xe>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
    1ae4:	c1 11       	cpse	r28, r1
    1ae6:	18 c0       	rjmp	.+48     	; 0x1b18 <CmdLineProcess+0x70>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	21 c0       	rjmp	.+66     	; 0x1b2e <CmdLineProcess+0x86>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
    1aec:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <g_ppcArgv>
    1af0:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <g_ppcArgv+0x1>
    1af4:	0e 94 41 18 	call	0x3082	; 0x3082 <strcmp>
    1af8:	89 2b       	or	r24, r25
    1afa:	59 f4       	brne	.+22     	; 0x1b12 <CmdLineProcess+0x6a>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
    1afc:	d8 01       	movw	r26, r16
    1afe:	12 96       	adiw	r26, 0x02	; 2
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	13 97       	sbiw	r26, 0x03	; 3
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	75 e0       	ldi	r23, 0x05	; 5
    1b0a:	8c 2f       	mov	r24, r28
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	09 95       	icall
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <CmdLineProcess+0x86>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
    1b12:	0a 5f       	subi	r16, 0xFA	; 250
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <CmdLineProcess+0x74>
    1b18:	0c e6       	ldi	r16, 0x6C	; 108
    1b1a:	11 e0       	ldi	r17, 0x01	; 1

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	61 15       	cp	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	11 f7       	brne	.-60     	; 0x1aec <CmdLineProcess+0x44>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <CmdLineProcess+0x86>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
}
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <Cmd_help>:
		  if (argc >2) return CMDLINE_TOO_MANY_ARGS;
		  uint8_t channel = atoi(argv[1]);
		  if (channel > 4)	return CMDLINE_INVALID_ARG;
//		  temperature_disable_auto_control_TEC(channel);
		  return CMDLINE_OK;
}
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	8a e3       	ldi	r24, 0x3A	; 58
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1b42:	80 e5       	ldi	r24, 0x50	; 80
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1b4a:	cc e6       	ldi	r28, 0x6C	; 108
    1b4c:	d1 e0       	ldi	r29, 0x01	; 1
    1b4e:	0b c0       	rjmp	.+22     	; 0x1b66 <Cmd_help+0x30>
    1b50:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1b5c:	89 e8       	ldi	r24, 0x89	; 137
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1b64:	26 96       	adiw	r28, 0x06	; 6
    1b66:	88 81       	ld	r24, Y
    1b68:	99 81       	ldd	r25, Y+1	; 0x01
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	89 f7       	brne	.-30     	; 0x1b50 <Cmd_help+0x1a>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <show_data>:
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	2a 97       	sbiw	r28, 0x0a	; 10
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	02 97       	sbiw	r24, 0x02	; 2
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <show_data+0x20>
    1b96:	cb c0       	rjmp	.+406    	; 0x1d2e <show_data+0x1b6>
    1b98:	89 e8       	ldi	r24, 0x89	; 137
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1ba0:	f1 2c       	mov	r15, r1
    1ba2:	be c0       	rjmp	.+380    	; 0x1d20 <show_data+0x1a8>
    1ba4:	0f 2d       	mov	r16, r15
    1ba6:	10 e0       	ldi	r17, 0x00	; 0
    1ba8:	c8 01       	movw	r24, r16
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	80 0f       	add	r24, r16
    1bb0:	91 1f       	adc	r25, r17
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	8a 5c       	subi	r24, 0xCA	; 202
    1bbc:	9d 4f       	sbci	r25, 0xFD	; 253
    1bbe:	0e 94 36 09 	call	0x126c	; 0x126c <usart1_send_string_P>
    1bc2:	85 e6       	ldi	r24, 0x65	; 101
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1bca:	f8 01       	movw	r30, r16
    1bcc:	ea 5f       	subi	r30, 0xFA	; 250
    1bce:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd0:	00 81       	ld	r16, Z
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	e6 59       	subi	r30, 0x96	; 150
    1bd8:	f9 4f       	sbci	r31, 0xF9	; 249
    1bda:	e0 81       	ld	r30, Z
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	e7 5e       	subi	r30, 0xE7	; 231
    1be4:	fd 4f       	sbci	r31, 0xFD	; 253
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1bee:	00 0f       	add	r16, r16
    1bf0:	11 1f       	adc	r17, r17
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	ec 50       	subi	r30, 0x0C	; 12
    1bf6:	fa 4f       	sbci	r31, 0xFA	; 250
    1bf8:	61 a5       	ldd	r22, Z+41	; 0x29
    1bfa:	72 a5       	ldd	r23, Z+42	; 0x2a
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatunsisf>
    1c04:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <tmp>
    1c08:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <tmp+0x1>
    1c0c:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <tmp+0x2>
    1c10:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <tmp+0x3>
    1c14:	07 e7       	ldi	r16, 0x77	; 119
    1c16:	14 ef       	ldi	r17, 0xF4	; 244
    1c18:	2f e3       	ldi	r18, 0x3F	; 63
    1c1a:	3b e3       	ldi	r19, 0x3B	; 59
    1c1c:	00 93 12 05 	sts	0x0512, r16	; 0x800512 <scale>
    1c20:	10 93 13 05 	sts	0x0513, r17	; 0x800513 <scale+0x1>
    1c24:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <scale+0x2>
    1c28:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <scale+0x3>
    1c2c:	25 e0       	ldi	r18, 0x05	; 5
    1c2e:	2f 15       	cp	r18, r15
    1c30:	78 f0       	brcs	.+30     	; 0x1c50 <show_data+0xd8>
    1c32:	23 e3       	ldi	r18, 0x33	; 51
    1c34:	33 e3       	ldi	r19, 0x33	; 51
    1c36:	43 ed       	ldi	r20, 0xD3	; 211
    1c38:	5b e3       	ldi	r21, 0x3B	; 59
    1c3a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__mulsf3>
    1c3e:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <tmp>
    1c42:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <tmp+0x1>
    1c46:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <tmp+0x2>
    1c4a:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <tmp+0x3>
    1c4e:	38 c0       	rjmp	.+112    	; 0x1cc0 <show_data+0x148>
    1c50:	26 e0       	ldi	r18, 0x06	; 6
    1c52:	f2 12       	cpse	r15, r18
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <show_data+0xfc>
    1c56:	23 e3       	ldi	r18, 0x33	; 51
    1c58:	33 e3       	ldi	r19, 0x33	; 51
    1c5a:	41 e1       	ldi	r20, 0x11	; 17
    1c5c:	5d e3       	ldi	r21, 0x3D	; 61
    1c5e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__mulsf3>
    1c62:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <tmp>
    1c66:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <tmp+0x1>
    1c6a:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <tmp+0x2>
    1c6e:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <tmp+0x3>
    1c72:	26 c0       	rjmp	.+76     	; 0x1cc0 <show_data+0x148>
    1c74:	20 e1       	ldi	r18, 0x10	; 16
    1c76:	2f 15       	cp	r18, r15
    1c78:	78 f0       	brcs	.+30     	; 0x1c98 <show_data+0x120>
    1c7a:	27 e7       	ldi	r18, 0x77	; 119
    1c7c:	34 ef       	ldi	r19, 0xF4	; 244
    1c7e:	4f e3       	ldi	r20, 0x3F	; 63
    1c80:	5b e3       	ldi	r21, 0x3B	; 59
    1c82:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__mulsf3>
    1c86:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <tmp>
    1c8a:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <tmp+0x1>
    1c8e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <tmp+0x2>
    1c92:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <tmp+0x3>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <show_data+0x148>
    1c98:	21 e1       	ldi	r18, 0x11	; 17
    1c9a:	f2 16       	cp	r15, r18
    1c9c:	89 f0       	breq	.+34     	; 0x1cc0 <show_data+0x148>
    1c9e:	22 e1       	ldi	r18, 0x12	; 18
    1ca0:	f2 12       	cpse	r15, r18
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <show_data+0x148>
    1ca4:	23 e3       	ldi	r18, 0x33	; 51
    1ca6:	33 e3       	ldi	r19, 0x33	; 51
    1ca8:	41 e1       	ldi	r20, 0x11	; 17
    1caa:	5d e3       	ldi	r21, 0x3D	; 61
    1cac:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__mulsf3>
    1cb0:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <tmp>
    1cb4:	70 93 17 05 	sts	0x0517, r23	; 0x800517 <tmp+0x1>
    1cb8:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <tmp+0x2>
    1cbc:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <tmp+0x3>
    1cc0:	89 ef       	ldi	r24, 0xF9	; 249
    1cc2:	8f 0d       	add	r24, r15
    1cc4:	8a 30       	cpi	r24, 0x0A	; 10
    1cc6:	18 f4       	brcc	.+6      	; 0x1cce <show_data+0x156>
    1cc8:	81 e4       	ldi	r24, 0x41	; 65
    1cca:	88 87       	std	Y+8, r24	; 0x08
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <show_data+0x15a>
    1cce:	86 e5       	ldi	r24, 0x56	; 86
    1cd0:	88 87       	std	Y+8, r24	; 0x08
    1cd2:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <tmp+0x3>
    1cd6:	8f 93       	push	r24
    1cd8:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <tmp+0x2>
    1cdc:	8f 93       	push	r24
    1cde:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <tmp+0x1>
    1ce2:	8f 93       	push	r24
    1ce4:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <tmp>
    1ce8:	8f 93       	push	r24
    1cea:	89 e6       	ldi	r24, 0x69	; 105
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	9f 93       	push	r25
    1cf0:	8f 93       	push	r24
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	0f 5f       	subi	r16, 0xFF	; 255
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	1f 93       	push	r17
    1cfa:	0f 93       	push	r16
    1cfc:	0e 94 99 18 	call	0x3132	; 0x3132 <sprintf>
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1d06:	88 85       	ldd	r24, Y+8	; 0x08
    1d08:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
    1d0c:	89 e8       	ldi	r24, 0x89	; 137
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1d14:	f3 94       	inc	r15
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	92 e1       	ldi	r25, 0x12	; 18
    1d22:	9f 15       	cp	r25, r15
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <show_data+0x1b0>
    1d26:	3e cf       	rjmp	.-388    	; 0x1ba4 <show_data+0x2c>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <show_data+0x1ba>
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	2a 96       	adiw	r28, 0x0a	; 10
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	08 95       	ret

00001d4a <Cmd_set_channel>:
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	91 05       	cpc	r25, r1
    1d54:	c4 f0       	brlt	.+48     	; 0x1d86 <Cmd_set_channel+0x3c>
    1d56:	04 97       	sbiw	r24, 0x04	; 4
    1d58:	cc f4       	brge	.+50     	; 0x1d8c <Cmd_set_channel+0x42>
    1d5a:	eb 01       	movw	r28, r22
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	0e 94 40 17 	call	0x2e80	; 0x2e80 <atoi>
    1d64:	18 2f       	mov	r17, r24
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <atoi>
    1d6e:	1a 30       	cpi	r17, 0x0A	; 10
    1d70:	80 f4       	brcc	.+32     	; 0x1d92 <Cmd_set_channel+0x48>
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	88 f4       	brcc	.+34     	; 0x1d98 <Cmd_set_channel+0x4e>
    1d76:	68 2f       	mov	r22, r24
    1d78:	87 e0       	ldi	r24, 0x07	; 7
    1d7a:	81 0f       	add	r24, r17
    1d7c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <POWER_ACTIVATE>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0b c0       	rjmp	.+22     	; 0x1d9c <Cmd_set_channel+0x52>
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	08 c0       	rjmp	.+16     	; 0x1d9c <Cmd_set_channel+0x52>
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <Cmd_set_channel+0x52>
    1d92:	84 e0       	ldi	r24, 0x04	; 4
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <Cmd_set_channel+0x52>
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	08 95       	ret

00001da4 <Cmd_set_buck>:
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	83 30       	cpi	r24, 0x03	; 3
    1dac:	91 05       	cpc	r25, r1
    1dae:	bc f0       	brlt	.+46     	; 0x1dde <Cmd_set_buck+0x3a>
    1db0:	04 97       	sbiw	r24, 0x04	; 4
    1db2:	c4 f4       	brge	.+48     	; 0x1de4 <Cmd_set_buck+0x40>
    1db4:	eb 01       	movw	r28, r22
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	0e 94 40 17 	call	0x2e80	; 0x2e80 <atoi>
    1dbe:	18 2f       	mov	r17, r24
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <atoi>
    1dc8:	17 30       	cpi	r17, 0x07	; 7
    1dca:	78 f4       	brcc	.+30     	; 0x1dea <Cmd_set_buck+0x46>
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	80 f4       	brcc	.+32     	; 0x1df0 <Cmd_set_buck+0x4c>
    1dd0:	68 2f       	mov	r22, r24
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <POWER_ACTIVATE>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <Cmd_set_buck+0x50>
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	08 c0       	rjmp	.+16     	; 0x1df4 <Cmd_set_buck+0x50>
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <Cmd_set_buck+0x50>
    1dea:	84 e0       	ldi	r24, 0x04	; 4
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <Cmd_set_buck+0x50>
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	08 95       	ret

00001dfc <Cmd_set_all>:
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	91 05       	cpc	r25, r1
    1e04:	b4 f0       	brlt	.+44     	; 0x1e32 <Cmd_set_all+0x36>
    1e06:	03 97       	sbiw	r24, 0x03	; 3
    1e08:	bc f4       	brge	.+46     	; 0x1e38 <Cmd_set_all+0x3c>
    1e0a:	fb 01       	movw	r30, r22
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	0e 94 40 17 	call	0x2e80	; 0x2e80 <atoi>
    1e14:	d8 2f       	mov	r29, r24
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	90 f4       	brcc	.+36     	; 0x1e3e <Cmd_set_all+0x42>
    1e1a:	c0 e0       	ldi	r28, 0x00	; 0
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <Cmd_set_all+0x2c>
    1e1e:	6d 2f       	mov	r22, r29
    1e20:	8c 2f       	mov	r24, r28
    1e22:	0e 94 d5 07 	call	0xfaa	; 0xfaa <POWER_ACTIVATE>
    1e26:	cf 5f       	subi	r28, 0xFF	; 255
    1e28:	c1 31       	cpi	r28, 0x11	; 17
    1e2a:	c8 f3       	brcs	.-14     	; 0x1e1e <Cmd_set_all+0x22>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <Cmd_set_all+0x46>
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <Cmd_set_all+0x46>
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <Cmd_set_all+0x46>
    1e3e:	84 e0       	ldi	r24, 0x04	; 4
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	08 95       	ret

00001e48 <command_task_update>:
    1e48:	cf 93       	push	r28
    1e4a:	4c c0       	rjmp	.+152    	; 0x1ee4 <command_task_update+0x9c>
    1e4c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <p_CommandRingBuffer>
    1e50:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <p_CommandRingBuffer+0x1>
    1e54:	0e 94 9a 08 	call	0x1134	; 0x1134 <rbuffer_remove>
    1e58:	c8 2f       	mov	r28, r24
    1e5a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
    1e5e:	cd 30       	cpi	r28, 0x0D	; 13
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <command_task_update+0x1e>
    1e62:	ca 30       	cpi	r28, 0x0A	; 10
    1e64:	29 f5       	brne	.+74     	; 0x1eb0 <command_task_update+0x68>
    1e66:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <s_commandBufferIndex>
    1e6a:	88 23       	and	r24, r24
    1e6c:	e1 f0       	breq	.+56     	; 0x1ea6 <command_task_update+0x5e>
    1e6e:	e8 2f       	mov	r30, r24
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	e5 5e       	subi	r30, 0xE5	; 229
    1e74:	fa 4f       	sbci	r31, 0xFA	; 250
    1e76:	10 82       	st	Z, r1
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <s_commandBufferIndex>
    1e7e:	8b e1       	ldi	r24, 0x1B	; 27
    1e80:	95 e0       	ldi	r25, 0x05	; 5
    1e82:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <CmdLineProcess>
    1e86:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <s_commandBufferIndex>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 0b       	sbc	r25, r25
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e0 57       	subi	r30, 0x70	; 112
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1e9c:	82 e7       	ldi	r24, 0x72	; 114
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1ea4:	1f c0       	rjmp	.+62     	; 0x1ee4 <command_task_update+0x9c>
    1ea6:	80 e7       	ldi	r24, 0x70	; 112
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
    1eae:	1a c0       	rjmp	.+52     	; 0x1ee4 <command_task_update+0x9c>
    1eb0:	c8 30       	cpi	r28, 0x08	; 8
    1eb2:	11 f0       	breq	.+4      	; 0x1eb8 <command_task_update+0x70>
    1eb4:	cf 37       	cpi	r28, 0x7F	; 127
    1eb6:	41 f4       	brne	.+16     	; 0x1ec8 <command_task_update+0x80>
    1eb8:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <s_commandBufferIndex>
    1ebc:	88 23       	and	r24, r24
    1ebe:	91 f0       	breq	.+36     	; 0x1ee4 <command_task_update+0x9c>
    1ec0:	81 50       	subi	r24, 0x01	; 1
    1ec2:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <s_commandBufferIndex>
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <command_task_update+0x9c>
    1ec8:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <s_commandBufferIndex>
    1ecc:	e8 2f       	mov	r30, r24
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	e5 5e       	subi	r30, 0xE5	; 229
    1ed2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed4:	c0 83       	st	Z, r28
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <s_commandBufferIndex>
    1edc:	81 38       	cpi	r24, 0x81	; 129
    1ede:	10 f0       	brcs	.+4      	; 0x1ee4 <command_task_update+0x9c>
    1ee0:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <s_commandBufferIndex>
    1ee4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <p_CommandRingBuffer>
    1ee8:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <p_CommandRingBuffer+0x1>
    1eec:	0e 94 76 08 	call	0x10ec	; 0x10ec <rbuffer_empty>
    1ef0:	88 23       	and	r24, r24
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <command_task_update+0xae>
    1ef4:	ab cf       	rjmp	.-170    	; 0x1e4c <command_task_update+0x4>
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <command_create_task>:
		POWER_ACTIVATE(i,state);
	return CMDLINE_OK;
}
void	command_create_task(void)
{
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
    1efa:	66 e6       	ldi	r22, 0x66	; 102
    1efc:	71 e0       	ldi	r23, 0x01	; 1
    1efe:	85 e6       	ldi	r24, 0x65	; 101
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <SCH_TASK_CreateTask>
    1f06:	08 95       	ret

00001f08 <command_send_splash>:
	{".......................................................\r\n"},
	{".......................................................\r\n"},
};
	
void	command_send_splash(void)
{
    1f08:	cf 93       	push	r28
	for(uint8_t i = 0 ; i < 21 ; i++) {
    1f0a:	c0 e0       	ldi	r28, 0x00	; 0
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <command_send_splash+0x18>
		usart1_send_string_P(&SPLASH[i][0]);
    1f0e:	21 e4       	ldi	r18, 0x41	; 65
    1f10:	c2 9f       	mul	r28, r18
    1f12:	c0 01       	movw	r24, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	86 5e       	subi	r24, 0xE6	; 230
    1f18:	9c 4f       	sbci	r25, 0xFC	; 252
    1f1a:	0e 94 36 09 	call	0x126c	; 0x126c <usart1_send_string_P>
	{".......................................................\r\n"},
};
	
void	command_send_splash(void)
{
	for(uint8_t i = 0 ; i < 21 ; i++) {
    1f1e:	cf 5f       	subi	r28, 0xFF	; 255
    1f20:	c5 31       	cpi	r28, 0x15	; 21
    1f22:	a8 f3       	brcs	.-22     	; 0x1f0e <command_send_splash+0x6>
		usart1_send_string_P(&SPLASH[i][0]);
	}
	usart1_send_char('>');
    1f24:	8e e3       	ldi	r24, 0x3E	; 62
    1f26:	0e 94 f6 08 	call	0x11ec	; 0x11ec <usart1_send_char>
}
    1f2a:	cf 91       	pop	r28
    1f2c:	08 95       	ret

00001f2e <command_init>:
	}
};

void	command_init(void)
{
	usart1_init();
    1f2e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <usart1_init>
	
	p_CommandRingBuffer = uart_get_uart1_rx_buffer_address();
    1f32:	0e 94 45 09 	call	0x128a	; 0x128a <uart_get_uart1_rx_buffer_address>
    1f36:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <p_CommandRingBuffer+0x1>
    1f3a:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <p_CommandRingBuffer>
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
    1f3e:	80 e8       	ldi	r24, 0x80	; 128
    1f40:	eb e1       	ldi	r30, 0x1B	; 27
    1f42:	f5 e0       	ldi	r31, 0x05	; 5
    1f44:	df 01       	movw	r26, r30
    1f46:	1d 92       	st	X+, r1
    1f48:	8a 95       	dec	r24
    1f4a:	e9 f7       	brne	.-6      	; 0x1f46 <command_init+0x18>
	s_commandBufferIndex = 0;
    1f4c:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <s_commandBufferIndex>
	usart1_send_string("PDU FIRMWARE V1.0.0 \r\n");
    1f50:	85 e7       	ldi	r24, 0x75	; 117
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
	usart1_send_string(">");
    1f58:	8c e8       	ldi	r24, 0x8C	; 140
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	0e 94 12 09 	call	0x1224	; 0x1224 <usart1_send_string>
	command_send_splash();
    1f60:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <command_send_splash>
    1f64:	08 95       	ret

00001f66 <SCH_Initialize>:
  * @retval system ticks
  *****************************************************************************/
uint16_t SCH_SystemTick(void)
{
  return s_SystemTick;
}
    1f66:	10 92 8e 08 	sts	0x088E, r1	; 0x80088e <s_SystemTick+0x1>
    1f6a:	10 92 8d 08 	sts	0x088D, r1	; 0x80088d <s_SystemTick>
    1f6e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <s_NumOfTaskScheduled>
    1f72:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <s_NumOfTimers>
    1f76:	8a e2       	ldi	r24, 0x2A	; 42
    1f78:	e9 ec       	ldi	r30, 0xC9	; 201
    1f7a:	f5 e0       	ldi	r31, 0x05	; 5
    1f7c:	df 01       	movw	r26, r30
    1f7e:	98 2f       	mov	r25, r24
    1f80:	1d 92       	st	X+, r1
    1f82:	9a 95       	dec	r25
    1f84:	e9 f7       	brne	.-6      	; 0x1f80 <SCH_Initialize+0x1a>
    1f86:	ee e9       	ldi	r30, 0x9E	; 158
    1f88:	f5 e0       	ldi	r31, 0x05	; 5
    1f8a:	df 01       	movw	r26, r30
    1f8c:	1d 92       	st	X+, r1
    1f8e:	8a 95       	dec	r24
    1f90:	e9 f7       	brne	.-6      	; 0x1f8c <SCH_Initialize+0x26>
    1f92:	88 e0       	ldi	r24, 0x08	; 8
    1f94:	ef e8       	ldi	r30, 0x8F	; 143
    1f96:	f8 e0       	ldi	r31, 0x08	; 8
    1f98:	df 01       	movw	r26, r30
    1f9a:	1d 92       	st	X+, r1
    1f9c:	8a 95       	dec	r24
    1f9e:	e9 f7       	brne	.-6      	; 0x1f9a <SCH_Initialize+0x34>
    1fa0:	0e 94 55 08 	call	0x10aa	; 0x10aa <timer_timer0_init>
    1fa4:	08 95       	ret

00001fa6 <SCH_TIM_Start>:
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	40 f4       	brcc	.+16     	; 0x1fba <SCH_TIM_Start+0x14>
    1faa:	e8 2f       	mov	r30, r24
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	e1 57       	subi	r30, 0x71	; 113
    1fb4:	f7 4f       	sbci	r31, 0xF7	; 247
    1fb6:	51 83       	std	Z+1, r21	; 0x01
    1fb8:	40 83       	st	Z, r20
    1fba:	08 95       	ret

00001fbc <SCH_TIM_HasCompleted>:
    1fbc:	e8 2f       	mov	r30, r24
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	ee 0f       	add	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	e1 57       	subi	r30, 0x71	; 113
    1fc6:	f7 4f       	sbci	r31, 0xF7	; 247
    1fc8:	20 81       	ld	r18, Z
    1fca:	31 81       	ldd	r19, Z+1	; 0x01
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	23 2b       	or	r18, r19
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <SCH_TIM_HasCompleted+0x18>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	08 95       	ret

00001fd6 <SCH_TASK_CreateTask>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	ec 01       	movw	r28, r24
    1fdc:	89 2b       	or	r24, r25
    1fde:	39 f1       	breq	.+78     	; 0x202e <SCH_TASK_CreateTask+0x58>
    1fe0:	61 15       	cp	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	31 f1       	breq	.+76     	; 0x2032 <SCH_TASK_CreateTask+0x5c>
    1fe6:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <s_NumOfTaskScheduled>
    1fea:	96 30       	cpi	r25, 0x06	; 6
    1fec:	20 f5       	brcc	.+72     	; 0x2036 <SCH_TASK_CreateTask+0x60>
    1fee:	29 2f       	mov	r18, r25
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	df 01       	movw	r26, r30
    1ffa:	a2 0f       	add	r26, r18
    1ffc:	b3 1f       	adc	r27, r19
    1ffe:	aa 0f       	add	r26, r26
    2000:	bb 1f       	adc	r27, r27
    2002:	a7 53       	subi	r26, 0x37	; 55
    2004:	ba 4f       	sbci	r27, 0xFA	; 250
    2006:	15 96       	adiw	r26, 0x05	; 5
    2008:	7c 93       	st	X, r23
    200a:	6e 93       	st	-X, r22
    200c:	14 97       	sbiw	r26, 0x04	; 4
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	1c 92       	st	X, r1
    2012:	11 97       	sbiw	r26, 0x01	; 1
    2014:	13 96       	adiw	r26, 0x03	; 3
    2016:	1c 92       	st	X, r1
    2018:	1e 92       	st	-X, r1
    201a:	12 97       	sbiw	r26, 0x02	; 2
    201c:	fd 01       	movw	r30, r26
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	80 83       	st	Z, r24
    2022:	98 83       	st	Y, r25
    2024:	9f 5f       	subi	r25, 0xFF	; 255
    2026:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <s_NumOfTaskScheduled>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <SCH_TASK_CreateTask+0x62>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <SCH_TASK_CreateTask+0x62>
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <SCH_TASK_CreateTask+0x62>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	08 95       	ret

0000203e <SCH_RunSystemTickTimer>:
    203e:	cf 92       	push	r12
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <s_SystemTick>
    204a:	90 91 8e 08 	lds	r25, 0x088E	; 0x80088e <s_SystemTick+0x1>
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <s_SystemTick+0x1>
    2054:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <s_SystemTick>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	43 c0       	rjmp	.+134    	; 0x20e2 <SCH_RunSystemTickTimer+0xa4>
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	f9 01       	movw	r30, r18
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	e7 53       	subi	r30, 0x37	; 55
    2070:	fa 4f       	sbci	r31, 0xFA	; 250
    2072:	a4 81       	ldd	r26, Z+4	; 0x04
    2074:	b5 81       	ldd	r27, Z+5	; 0x05
    2076:	9c 91       	ld	r25, X
    2078:	91 30       	cpi	r25, 0x01	; 1
    207a:	91 f5       	brne	.+100    	; 0x20e0 <SCH_RunSystemTickTimer+0xa2>
    207c:	f9 01       	movw	r30, r18
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	e7 53       	subi	r30, 0x37	; 55
    208c:	fa 4f       	sbci	r31, 0xFA	; 250
    208e:	90 81       	ld	r25, Z
    2090:	91 30       	cpi	r25, 0x01	; 1
    2092:	31 f5       	brne	.+76     	; 0x20e0 <SCH_RunSystemTickTimer+0xa2>
    2094:	f9 01       	movw	r30, r18
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	e2 0f       	add	r30, r18
    209c:	f3 1f       	adc	r31, r19
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e7 53       	subi	r30, 0x37	; 55
    20a4:	fa 4f       	sbci	r31, 0xFA	; 250
    20a6:	42 81       	ldd	r20, Z+2	; 0x02
    20a8:	53 81       	ldd	r21, Z+3	; 0x03
    20aa:	4f 5f       	subi	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	53 83       	std	Z+3, r21	; 0x03
    20b0:	42 83       	std	Z+2, r20	; 0x02
    20b2:	12 96       	adiw	r26, 0x02	; 2
    20b4:	6d 91       	ld	r22, X+
    20b6:	7c 91       	ld	r23, X
    20b8:	13 97       	sbiw	r26, 0x03	; 3
    20ba:	46 17       	cp	r20, r22
    20bc:	57 07       	cpc	r21, r23
    20be:	80 f0       	brcs	.+32     	; 0x20e0 <SCH_RunSystemTickTimer+0xa2>
    20c0:	f9 01       	movw	r30, r18
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	df 01       	movw	r26, r30
    20c8:	a2 0f       	add	r26, r18
    20ca:	b3 1f       	adc	r27, r19
    20cc:	aa 0f       	add	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	a7 53       	subi	r26, 0x37	; 55
    20d2:	ba 4f       	sbci	r27, 0xFA	; 250
    20d4:	13 96       	adiw	r26, 0x03	; 3
    20d6:	1c 92       	st	X, r1
    20d8:	1e 92       	st	-X, r1
    20da:	12 97       	sbiw	r26, 0x02	; 2
    20dc:	fd 01       	movw	r30, r26
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <s_NumOfTaskScheduled>
    20e6:	89 17       	cp	r24, r25
    20e8:	08 f4       	brcc	.+2      	; 0x20ec <SCH_RunSystemTickTimer+0xae>
    20ea:	b8 cf       	rjmp	.-144    	; 0x205c <SCH_RunSystemTickTimer+0x1e>
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	47 c0       	rjmp	.+142    	; 0x217e <SCH_RunSystemTickTimer+0x140>
    20f0:	82 2f       	mov	r24, r18
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	fc 01       	movw	r30, r24
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	e8 0f       	add	r30, r24
    20fc:	f9 1f       	adc	r31, r25
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e2 56       	subi	r30, 0x62	; 98
    2104:	fa 4f       	sbci	r31, 0xFA	; 250
    2106:	30 81       	ld	r19, Z
    2108:	31 30       	cpi	r19, 0x01	; 1
    210a:	c1 f5       	brne	.+112    	; 0x217c <SCH_RunSystemTickTimer+0x13e>
    210c:	fc 01       	movw	r30, r24
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	e2 56       	subi	r30, 0x62	; 98
    211c:	fa 4f       	sbci	r31, 0xFA	; 250
    211e:	42 81       	ldd	r20, Z+2	; 0x02
    2120:	53 81       	ldd	r21, Z+3	; 0x03
    2122:	4f 5f       	subi	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255
    2126:	53 83       	std	Z+3, r21	; 0x03
    2128:	42 83       	std	Z+2, r20	; 0x02
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	a4 81       	ldd	r26, Z+4	; 0x04
    2130:	b5 81       	ldd	r27, Z+5	; 0x05
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	cd 90       	ld	r12, X+
    2136:	dd 90       	ld	r13, X+
    2138:	ed 90       	ld	r14, X+
    213a:	fc 90       	ld	r15, X
    213c:	14 97       	sbiw	r26, 0x04	; 4
    213e:	4c 15       	cp	r20, r12
    2140:	5d 05       	cpc	r21, r13
    2142:	6e 05       	cpc	r22, r14
    2144:	7f 05       	cpc	r23, r15
    2146:	d0 f0       	brcs	.+52     	; 0x217c <SCH_RunSystemTickTimer+0x13e>
    2148:	fc 01       	movw	r30, r24
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	e8 0f       	add	r30, r24
    2150:	f9 1f       	adc	r31, r25
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	e2 56       	subi	r30, 0x62	; 98
    2158:	fa 4f       	sbci	r31, 0xFA	; 250
    215a:	31 83       	std	Z+1, r19	; 0x01
    215c:	13 82       	std	Z+3, r1	; 0x03
    215e:	12 82       	std	Z+2, r1	; 0x02
    2160:	4c 91       	ld	r20, X
    2162:	42 30       	cpi	r20, 0x02	; 2
    2164:	09 f0       	breq	.+2      	; 0x2168 <SCH_RunSystemTickTimer+0x12a>
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	fc 01       	movw	r30, r24
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	e8 0f       	add	r30, r24
    2170:	f9 1f       	adc	r31, r25
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e2 56       	subi	r30, 0x62	; 98
    2178:	fa 4f       	sbci	r31, 0xFA	; 250
    217a:	30 83       	st	Z, r19
    217c:	2f 5f       	subi	r18, 0xFF	; 255
    217e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <s_NumOfTimers>
    2182:	28 17       	cp	r18, r24
    2184:	08 f4       	brcc	.+2      	; 0x2188 <SCH_RunSystemTickTimer+0x14a>
    2186:	b4 cf       	rjmp	.-152    	; 0x20f0 <SCH_RunSystemTickTimer+0xb2>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	17 c0       	rjmp	.+46     	; 0x21ba <SCH_RunSystemTickTimer+0x17c>
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	f9 01       	movw	r30, r18
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	e1 57       	subi	r30, 0x71	; 113
    2198:	f7 4f       	sbci	r31, 0xF7	; 247
    219a:	40 81       	ld	r20, Z
    219c:	51 81       	ldd	r21, Z+1	; 0x01
    219e:	45 2b       	or	r20, r21
    21a0:	59 f0       	breq	.+22     	; 0x21b8 <SCH_RunSystemTickTimer+0x17a>
    21a2:	22 0f       	add	r18, r18
    21a4:	33 1f       	adc	r19, r19
    21a6:	f9 01       	movw	r30, r18
    21a8:	e1 57       	subi	r30, 0x71	; 113
    21aa:	f7 4f       	sbci	r31, 0xF7	; 247
    21ac:	20 81       	ld	r18, Z
    21ae:	31 81       	ldd	r19, Z+1	; 0x01
    21b0:	21 50       	subi	r18, 0x01	; 1
    21b2:	31 09       	sbc	r19, r1
    21b4:	31 83       	std	Z+1, r19	; 0x01
    21b6:	20 83       	st	Z, r18
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	38 f3       	brcs	.-50     	; 0x218c <SCH_RunSystemTickTimer+0x14e>
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	08 95       	ret

000021c8 <SCH_StartSchedular>:
    21c8:	0e 94 4d 08 	call	0x109a	; 0x109a <timer_start_timer0>
    21cc:	08 95       	ret

000021ce <SCH_HandleScheduledTask>:
    21ce:	cf 93       	push	r28
    21d0:	c0 e0       	ldi	r28, 0x00	; 0
    21d2:	32 c0       	rjmp	.+100    	; 0x2238 <SCH_HandleScheduledTask+0x6a>
    21d4:	8c 2f       	mov	r24, r28
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	fc 01       	movw	r30, r24
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	e8 0f       	add	r30, r24
    21e0:	f9 1f       	adc	r31, r25
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	e7 53       	subi	r30, 0x37	; 55
    21e8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ea:	21 81       	ldd	r18, Z+1	; 0x01
    21ec:	21 30       	cpi	r18, 0x01	; 1
    21ee:	19 f5       	brne	.+70     	; 0x2236 <SCH_HandleScheduledTask+0x68>
    21f0:	fc 01       	movw	r30, r24
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	e8 0f       	add	r30, r24
    21f8:	f9 1f       	adc	r31, r25
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	e7 53       	subi	r30, 0x37	; 55
    2200:	fa 4f       	sbci	r31, 0xFA	; 250
    2202:	20 81       	ld	r18, Z
    2204:	21 30       	cpi	r18, 0x01	; 1
    2206:	b9 f4       	brne	.+46     	; 0x2236 <SCH_HandleScheduledTask+0x68>
    2208:	fc 01       	movw	r30, r24
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	df 01       	movw	r26, r30
    2210:	a8 0f       	add	r26, r24
    2212:	b9 1f       	adc	r27, r25
    2214:	aa 0f       	add	r26, r26
    2216:	bb 1f       	adc	r27, r27
    2218:	a7 53       	subi	r26, 0x37	; 55
    221a:	ba 4f       	sbci	r27, 0xFA	; 250
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	1c 92       	st	X, r1
    2220:	11 97       	sbiw	r26, 0x01	; 1
    2222:	fd 01       	movw	r30, r26
    2224:	04 80       	ldd	r0, Z+4	; 0x04
    2226:	f5 81       	ldd	r31, Z+5	; 0x05
    2228:	e0 2d       	mov	r30, r0
    222a:	04 80       	ldd	r0, Z+4	; 0x04
    222c:	f5 81       	ldd	r31, Z+5	; 0x05
    222e:	e0 2d       	mov	r30, r0
    2230:	30 97       	sbiw	r30, 0x00	; 0
    2232:	09 f0       	breq	.+2      	; 0x2236 <SCH_HandleScheduledTask+0x68>
    2234:	09 95       	icall
    2236:	cf 5f       	subi	r28, 0xFF	; 255
    2238:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <s_NumOfTaskScheduled>
    223c:	c8 17       	cp	r28, r24
    223e:	50 f2       	brcs	.-108    	; 0x21d4 <SCH_HandleScheduledTask+0x6>
    2240:	c0 e0       	ldi	r28, 0x00	; 0
    2242:	26 c0       	rjmp	.+76     	; 0x2290 <SCH_HandleScheduledTask+0xc2>
    2244:	8c 2f       	mov	r24, r28
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e8 0f       	add	r30, r24
    2250:	f9 1f       	adc	r31, r25
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	e2 56       	subi	r30, 0x62	; 98
    2258:	fa 4f       	sbci	r31, 0xFA	; 250
    225a:	21 81       	ldd	r18, Z+1	; 0x01
    225c:	21 30       	cpi	r18, 0x01	; 1
    225e:	b9 f4       	brne	.+46     	; 0x228e <SCH_HandleScheduledTask+0xc0>
    2260:	fc 01       	movw	r30, r24
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	df 01       	movw	r26, r30
    2268:	a8 0f       	add	r26, r24
    226a:	b9 1f       	adc	r27, r25
    226c:	aa 0f       	add	r26, r26
    226e:	bb 1f       	adc	r27, r27
    2270:	a2 56       	subi	r26, 0x62	; 98
    2272:	ba 4f       	sbci	r27, 0xFA	; 250
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	1c 92       	st	X, r1
    2278:	11 97       	sbiw	r26, 0x01	; 1
    227a:	fd 01       	movw	r30, r26
    227c:	04 80       	ldd	r0, Z+4	; 0x04
    227e:	f5 81       	ldd	r31, Z+5	; 0x05
    2280:	e0 2d       	mov	r30, r0
    2282:	05 80       	ldd	r0, Z+5	; 0x05
    2284:	f6 81       	ldd	r31, Z+6	; 0x06
    2286:	e0 2d       	mov	r30, r0
    2288:	30 97       	sbiw	r30, 0x00	; 0
    228a:	09 f0       	breq	.+2      	; 0x228e <SCH_HandleScheduledTask+0xc0>
    228c:	09 95       	icall
    228e:	cf 5f       	subi	r28, 0xFF	; 255
    2290:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <s_NumOfTimers>
    2294:	c8 17       	cp	r28, r24
    2296:	b0 f2       	brcs	.-84     	; 0x2244 <SCH_HandleScheduledTask+0x76>
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <__vector_15>:

ISR (TIMER0_COMP_vect)
{
    229c:	1f 92       	push	r1
    229e:	0f 92       	push	r0
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	0f 92       	push	r0
    22a4:	11 24       	eor	r1, r1
    22a6:	2f 93       	push	r18
    22a8:	3f 93       	push	r19
    22aa:	4f 93       	push	r20
    22ac:	5f 93       	push	r21
    22ae:	6f 93       	push	r22
    22b0:	7f 93       	push	r23
    22b2:	8f 93       	push	r24
    22b4:	9f 93       	push	r25
    22b6:	af 93       	push	r26
    22b8:	bf 93       	push	r27
    22ba:	ef 93       	push	r30
    22bc:	ff 93       	push	r31
	SCH_RunSystemTickTimer();
    22be:	0e 94 1f 10 	call	0x203e	; 0x203e <SCH_RunSystemTickTimer>
	if(ADC_data.Status == WAIT) {
    22c2:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <ADC_data>
    22c6:	82 30       	cpi	r24, 0x02	; 2
    22c8:	69 f4       	brne	.+26     	; 0x22e4 <__vector_15+0x48>
		if(ADC_data.Wait > 0)
    22ca:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <ADC_data+0x15>
    22ce:	88 23       	and	r24, r24
    22d0:	31 f0       	breq	.+12     	; 0x22de <__vector_15+0x42>
			ADC_data.Wait--;
    22d2:	e4 ef       	ldi	r30, 0xF4	; 244
    22d4:	f5 e0       	ldi	r31, 0x05	; 5
    22d6:	85 89       	ldd	r24, Z+21	; 0x15
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	85 8b       	std	Z+21, r24	; 0x15
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__vector_15+0x48>
		else {
			ADCSRA |= (1<<ADSC);
    22de:	86 b1       	in	r24, 0x06	; 6
    22e0:	80 64       	ori	r24, 0x40	; 64
    22e2:	86 b9       	out	0x06, r24	; 6
//			ADC_data.Wait = MUX_WAIT_FOR_STABLE;
		}
	}
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	bf 91       	pop	r27
    22ea:	af 91       	pop	r26
    22ec:	9f 91       	pop	r25
    22ee:	8f 91       	pop	r24
    22f0:	7f 91       	pop	r23
    22f2:	6f 91       	pop	r22
    22f4:	5f 91       	pop	r21
    22f6:	4f 91       	pop	r20
    22f8:	3f 91       	pop	r19
    22fa:	2f 91       	pop	r18
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	0f 90       	pop	r0
    2302:	1f 90       	pop	r1
    2304:	18 95       	reti

00002306 <crc16_CCITT>:
 */

#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    2306:	fb 01       	movw	r30, r22
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    2308:	20 c0       	rjmp	.+64     	; 0x234a <crc16_CCITT+0x44>
    {
        x = crc >> 8 ^ *data++;
    230a:	70 81       	ld	r23, Z
    230c:	79 27       	eor	r23, r25
        x ^= x >> 4;
    230e:	27 2f       	mov	r18, r23
    2310:	22 95       	swap	r18
    2312:	2f 70       	andi	r18, 0x0F	; 15
    2314:	72 27       	eor	r23, r18
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
    2316:	38 2f       	mov	r19, r24
    2318:	22 27       	eor	r18, r18
    231a:	a7 2f       	mov	r26, r23
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	57 2f       	mov	r21, r23
    2322:	52 95       	swap	r21
    2324:	50 7f       	andi	r21, 0xF0	; 240
    2326:	c9 01       	movw	r24, r18
    2328:	84 27       	eor	r24, r20
    232a:	95 27       	eor	r25, r21
    232c:	9d 01       	movw	r18, r26
    232e:	22 0f       	add	r18, r18
    2330:	33 1f       	adc	r19, r19
    2332:	22 95       	swap	r18
    2334:	32 95       	swap	r19
    2336:	30 7f       	andi	r19, 0xF0	; 240
    2338:	32 27       	eor	r19, r18
    233a:	20 7f       	andi	r18, 0xF0	; 240
    233c:	32 27       	eor	r19, r18
    233e:	82 27       	eor	r24, r18
    2340:	93 27       	eor	r25, r19
    2342:	8a 27       	eor	r24, r26
    2344:	9b 27       	eor	r25, r27
uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    2346:	46 2f       	mov	r20, r22
    {
        x = crc >> 8 ^ *data++;
    2348:	31 96       	adiw	r30, 0x01	; 1
uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
    uint8_t x;
    uint16_t crc = initial_value;
    
    while(size--)
    234a:	6f ef       	ldi	r22, 0xFF	; 255
    234c:	64 0f       	add	r22, r20
    234e:	41 11       	cpse	r20, r1
    2350:	dc cf       	rjmp	.-72     	; 0x230a <crc16_CCITT+0x4>
        x ^= x >> 4;
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
    }
    
    return crc;
}
    2352:	08 95       	ret

00002354 <fsp_init>:
    
    pkt[i++] = (uint8_t)(fsp->crc16 >> 8);
    pkt[i++] = (uint8_t)(fsp->crc16);
    
    *pkt_len = i;
}
    2354:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <fsp_my_adr>
    2358:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <fsp_decode_pos>
    235c:	08 95       	ret

0000235e <fsp_decode>:

uint8_t fsp_decode(uint8_t byte, fsp_packet_t *fsp)
{
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	28 2f       	mov	r18, r24
    switch(fsp_decode_pos)
    2364:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <fsp_decode_pos>
    2368:	82 30       	cpi	r24, 0x02	; 2
    236a:	e9 f0       	breq	.+58     	; 0x23a6 <fsp_decode+0x48>
    236c:	28 f4       	brcc	.+10     	; 0x2378 <fsp_decode+0x1a>
    236e:	88 23       	and	r24, r24
    2370:	41 f0       	breq	.+16     	; 0x2382 <fsp_decode+0x24>
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	89 f0       	breq	.+34     	; 0x2398 <fsp_decode+0x3a>
    2376:	39 c0       	rjmp	.+114    	; 0x23ea <fsp_decode+0x8c>
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	11 f1       	breq	.+68     	; 0x23c0 <fsp_decode+0x62>
    237c:	84 30       	cpi	r24, 0x04	; 4
    237e:	69 f1       	breq	.+90     	; 0x23da <fsp_decode+0x7c>
    2380:	34 c0       	rjmp	.+104    	; 0x23ea <fsp_decode+0x8c>
    {
        case FSP_PKT_POS_SOD:
            if (byte == FSP_PKT_SOD)
    2382:	2e 37       	cpi	r18, 0x7E	; 126
    2384:	09 f0       	breq	.+2      	; 0x2388 <fsp_decode+0x2a>
    2386:	73 c0       	rjmp	.+230    	; 0x246e <fsp_decode+0x110>
            {
                fsp->sod = byte;
    2388:	db 01       	movw	r26, r22
    238a:	2c 93       	st	X, r18
                
                fsp_decode_pos++;
    238c:	90 91 f3 05 	lds	r25, 0x05F3	; 0x8005f3 <fsp_decode_pos>
    2390:	9f 5f       	subi	r25, 0xFF	; 255
    2392:	90 93 f3 05 	sts	0x05F3, r25	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    2396:	70 c0       	rjmp	.+224    	; 0x2478 <fsp_decode+0x11a>
            else
            {
                return FSP_PKT_INVALID;
            }
        case FSP_PKT_POS_SRC_ADR:
            fsp->src_adr = byte;
    2398:	fb 01       	movw	r30, r22
    239a:	21 83       	std	Z+1, r18	; 0x01
            fsp_decode_pos++;
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <fsp_decode_pos>
            
            return FSP_PKT_NOT_READY;
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	69 c0       	rjmp	.+210    	; 0x2478 <fsp_decode+0x11a>
        case FSP_PKT_POS_DST_ADR:
            fsp->dst_adr = byte;
    23a6:	db 01       	movw	r26, r22
    23a8:	12 96       	adiw	r26, 0x02	; 2
    23aa:	2c 93       	st	X, r18
            fsp_decode_pos++;
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	98 0f       	add	r25, r24
    23b0:	90 93 f3 05 	sts	0x05F3, r25	; 0x8005f3 <fsp_decode_pos>
            
            if (byte == fsp_my_adr)
    23b4:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <fsp_my_adr>
    23b8:	28 13       	cpse	r18, r24
    23ba:	5b c0       	rjmp	.+182    	; 0x2472 <fsp_decode+0x114>
            {
                return FSP_PKT_NOT_READY;
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	5c c0       	rjmp	.+184    	; 0x2478 <fsp_decode+0x11a>
            else
            {
                return FSP_PKT_WRONG_ADR;
            }
        case FSP_PKT_POS_LEN:
            if (byte > FSP_PAYLOAD_MAX_LENGTH)
    23c0:	29 3f       	cpi	r18, 0xF9	; 249
    23c2:	20 f0       	brcs	.+8      	; 0x23cc <fsp_decode+0x6e>
            {
                fsp_decode_pos = FSP_PKT_POS_SOD;
    23c4:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_INVALID;
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	56 c0       	rjmp	.+172    	; 0x2478 <fsp_decode+0x11a>
            }
            else
            {
                fsp->length = byte;
    23cc:	fb 01       	movw	r30, r22
    23ce:	23 83       	std	Z+3, r18	; 0x03
                fsp_decode_pos++;
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	4f c0       	rjmp	.+158    	; 0x2478 <fsp_decode+0x11a>
            }
        case FSP_PKT_POS_TYPE:
            fsp->type = byte;
    23da:	db 01       	movw	r26, r22
    23dc:	14 96       	adiw	r26, 0x04	; 4
    23de:	2c 93       	st	X, r18
            fsp_decode_pos++;
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <fsp_decode_pos>
            
            return FSP_PKT_NOT_READY;
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	47 c0       	rjmp	.+142    	; 0x2478 <fsp_decode+0x11a>
        default:
            if (fsp_decode_pos < (FSP_PKT_POS_TYPE + fsp->length + 1))          // Payload
    23ea:	e8 2f       	mov	r30, r24
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	db 01       	movw	r26, r22
    23f0:	13 96       	adiw	r26, 0x03	; 3
    23f2:	9c 91       	ld	r25, X
    23f4:	a9 2f       	mov	r26, r25
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ad 01       	movw	r20, r26
    23fa:	4b 5f       	subi	r20, 0xFB	; 251
    23fc:	5f 4f       	sbci	r21, 0xFF	; 255
    23fe:	e4 17       	cp	r30, r20
    2400:	f5 07       	cpc	r31, r21
    2402:	4c f4       	brge	.+18     	; 0x2416 <fsp_decode+0xb8>
            {
                fsp->payload[fsp_decode_pos - FSP_PKT_POS_TYPE - 1] = byte;
    2404:	35 97       	sbiw	r30, 0x05	; 5
    2406:	e6 0f       	add	r30, r22
    2408:	f7 1f       	adc	r31, r23
    240a:	25 83       	std	Z+5, r18	; 0x05
                fsp_decode_pos++;
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	31 c0       	rjmp	.+98     	; 0x2478 <fsp_decode+0x11a>
            }
            else if (fsp_decode_pos == (FSP_PKT_POS_TYPE + fsp->length + 1))    // CRC16 MSB
    2416:	e4 17       	cp	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	51 f4       	brne	.+20     	; 0x2430 <fsp_decode+0xd2>
            {
                fsp->crc16 = (uint16_t)(byte << 8);
    241c:	fb 01       	movw	r30, r22
    241e:	e3 50       	subi	r30, 0x03	; 3
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	10 82       	st	Z, r1
    2424:	21 83       	std	Z+1, r18	; 0x01
                
                fsp_decode_pos++;
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_NOT_READY;
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	24 c0       	rjmp	.+72     	; 0x2478 <fsp_decode+0x11a>
            }
            else if (fsp_decode_pos == (FSP_PKT_POS_TYPE + fsp->length + 2))    // CRC16 LSB
    2430:	16 96       	adiw	r26, 0x06	; 6
    2432:	ea 17       	cp	r30, r26
    2434:	fb 07       	cpc	r31, r27
    2436:	b9 f4       	brne	.+46     	; 0x2466 <fsp_decode+0x108>
            {
                fsp->crc16 |= (uint16_t)(byte);
    2438:	fb 01       	movw	r30, r22
    243a:	e3 50       	subi	r30, 0x03	; 3
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	c0 81       	ld	r28, Z
    2440:	d1 81       	ldd	r29, Z+1	; 0x01
    2442:	c2 2b       	or	r28, r18
    2444:	d1 83       	std	Z+1, r29	; 0x01
    2446:	c0 83       	st	Z, r28
                
                fsp_decode_pos = FSP_PKT_POS_SOD;
    2448:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <fsp_decode_pos>
                
                if (fsp->crc16 == crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4))
    244c:	44 e0       	ldi	r20, 0x04	; 4
    244e:	49 0f       	add	r20, r25
    2450:	6f 5f       	subi	r22, 0xFF	; 255
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 83 11 	call	0x2306	; 0x2306 <crc16_CCITT>
    245c:	c8 17       	cp	r28, r24
    245e:	d9 07       	cpc	r29, r25
    2460:	51 f4       	brne	.+20     	; 0x2476 <fsp_decode+0x118>
                {
                    return FSP_PKT_READY;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	09 c0       	rjmp	.+18     	; 0x2478 <fsp_decode+0x11a>
                    return FSP_PKT_INVALID;
                }
            }
            else
            {
                fsp_decode_pos = FSP_PKT_POS_SOD;
    2466:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <fsp_decode_pos>
                
                return FSP_PKT_ERROR;
    246a:	84 e0       	ldi	r24, 0x04	; 4
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <fsp_decode+0x11a>
                
                return FSP_PKT_NOT_READY;
            }
            else
            {
                return FSP_PKT_INVALID;
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <fsp_decode+0x11a>
            {
                return FSP_PKT_NOT_READY;
            }
            else
            {
                return FSP_PKT_WRONG_ADR;
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <fsp_decode+0x11a>
                {
                    return FSP_PKT_READY;
                }
                else
                {
                    return FSP_PKT_INVALID;
    2476:	82 e0       	ldi	r24, 0x02	; 2
                fsp_decode_pos = FSP_PKT_POS_SOD;
                
                return FSP_PKT_ERROR;
            }
    }
}
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	08 95       	ret

0000247e <__floatunsisf>:
    247e:	e8 94       	clt
    2480:	09 c0       	rjmp	.+18     	; 0x2494 <__floatsisf+0x12>

00002482 <__floatsisf>:
    2482:	97 fb       	bst	r25, 7
    2484:	3e f4       	brtc	.+14     	; 0x2494 <__floatsisf+0x12>
    2486:	90 95       	com	r25
    2488:	80 95       	com	r24
    248a:	70 95       	com	r23
    248c:	61 95       	neg	r22
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	8f 4f       	sbci	r24, 0xFF	; 255
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	99 23       	and	r25, r25
    2496:	a9 f0       	breq	.+42     	; 0x24c2 <__floatsisf+0x40>
    2498:	f9 2f       	mov	r31, r25
    249a:	96 e9       	ldi	r25, 0x96	; 150
    249c:	bb 27       	eor	r27, r27
    249e:	93 95       	inc	r25
    24a0:	f6 95       	lsr	r31
    24a2:	87 95       	ror	r24
    24a4:	77 95       	ror	r23
    24a6:	67 95       	ror	r22
    24a8:	b7 95       	ror	r27
    24aa:	f1 11       	cpse	r31, r1
    24ac:	f8 cf       	rjmp	.-16     	; 0x249e <__floatsisf+0x1c>
    24ae:	fa f4       	brpl	.+62     	; 0x24ee <__floatsisf+0x6c>
    24b0:	bb 0f       	add	r27, r27
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__floatsisf+0x36>
    24b4:	60 ff       	sbrs	r22, 0
    24b6:	1b c0       	rjmp	.+54     	; 0x24ee <__floatsisf+0x6c>
    24b8:	6f 5f       	subi	r22, 0xFF	; 255
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 4f       	sbci	r24, 0xFF	; 255
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	16 c0       	rjmp	.+44     	; 0x24ee <__floatsisf+0x6c>
    24c2:	88 23       	and	r24, r24
    24c4:	11 f0       	breq	.+4      	; 0x24ca <__floatsisf+0x48>
    24c6:	96 e9       	ldi	r25, 0x96	; 150
    24c8:	11 c0       	rjmp	.+34     	; 0x24ec <__floatsisf+0x6a>
    24ca:	77 23       	and	r23, r23
    24cc:	21 f0       	breq	.+8      	; 0x24d6 <__floatsisf+0x54>
    24ce:	9e e8       	ldi	r25, 0x8E	; 142
    24d0:	87 2f       	mov	r24, r23
    24d2:	76 2f       	mov	r23, r22
    24d4:	05 c0       	rjmp	.+10     	; 0x24e0 <__floatsisf+0x5e>
    24d6:	66 23       	and	r22, r22
    24d8:	71 f0       	breq	.+28     	; 0x24f6 <__floatsisf+0x74>
    24da:	96 e8       	ldi	r25, 0x86	; 134
    24dc:	86 2f       	mov	r24, r22
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	2a f0       	brmi	.+10     	; 0x24ee <__floatsisf+0x6c>
    24e4:	9a 95       	dec	r25
    24e6:	66 0f       	add	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	da f7       	brpl	.-10     	; 0x24e4 <__floatsisf+0x62>
    24ee:	88 0f       	add	r24, r24
    24f0:	96 95       	lsr	r25
    24f2:	87 95       	ror	r24
    24f4:	97 f9       	bld	r25, 7
    24f6:	08 95       	ret

000024f8 <__mulsf3>:
    24f8:	0e 94 8f 12 	call	0x251e	; 0x251e <__mulsf3x>
    24fc:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__fp_round>
    2500:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fp_pscA>
    2504:	38 f0       	brcs	.+14     	; 0x2514 <__mulsf3+0x1c>
    2506:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fp_pscB>
    250a:	20 f0       	brcs	.+8      	; 0x2514 <__mulsf3+0x1c>
    250c:	95 23       	and	r25, r21
    250e:	11 f0       	breq	.+4      	; 0x2514 <__mulsf3+0x1c>
    2510:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__fp_inf>
    2514:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__fp_nan>
    2518:	11 24       	eor	r1, r1
    251a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_szero>

0000251e <__mulsf3x>:
    251e:	0e 94 11 13 	call	0x2622	; 0x2622 <__fp_split3>
    2522:	70 f3       	brcs	.-36     	; 0x2500 <__mulsf3+0x8>

00002524 <__mulsf3_pse>:
    2524:	95 9f       	mul	r25, r21
    2526:	c1 f3       	breq	.-16     	; 0x2518 <__mulsf3+0x20>
    2528:	95 0f       	add	r25, r21
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	55 1f       	adc	r21, r21
    252e:	62 9f       	mul	r22, r18
    2530:	f0 01       	movw	r30, r0
    2532:	72 9f       	mul	r23, r18
    2534:	bb 27       	eor	r27, r27
    2536:	f0 0d       	add	r31, r0
    2538:	b1 1d       	adc	r27, r1
    253a:	63 9f       	mul	r22, r19
    253c:	aa 27       	eor	r26, r26
    253e:	f0 0d       	add	r31, r0
    2540:	b1 1d       	adc	r27, r1
    2542:	aa 1f       	adc	r26, r26
    2544:	64 9f       	mul	r22, r20
    2546:	66 27       	eor	r22, r22
    2548:	b0 0d       	add	r27, r0
    254a:	a1 1d       	adc	r26, r1
    254c:	66 1f       	adc	r22, r22
    254e:	82 9f       	mul	r24, r18
    2550:	22 27       	eor	r18, r18
    2552:	b0 0d       	add	r27, r0
    2554:	a1 1d       	adc	r26, r1
    2556:	62 1f       	adc	r22, r18
    2558:	73 9f       	mul	r23, r19
    255a:	b0 0d       	add	r27, r0
    255c:	a1 1d       	adc	r26, r1
    255e:	62 1f       	adc	r22, r18
    2560:	83 9f       	mul	r24, r19
    2562:	a0 0d       	add	r26, r0
    2564:	61 1d       	adc	r22, r1
    2566:	22 1f       	adc	r18, r18
    2568:	74 9f       	mul	r23, r20
    256a:	33 27       	eor	r19, r19
    256c:	a0 0d       	add	r26, r0
    256e:	61 1d       	adc	r22, r1
    2570:	23 1f       	adc	r18, r19
    2572:	84 9f       	mul	r24, r20
    2574:	60 0d       	add	r22, r0
    2576:	21 1d       	adc	r18, r1
    2578:	82 2f       	mov	r24, r18
    257a:	76 2f       	mov	r23, r22
    257c:	6a 2f       	mov	r22, r26
    257e:	11 24       	eor	r1, r1
    2580:	9f 57       	subi	r25, 0x7F	; 127
    2582:	50 40       	sbci	r21, 0x00	; 0
    2584:	9a f0       	brmi	.+38     	; 0x25ac <__mulsf3_pse+0x88>
    2586:	f1 f0       	breq	.+60     	; 0x25c4 <__mulsf3_pse+0xa0>
    2588:	88 23       	and	r24, r24
    258a:	4a f0       	brmi	.+18     	; 0x259e <__mulsf3_pse+0x7a>
    258c:	ee 0f       	add	r30, r30
    258e:	ff 1f       	adc	r31, r31
    2590:	bb 1f       	adc	r27, r27
    2592:	66 1f       	adc	r22, r22
    2594:	77 1f       	adc	r23, r23
    2596:	88 1f       	adc	r24, r24
    2598:	91 50       	subi	r25, 0x01	; 1
    259a:	50 40       	sbci	r21, 0x00	; 0
    259c:	a9 f7       	brne	.-22     	; 0x2588 <__mulsf3_pse+0x64>
    259e:	9e 3f       	cpi	r25, 0xFE	; 254
    25a0:	51 05       	cpc	r21, r1
    25a2:	80 f0       	brcs	.+32     	; 0x25c4 <__mulsf3_pse+0xa0>
    25a4:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__fp_inf>
    25a8:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_szero>
    25ac:	5f 3f       	cpi	r21, 0xFF	; 255
    25ae:	e4 f3       	brlt	.-8      	; 0x25a8 <__mulsf3_pse+0x84>
    25b0:	98 3e       	cpi	r25, 0xE8	; 232
    25b2:	d4 f3       	brlt	.-12     	; 0x25a8 <__mulsf3_pse+0x84>
    25b4:	86 95       	lsr	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	b7 95       	ror	r27
    25bc:	f7 95       	ror	r31
    25be:	e7 95       	ror	r30
    25c0:	9f 5f       	subi	r25, 0xFF	; 255
    25c2:	c1 f7       	brne	.-16     	; 0x25b4 <__mulsf3_pse+0x90>
    25c4:	fe 2b       	or	r31, r30
    25c6:	88 0f       	add	r24, r24
    25c8:	91 1d       	adc	r25, r1
    25ca:	96 95       	lsr	r25
    25cc:	87 95       	ror	r24
    25ce:	97 f9       	bld	r25, 7
    25d0:	08 95       	ret

000025d2 <__fp_inf>:
    25d2:	97 f9       	bld	r25, 7
    25d4:	9f 67       	ori	r25, 0x7F	; 127
    25d6:	80 e8       	ldi	r24, 0x80	; 128
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	08 95       	ret

000025de <__fp_nan>:
    25de:	9f ef       	ldi	r25, 0xFF	; 255
    25e0:	80 ec       	ldi	r24, 0xC0	; 192
    25e2:	08 95       	ret

000025e4 <__fp_pscA>:
    25e4:	00 24       	eor	r0, r0
    25e6:	0a 94       	dec	r0
    25e8:	16 16       	cp	r1, r22
    25ea:	17 06       	cpc	r1, r23
    25ec:	18 06       	cpc	r1, r24
    25ee:	09 06       	cpc	r0, r25
    25f0:	08 95       	ret

000025f2 <__fp_pscB>:
    25f2:	00 24       	eor	r0, r0
    25f4:	0a 94       	dec	r0
    25f6:	12 16       	cp	r1, r18
    25f8:	13 06       	cpc	r1, r19
    25fa:	14 06       	cpc	r1, r20
    25fc:	05 06       	cpc	r0, r21
    25fe:	08 95       	ret

00002600 <__fp_round>:
    2600:	09 2e       	mov	r0, r25
    2602:	03 94       	inc	r0
    2604:	00 0c       	add	r0, r0
    2606:	11 f4       	brne	.+4      	; 0x260c <__fp_round+0xc>
    2608:	88 23       	and	r24, r24
    260a:	52 f0       	brmi	.+20     	; 0x2620 <__fp_round+0x20>
    260c:	bb 0f       	add	r27, r27
    260e:	40 f4       	brcc	.+16     	; 0x2620 <__fp_round+0x20>
    2610:	bf 2b       	or	r27, r31
    2612:	11 f4       	brne	.+4      	; 0x2618 <__fp_round+0x18>
    2614:	60 ff       	sbrs	r22, 0
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <__fp_round+0x20>
    2618:	6f 5f       	subi	r22, 0xFF	; 255
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	8f 4f       	sbci	r24, 0xFF	; 255
    261e:	9f 4f       	sbci	r25, 0xFF	; 255
    2620:	08 95       	ret

00002622 <__fp_split3>:
    2622:	57 fd       	sbrc	r21, 7
    2624:	90 58       	subi	r25, 0x80	; 128
    2626:	44 0f       	add	r20, r20
    2628:	55 1f       	adc	r21, r21
    262a:	59 f0       	breq	.+22     	; 0x2642 <__fp_splitA+0x10>
    262c:	5f 3f       	cpi	r21, 0xFF	; 255
    262e:	71 f0       	breq	.+28     	; 0x264c <__fp_splitA+0x1a>
    2630:	47 95       	ror	r20

00002632 <__fp_splitA>:
    2632:	88 0f       	add	r24, r24
    2634:	97 fb       	bst	r25, 7
    2636:	99 1f       	adc	r25, r25
    2638:	61 f0       	breq	.+24     	; 0x2652 <__fp_splitA+0x20>
    263a:	9f 3f       	cpi	r25, 0xFF	; 255
    263c:	79 f0       	breq	.+30     	; 0x265c <__fp_splitA+0x2a>
    263e:	87 95       	ror	r24
    2640:	08 95       	ret
    2642:	12 16       	cp	r1, r18
    2644:	13 06       	cpc	r1, r19
    2646:	14 06       	cpc	r1, r20
    2648:	55 1f       	adc	r21, r21
    264a:	f2 cf       	rjmp	.-28     	; 0x2630 <__fp_split3+0xe>
    264c:	46 95       	lsr	r20
    264e:	f1 df       	rcall	.-30     	; 0x2632 <__fp_splitA>
    2650:	08 c0       	rjmp	.+16     	; 0x2662 <__fp_splitA+0x30>
    2652:	16 16       	cp	r1, r22
    2654:	17 06       	cpc	r1, r23
    2656:	18 06       	cpc	r1, r24
    2658:	99 1f       	adc	r25, r25
    265a:	f1 cf       	rjmp	.-30     	; 0x263e <__fp_splitA+0xc>
    265c:	86 95       	lsr	r24
    265e:	71 05       	cpc	r23, r1
    2660:	61 05       	cpc	r22, r1
    2662:	08 94       	sec
    2664:	08 95       	ret

00002666 <__fp_zero>:
    2666:	e8 94       	clt

00002668 <__fp_szero>:
    2668:	bb 27       	eor	r27, r27
    266a:	66 27       	eor	r22, r22
    266c:	77 27       	eor	r23, r23
    266e:	cb 01       	movw	r24, r22
    2670:	97 f9       	bld	r25, 7
    2672:	08 95       	ret

00002674 <vfprintf>:
    2674:	a0 e1       	ldi	r26, 0x10	; 16
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e0 e4       	ldi	r30, 0x40	; 64
    267a:	f3 e1       	ldi	r31, 0x13	; 19
    267c:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__prologue_saves__>
    2680:	7c 01       	movw	r14, r24
    2682:	1b 01       	movw	r2, r22
    2684:	6a 01       	movw	r12, r20
    2686:	fc 01       	movw	r30, r24
    2688:	17 82       	std	Z+7, r1	; 0x07
    268a:	16 82       	std	Z+6, r1	; 0x06
    268c:	83 81       	ldd	r24, Z+3	; 0x03
    268e:	81 ff       	sbrs	r24, 1
    2690:	44 c3       	rjmp	.+1672   	; 0x2d1a <vfprintf+0x6a6>
    2692:	9e 01       	movw	r18, r28
    2694:	2f 5f       	subi	r18, 0xFF	; 255
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	39 01       	movw	r6, r18
    269a:	f7 01       	movw	r30, r14
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	f1 01       	movw	r30, r2
    26a0:	93 fd       	sbrc	r25, 3
    26a2:	85 91       	lpm	r24, Z+
    26a4:	93 ff       	sbrs	r25, 3
    26a6:	81 91       	ld	r24, Z+
    26a8:	1f 01       	movw	r2, r30
    26aa:	88 23       	and	r24, r24
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <vfprintf+0x3c>
    26ae:	31 c3       	rjmp	.+1634   	; 0x2d12 <vfprintf+0x69e>
    26b0:	85 32       	cpi	r24, 0x25	; 37
    26b2:	39 f4       	brne	.+14     	; 0x26c2 <vfprintf+0x4e>
    26b4:	93 fd       	sbrc	r25, 3
    26b6:	85 91       	lpm	r24, Z+
    26b8:	93 ff       	sbrs	r25, 3
    26ba:	81 91       	ld	r24, Z+
    26bc:	1f 01       	movw	r2, r30
    26be:	85 32       	cpi	r24, 0x25	; 37
    26c0:	39 f4       	brne	.+14     	; 0x26d0 <vfprintf+0x5c>
    26c2:	b7 01       	movw	r22, r14
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    26ca:	56 01       	movw	r10, r12
    26cc:	65 01       	movw	r12, r10
    26ce:	e5 cf       	rjmp	.-54     	; 0x269a <vfprintf+0x26>
    26d0:	10 e0       	ldi	r17, 0x00	; 0
    26d2:	51 2c       	mov	r5, r1
    26d4:	91 2c       	mov	r9, r1
    26d6:	ff e1       	ldi	r31, 0x1F	; 31
    26d8:	f9 15       	cp	r31, r9
    26da:	d8 f0       	brcs	.+54     	; 0x2712 <vfprintf+0x9e>
    26dc:	8b 32       	cpi	r24, 0x2B	; 43
    26de:	79 f0       	breq	.+30     	; 0x26fe <vfprintf+0x8a>
    26e0:	38 f4       	brcc	.+14     	; 0x26f0 <vfprintf+0x7c>
    26e2:	80 32       	cpi	r24, 0x20	; 32
    26e4:	79 f0       	breq	.+30     	; 0x2704 <vfprintf+0x90>
    26e6:	83 32       	cpi	r24, 0x23	; 35
    26e8:	a1 f4       	brne	.+40     	; 0x2712 <vfprintf+0x9e>
    26ea:	f9 2d       	mov	r31, r9
    26ec:	f0 61       	ori	r31, 0x10	; 16
    26ee:	2e c0       	rjmp	.+92     	; 0x274c <vfprintf+0xd8>
    26f0:	8d 32       	cpi	r24, 0x2D	; 45
    26f2:	61 f0       	breq	.+24     	; 0x270c <vfprintf+0x98>
    26f4:	80 33       	cpi	r24, 0x30	; 48
    26f6:	69 f4       	brne	.+26     	; 0x2712 <vfprintf+0x9e>
    26f8:	29 2d       	mov	r18, r9
    26fa:	21 60       	ori	r18, 0x01	; 1
    26fc:	2d c0       	rjmp	.+90     	; 0x2758 <vfprintf+0xe4>
    26fe:	39 2d       	mov	r19, r9
    2700:	32 60       	ori	r19, 0x02	; 2
    2702:	93 2e       	mov	r9, r19
    2704:	89 2d       	mov	r24, r9
    2706:	84 60       	ori	r24, 0x04	; 4
    2708:	98 2e       	mov	r9, r24
    270a:	2a c0       	rjmp	.+84     	; 0x2760 <vfprintf+0xec>
    270c:	e9 2d       	mov	r30, r9
    270e:	e8 60       	ori	r30, 0x08	; 8
    2710:	15 c0       	rjmp	.+42     	; 0x273c <vfprintf+0xc8>
    2712:	97 fc       	sbrc	r9, 7
    2714:	2d c0       	rjmp	.+90     	; 0x2770 <vfprintf+0xfc>
    2716:	20 ed       	ldi	r18, 0xD0	; 208
    2718:	28 0f       	add	r18, r24
    271a:	2a 30       	cpi	r18, 0x0A	; 10
    271c:	88 f4       	brcc	.+34     	; 0x2740 <vfprintf+0xcc>
    271e:	96 fe       	sbrs	r9, 6
    2720:	06 c0       	rjmp	.+12     	; 0x272e <vfprintf+0xba>
    2722:	3a e0       	ldi	r19, 0x0A	; 10
    2724:	13 9f       	mul	r17, r19
    2726:	20 0d       	add	r18, r0
    2728:	11 24       	eor	r1, r1
    272a:	12 2f       	mov	r17, r18
    272c:	19 c0       	rjmp	.+50     	; 0x2760 <vfprintf+0xec>
    272e:	8a e0       	ldi	r24, 0x0A	; 10
    2730:	58 9e       	mul	r5, r24
    2732:	20 0d       	add	r18, r0
    2734:	11 24       	eor	r1, r1
    2736:	52 2e       	mov	r5, r18
    2738:	e9 2d       	mov	r30, r9
    273a:	e0 62       	ori	r30, 0x20	; 32
    273c:	9e 2e       	mov	r9, r30
    273e:	10 c0       	rjmp	.+32     	; 0x2760 <vfprintf+0xec>
    2740:	8e 32       	cpi	r24, 0x2E	; 46
    2742:	31 f4       	brne	.+12     	; 0x2750 <vfprintf+0xdc>
    2744:	96 fc       	sbrc	r9, 6
    2746:	e5 c2       	rjmp	.+1482   	; 0x2d12 <vfprintf+0x69e>
    2748:	f9 2d       	mov	r31, r9
    274a:	f0 64       	ori	r31, 0x40	; 64
    274c:	9f 2e       	mov	r9, r31
    274e:	08 c0       	rjmp	.+16     	; 0x2760 <vfprintf+0xec>
    2750:	8c 36       	cpi	r24, 0x6C	; 108
    2752:	21 f4       	brne	.+8      	; 0x275c <vfprintf+0xe8>
    2754:	29 2d       	mov	r18, r9
    2756:	20 68       	ori	r18, 0x80	; 128
    2758:	92 2e       	mov	r9, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <vfprintf+0xec>
    275c:	88 36       	cpi	r24, 0x68	; 104
    275e:	41 f4       	brne	.+16     	; 0x2770 <vfprintf+0xfc>
    2760:	f1 01       	movw	r30, r2
    2762:	93 fd       	sbrc	r25, 3
    2764:	85 91       	lpm	r24, Z+
    2766:	93 ff       	sbrs	r25, 3
    2768:	81 91       	ld	r24, Z+
    276a:	1f 01       	movw	r2, r30
    276c:	81 11       	cpse	r24, r1
    276e:	b3 cf       	rjmp	.-154    	; 0x26d6 <vfprintf+0x62>
    2770:	9b eb       	ldi	r25, 0xBB	; 187
    2772:	98 0f       	add	r25, r24
    2774:	93 30       	cpi	r25, 0x03	; 3
    2776:	20 f4       	brcc	.+8      	; 0x2780 <vfprintf+0x10c>
    2778:	99 2d       	mov	r25, r9
    277a:	90 61       	ori	r25, 0x10	; 16
    277c:	80 5e       	subi	r24, 0xE0	; 224
    277e:	07 c0       	rjmp	.+14     	; 0x278e <vfprintf+0x11a>
    2780:	9b e9       	ldi	r25, 0x9B	; 155
    2782:	98 0f       	add	r25, r24
    2784:	93 30       	cpi	r25, 0x03	; 3
    2786:	08 f0       	brcs	.+2      	; 0x278a <vfprintf+0x116>
    2788:	66 c1       	rjmp	.+716    	; 0x2a56 <vfprintf+0x3e2>
    278a:	99 2d       	mov	r25, r9
    278c:	9f 7e       	andi	r25, 0xEF	; 239
    278e:	96 ff       	sbrs	r25, 6
    2790:	16 e0       	ldi	r17, 0x06	; 6
    2792:	9f 73       	andi	r25, 0x3F	; 63
    2794:	99 2e       	mov	r9, r25
    2796:	85 36       	cpi	r24, 0x65	; 101
    2798:	19 f4       	brne	.+6      	; 0x27a0 <vfprintf+0x12c>
    279a:	90 64       	ori	r25, 0x40	; 64
    279c:	99 2e       	mov	r9, r25
    279e:	08 c0       	rjmp	.+16     	; 0x27b0 <vfprintf+0x13c>
    27a0:	86 36       	cpi	r24, 0x66	; 102
    27a2:	21 f4       	brne	.+8      	; 0x27ac <vfprintf+0x138>
    27a4:	39 2f       	mov	r19, r25
    27a6:	30 68       	ori	r19, 0x80	; 128
    27a8:	93 2e       	mov	r9, r19
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <vfprintf+0x13c>
    27ac:	11 11       	cpse	r17, r1
    27ae:	11 50       	subi	r17, 0x01	; 1
    27b0:	97 fe       	sbrs	r9, 7
    27b2:	07 c0       	rjmp	.+14     	; 0x27c2 <vfprintf+0x14e>
    27b4:	1c 33       	cpi	r17, 0x3C	; 60
    27b6:	50 f4       	brcc	.+20     	; 0x27cc <vfprintf+0x158>
    27b8:	44 24       	eor	r4, r4
    27ba:	43 94       	inc	r4
    27bc:	41 0e       	add	r4, r17
    27be:	27 e0       	ldi	r18, 0x07	; 7
    27c0:	0b c0       	rjmp	.+22     	; 0x27d8 <vfprintf+0x164>
    27c2:	18 30       	cpi	r17, 0x08	; 8
    27c4:	38 f0       	brcs	.+14     	; 0x27d4 <vfprintf+0x160>
    27c6:	27 e0       	ldi	r18, 0x07	; 7
    27c8:	17 e0       	ldi	r17, 0x07	; 7
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <vfprintf+0x162>
    27cc:	27 e0       	ldi	r18, 0x07	; 7
    27ce:	9c e3       	ldi	r25, 0x3C	; 60
    27d0:	49 2e       	mov	r4, r25
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <vfprintf+0x164>
    27d4:	21 2f       	mov	r18, r17
    27d6:	41 2c       	mov	r4, r1
    27d8:	56 01       	movw	r10, r12
    27da:	84 e0       	ldi	r24, 0x04	; 4
    27dc:	a8 0e       	add	r10, r24
    27de:	b1 1c       	adc	r11, r1
    27e0:	f6 01       	movw	r30, r12
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	04 2d       	mov	r16, r4
    27ec:	a3 01       	movw	r20, r6
    27ee:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__ftoa_engine>
    27f2:	6c 01       	movw	r12, r24
    27f4:	f9 81       	ldd	r31, Y+1	; 0x01
    27f6:	fc 87       	std	Y+12, r31	; 0x0c
    27f8:	f0 ff       	sbrs	r31, 0
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0x18c>
    27fc:	f3 ff       	sbrs	r31, 3
    27fe:	06 c0       	rjmp	.+12     	; 0x280c <vfprintf+0x198>
    2800:	91 fc       	sbrc	r9, 1
    2802:	06 c0       	rjmp	.+12     	; 0x2810 <vfprintf+0x19c>
    2804:	92 fe       	sbrs	r9, 2
    2806:	06 c0       	rjmp	.+12     	; 0x2814 <vfprintf+0x1a0>
    2808:	00 e2       	ldi	r16, 0x20	; 32
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x1a2>
    280c:	0d e2       	ldi	r16, 0x2D	; 45
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <vfprintf+0x1a2>
    2810:	0b e2       	ldi	r16, 0x2B	; 43
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <vfprintf+0x1a2>
    2814:	00 e0       	ldi	r16, 0x00	; 0
    2816:	8c 85       	ldd	r24, Y+12	; 0x0c
    2818:	8c 70       	andi	r24, 0x0C	; 12
    281a:	19 f0       	breq	.+6      	; 0x2822 <vfprintf+0x1ae>
    281c:	01 11       	cpse	r16, r1
    281e:	5a c2       	rjmp	.+1204   	; 0x2cd4 <vfprintf+0x660>
    2820:	9b c2       	rjmp	.+1334   	; 0x2d58 <vfprintf+0x6e4>
    2822:	97 fe       	sbrs	r9, 7
    2824:	10 c0       	rjmp	.+32     	; 0x2846 <vfprintf+0x1d2>
    2826:	4c 0c       	add	r4, r12
    2828:	fc 85       	ldd	r31, Y+12	; 0x0c
    282a:	f4 ff       	sbrs	r31, 4
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <vfprintf+0x1c2>
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	81 33       	cpi	r24, 0x31	; 49
    2832:	09 f4       	brne	.+2      	; 0x2836 <vfprintf+0x1c2>
    2834:	4a 94       	dec	r4
    2836:	14 14       	cp	r1, r4
    2838:	74 f5       	brge	.+92     	; 0x2896 <vfprintf+0x222>
    283a:	28 e0       	ldi	r18, 0x08	; 8
    283c:	24 15       	cp	r18, r4
    283e:	78 f5       	brcc	.+94     	; 0x289e <vfprintf+0x22a>
    2840:	88 e0       	ldi	r24, 0x08	; 8
    2842:	48 2e       	mov	r4, r24
    2844:	2c c0       	rjmp	.+88     	; 0x289e <vfprintf+0x22a>
    2846:	96 fc       	sbrc	r9, 6
    2848:	2a c0       	rjmp	.+84     	; 0x289e <vfprintf+0x22a>
    284a:	81 2f       	mov	r24, r17
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	8c 15       	cp	r24, r12
    2850:	9d 05       	cpc	r25, r13
    2852:	9c f0       	brlt	.+38     	; 0x287a <vfprintf+0x206>
    2854:	3c ef       	ldi	r19, 0xFC	; 252
    2856:	c3 16       	cp	r12, r19
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	d3 06       	cpc	r13, r19
    285c:	74 f0       	brlt	.+28     	; 0x287a <vfprintf+0x206>
    285e:	89 2d       	mov	r24, r9
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	98 2e       	mov	r9, r24
    2864:	0a c0       	rjmp	.+20     	; 0x287a <vfprintf+0x206>
    2866:	e2 e0       	ldi	r30, 0x02	; 2
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	ec 0f       	add	r30, r28
    286c:	fd 1f       	adc	r31, r29
    286e:	e1 0f       	add	r30, r17
    2870:	f1 1d       	adc	r31, r1
    2872:	80 81       	ld	r24, Z
    2874:	80 33       	cpi	r24, 0x30	; 48
    2876:	19 f4       	brne	.+6      	; 0x287e <vfprintf+0x20a>
    2878:	11 50       	subi	r17, 0x01	; 1
    287a:	11 11       	cpse	r17, r1
    287c:	f4 cf       	rjmp	.-24     	; 0x2866 <vfprintf+0x1f2>
    287e:	97 fe       	sbrs	r9, 7
    2880:	0e c0       	rjmp	.+28     	; 0x289e <vfprintf+0x22a>
    2882:	44 24       	eor	r4, r4
    2884:	43 94       	inc	r4
    2886:	41 0e       	add	r4, r17
    2888:	81 2f       	mov	r24, r17
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	c8 16       	cp	r12, r24
    288e:	d9 06       	cpc	r13, r25
    2890:	2c f4       	brge	.+10     	; 0x289c <vfprintf+0x228>
    2892:	1c 19       	sub	r17, r12
    2894:	04 c0       	rjmp	.+8      	; 0x289e <vfprintf+0x22a>
    2896:	44 24       	eor	r4, r4
    2898:	43 94       	inc	r4
    289a:	01 c0       	rjmp	.+2      	; 0x289e <vfprintf+0x22a>
    289c:	10 e0       	ldi	r17, 0x00	; 0
    289e:	97 fe       	sbrs	r9, 7
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <vfprintf+0x23a>
    28a2:	1c 14       	cp	r1, r12
    28a4:	1d 04       	cpc	r1, r13
    28a6:	34 f4       	brge	.+12     	; 0x28b4 <vfprintf+0x240>
    28a8:	c6 01       	movw	r24, r12
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <vfprintf+0x244>
    28ae:	85 e0       	ldi	r24, 0x05	; 5
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x244>
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	01 11       	cpse	r16, r1
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	11 23       	and	r17, r17
    28be:	31 f0       	breq	.+12     	; 0x28cc <vfprintf+0x258>
    28c0:	21 2f       	mov	r18, r17
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	2f 5f       	subi	r18, 0xFF	; 255
    28c6:	3f 4f       	sbci	r19, 0xFF	; 255
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	25 2d       	mov	r18, r5
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	82 17       	cp	r24, r18
    28d2:	93 07       	cpc	r25, r19
    28d4:	14 f4       	brge	.+4      	; 0x28da <vfprintf+0x266>
    28d6:	58 1a       	sub	r5, r24
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <vfprintf+0x268>
    28da:	51 2c       	mov	r5, r1
    28dc:	89 2d       	mov	r24, r9
    28de:	89 70       	andi	r24, 0x09	; 9
    28e0:	49 f4       	brne	.+18     	; 0x28f4 <vfprintf+0x280>
    28e2:	55 20       	and	r5, r5
    28e4:	39 f0       	breq	.+14     	; 0x28f4 <vfprintf+0x280>
    28e6:	b7 01       	movw	r22, r14
    28e8:	80 e2       	ldi	r24, 0x20	; 32
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    28f0:	5a 94       	dec	r5
    28f2:	f7 cf       	rjmp	.-18     	; 0x28e2 <vfprintf+0x26e>
    28f4:	00 23       	and	r16, r16
    28f6:	29 f0       	breq	.+10     	; 0x2902 <vfprintf+0x28e>
    28f8:	b7 01       	movw	r22, r14
    28fa:	80 2f       	mov	r24, r16
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2902:	93 fc       	sbrc	r9, 3
    2904:	09 c0       	rjmp	.+18     	; 0x2918 <vfprintf+0x2a4>
    2906:	55 20       	and	r5, r5
    2908:	39 f0       	breq	.+14     	; 0x2918 <vfprintf+0x2a4>
    290a:	b7 01       	movw	r22, r14
    290c:	80 e3       	ldi	r24, 0x30	; 48
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2914:	5a 94       	dec	r5
    2916:	f7 cf       	rjmp	.-18     	; 0x2906 <vfprintf+0x292>
    2918:	97 fe       	sbrs	r9, 7
    291a:	4c c0       	rjmp	.+152    	; 0x29b4 <vfprintf+0x340>
    291c:	46 01       	movw	r8, r12
    291e:	d7 fe       	sbrs	r13, 7
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <vfprintf+0x2b2>
    2922:	81 2c       	mov	r8, r1
    2924:	91 2c       	mov	r9, r1
    2926:	c6 01       	movw	r24, r12
    2928:	88 19       	sub	r24, r8
    292a:	99 09       	sbc	r25, r9
    292c:	f3 01       	movw	r30, r6
    292e:	e8 0f       	add	r30, r24
    2930:	f9 1f       	adc	r31, r25
    2932:	fe 87       	std	Y+14, r31	; 0x0e
    2934:	ed 87       	std	Y+13, r30	; 0x0d
    2936:	96 01       	movw	r18, r12
    2938:	24 19       	sub	r18, r4
    293a:	31 09       	sbc	r19, r1
    293c:	38 8b       	std	Y+16, r19	; 0x10
    293e:	2f 87       	std	Y+15, r18	; 0x0f
    2940:	01 2f       	mov	r16, r17
    2942:	10 e0       	ldi	r17, 0x00	; 0
    2944:	11 95       	neg	r17
    2946:	01 95       	neg	r16
    2948:	11 09       	sbc	r17, r1
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	83 16       	cp	r8, r19
    294e:	93 06       	cpc	r9, r19
    2950:	29 f4       	brne	.+10     	; 0x295c <vfprintf+0x2e8>
    2952:	b7 01       	movw	r22, r14
    2954:	8e e2       	ldi	r24, 0x2E	; 46
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    295c:	c8 14       	cp	r12, r8
    295e:	d9 04       	cpc	r13, r9
    2960:	4c f0       	brlt	.+18     	; 0x2974 <vfprintf+0x300>
    2962:	8f 85       	ldd	r24, Y+15	; 0x0f
    2964:	98 89       	ldd	r25, Y+16	; 0x10
    2966:	88 15       	cp	r24, r8
    2968:	99 05       	cpc	r25, r9
    296a:	24 f4       	brge	.+8      	; 0x2974 <vfprintf+0x300>
    296c:	ed 85       	ldd	r30, Y+13	; 0x0d
    296e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2970:	81 81       	ldd	r24, Z+1	; 0x01
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <vfprintf+0x302>
    2974:	80 e3       	ldi	r24, 0x30	; 48
    2976:	f1 e0       	ldi	r31, 0x01	; 1
    2978:	8f 1a       	sub	r8, r31
    297a:	91 08       	sbc	r9, r1
    297c:	2d 85       	ldd	r18, Y+13	; 0x0d
    297e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2980:	2f 5f       	subi	r18, 0xFF	; 255
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	3e 87       	std	Y+14, r19	; 0x0e
    2986:	2d 87       	std	Y+13, r18	; 0x0d
    2988:	80 16       	cp	r8, r16
    298a:	91 06       	cpc	r9, r17
    298c:	2c f0       	brlt	.+10     	; 0x2998 <vfprintf+0x324>
    298e:	b7 01       	movw	r22, r14
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2996:	d9 cf       	rjmp	.-78     	; 0x294a <vfprintf+0x2d6>
    2998:	c8 14       	cp	r12, r8
    299a:	d9 04       	cpc	r13, r9
    299c:	41 f4       	brne	.+16     	; 0x29ae <vfprintf+0x33a>
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	96 33       	cpi	r25, 0x36	; 54
    29a2:	20 f4       	brcc	.+8      	; 0x29ac <vfprintf+0x338>
    29a4:	95 33       	cpi	r25, 0x35	; 53
    29a6:	19 f4       	brne	.+6      	; 0x29ae <vfprintf+0x33a>
    29a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    29aa:	34 ff       	sbrs	r19, 4
    29ac:	81 e3       	ldi	r24, 0x31	; 49
    29ae:	b7 01       	movw	r22, r14
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	4e c0       	rjmp	.+156    	; 0x2a50 <vfprintf+0x3dc>
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	81 33       	cpi	r24, 0x31	; 49
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <vfprintf+0x34c>
    29ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    29bc:	9f 7e       	andi	r25, 0xEF	; 239
    29be:	9c 87       	std	Y+12, r25	; 0x0c
    29c0:	b7 01       	movw	r22, r14
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    29c8:	11 11       	cpse	r17, r1
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <vfprintf+0x362>
    29cc:	94 fc       	sbrc	r9, 4
    29ce:	18 c0       	rjmp	.+48     	; 0x2a00 <vfprintf+0x38c>
    29d0:	85 e6       	ldi	r24, 0x65	; 101
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	17 c0       	rjmp	.+46     	; 0x2a04 <vfprintf+0x390>
    29d6:	b7 01       	movw	r22, r14
    29d8:	8e e2       	ldi	r24, 0x2E	; 46
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    29e0:	1e 5f       	subi	r17, 0xFE	; 254
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	01 e0       	ldi	r16, 0x01	; 1
    29e6:	08 0f       	add	r16, r24
    29e8:	f3 01       	movw	r30, r6
    29ea:	e8 0f       	add	r30, r24
    29ec:	f1 1d       	adc	r31, r1
    29ee:	80 81       	ld	r24, Z
    29f0:	b7 01       	movw	r22, r14
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    29f8:	80 2f       	mov	r24, r16
    29fa:	01 13       	cpse	r16, r17
    29fc:	f3 cf       	rjmp	.-26     	; 0x29e4 <vfprintf+0x370>
    29fe:	e6 cf       	rjmp	.-52     	; 0x29cc <vfprintf+0x358>
    2a00:	85 e4       	ldi	r24, 0x45	; 69
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	b7 01       	movw	r22, r14
    2a06:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2a0a:	d7 fc       	sbrc	r13, 7
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x3a6>
    2a0e:	c1 14       	cp	r12, r1
    2a10:	d1 04       	cpc	r13, r1
    2a12:	41 f4       	brne	.+16     	; 0x2a24 <vfprintf+0x3b0>
    2a14:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a16:	e4 ff       	sbrs	r30, 4
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <vfprintf+0x3b0>
    2a1a:	d1 94       	neg	r13
    2a1c:	c1 94       	neg	r12
    2a1e:	d1 08       	sbc	r13, r1
    2a20:	8d e2       	ldi	r24, 0x2D	; 45
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <vfprintf+0x3b2>
    2a24:	8b e2       	ldi	r24, 0x2B	; 43
    2a26:	b7 01       	movw	r22, r14
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2a2e:	80 e3       	ldi	r24, 0x30	; 48
    2a30:	2a e0       	ldi	r18, 0x0A	; 10
    2a32:	c2 16       	cp	r12, r18
    2a34:	d1 04       	cpc	r13, r1
    2a36:	2c f0       	brlt	.+10     	; 0x2a42 <vfprintf+0x3ce>
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	fa e0       	ldi	r31, 0x0A	; 10
    2a3c:	cf 1a       	sub	r12, r31
    2a3e:	d1 08       	sbc	r13, r1
    2a40:	f7 cf       	rjmp	.-18     	; 0x2a30 <vfprintf+0x3bc>
    2a42:	b7 01       	movw	r22, r14
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2a4a:	b7 01       	movw	r22, r14
    2a4c:	c6 01       	movw	r24, r12
    2a4e:	c0 96       	adiw	r24, 0x30	; 48
    2a50:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2a54:	54 c1       	rjmp	.+680    	; 0x2cfe <vfprintf+0x68a>
    2a56:	83 36       	cpi	r24, 0x63	; 99
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <vfprintf+0x3f2>
    2a5a:	83 37       	cpi	r24, 0x73	; 115
    2a5c:	79 f0       	breq	.+30     	; 0x2a7c <vfprintf+0x408>
    2a5e:	83 35       	cpi	r24, 0x53	; 83
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <vfprintf+0x3f0>
    2a62:	56 c0       	rjmp	.+172    	; 0x2b10 <vfprintf+0x49c>
    2a64:	20 c0       	rjmp	.+64     	; 0x2aa6 <vfprintf+0x432>
    2a66:	56 01       	movw	r10, r12
    2a68:	32 e0       	ldi	r19, 0x02	; 2
    2a6a:	a3 0e       	add	r10, r19
    2a6c:	b1 1c       	adc	r11, r1
    2a6e:	f6 01       	movw	r30, r12
    2a70:	80 81       	ld	r24, Z
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	01 e0       	ldi	r16, 0x01	; 1
    2a76:	10 e0       	ldi	r17, 0x00	; 0
    2a78:	63 01       	movw	r12, r6
    2a7a:	12 c0       	rjmp	.+36     	; 0x2aa0 <vfprintf+0x42c>
    2a7c:	56 01       	movw	r10, r12
    2a7e:	f2 e0       	ldi	r31, 0x02	; 2
    2a80:	af 0e       	add	r10, r31
    2a82:	b1 1c       	adc	r11, r1
    2a84:	f6 01       	movw	r30, r12
    2a86:	c0 80       	ld	r12, Z
    2a88:	d1 80       	ldd	r13, Z+1	; 0x01
    2a8a:	96 fe       	sbrs	r9, 6
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <vfprintf+0x420>
    2a8e:	61 2f       	mov	r22, r17
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <vfprintf+0x424>
    2a94:	6f ef       	ldi	r22, 0xFF	; 255
    2a96:	7f ef       	ldi	r23, 0xFF	; 255
    2a98:	c6 01       	movw	r24, r12
    2a9a:	0e 94 4a 18 	call	0x3094	; 0x3094 <strnlen>
    2a9e:	8c 01       	movw	r16, r24
    2aa0:	f9 2d       	mov	r31, r9
    2aa2:	ff 77       	andi	r31, 0x7F	; 127
    2aa4:	14 c0       	rjmp	.+40     	; 0x2ace <vfprintf+0x45a>
    2aa6:	56 01       	movw	r10, r12
    2aa8:	22 e0       	ldi	r18, 0x02	; 2
    2aaa:	a2 0e       	add	r10, r18
    2aac:	b1 1c       	adc	r11, r1
    2aae:	f6 01       	movw	r30, r12
    2ab0:	c0 80       	ld	r12, Z
    2ab2:	d1 80       	ldd	r13, Z+1	; 0x01
    2ab4:	96 fe       	sbrs	r9, 6
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <vfprintf+0x44a>
    2ab8:	61 2f       	mov	r22, r17
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <vfprintf+0x44e>
    2abe:	6f ef       	ldi	r22, 0xFF	; 255
    2ac0:	7f ef       	ldi	r23, 0xFF	; 255
    2ac2:	c6 01       	movw	r24, r12
    2ac4:	0e 94 36 18 	call	0x306c	; 0x306c <strnlen_P>
    2ac8:	8c 01       	movw	r16, r24
    2aca:	f9 2d       	mov	r31, r9
    2acc:	f0 68       	ori	r31, 0x80	; 128
    2ace:	9f 2e       	mov	r9, r31
    2ad0:	f3 fd       	sbrc	r31, 3
    2ad2:	1a c0       	rjmp	.+52     	; 0x2b08 <vfprintf+0x494>
    2ad4:	85 2d       	mov	r24, r5
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	08 17       	cp	r16, r24
    2ada:	19 07       	cpc	r17, r25
    2adc:	a8 f4       	brcc	.+42     	; 0x2b08 <vfprintf+0x494>
    2ade:	b7 01       	movw	r22, r14
    2ae0:	80 e2       	ldi	r24, 0x20	; 32
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2ae8:	5a 94       	dec	r5
    2aea:	f4 cf       	rjmp	.-24     	; 0x2ad4 <vfprintf+0x460>
    2aec:	f6 01       	movw	r30, r12
    2aee:	97 fc       	sbrc	r9, 7
    2af0:	85 91       	lpm	r24, Z+
    2af2:	97 fe       	sbrs	r9, 7
    2af4:	81 91       	ld	r24, Z+
    2af6:	6f 01       	movw	r12, r30
    2af8:	b7 01       	movw	r22, r14
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2b00:	51 10       	cpse	r5, r1
    2b02:	5a 94       	dec	r5
    2b04:	01 50       	subi	r16, 0x01	; 1
    2b06:	11 09       	sbc	r17, r1
    2b08:	01 15       	cp	r16, r1
    2b0a:	11 05       	cpc	r17, r1
    2b0c:	79 f7       	brne	.-34     	; 0x2aec <vfprintf+0x478>
    2b0e:	f7 c0       	rjmp	.+494    	; 0x2cfe <vfprintf+0x68a>
    2b10:	84 36       	cpi	r24, 0x64	; 100
    2b12:	11 f0       	breq	.+4      	; 0x2b18 <vfprintf+0x4a4>
    2b14:	89 36       	cpi	r24, 0x69	; 105
    2b16:	61 f5       	brne	.+88     	; 0x2b70 <vfprintf+0x4fc>
    2b18:	56 01       	movw	r10, r12
    2b1a:	97 fe       	sbrs	r9, 7
    2b1c:	09 c0       	rjmp	.+18     	; 0x2b30 <vfprintf+0x4bc>
    2b1e:	24 e0       	ldi	r18, 0x04	; 4
    2b20:	a2 0e       	add	r10, r18
    2b22:	b1 1c       	adc	r11, r1
    2b24:	f6 01       	movw	r30, r12
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	0a c0       	rjmp	.+20     	; 0x2b44 <vfprintf+0x4d0>
    2b30:	f2 e0       	ldi	r31, 0x02	; 2
    2b32:	af 0e       	add	r10, r31
    2b34:	b1 1c       	adc	r11, r1
    2b36:	f6 01       	movw	r30, r12
    2b38:	60 81       	ld	r22, Z
    2b3a:	71 81       	ldd	r23, Z+1	; 0x01
    2b3c:	07 2e       	mov	r0, r23
    2b3e:	00 0c       	add	r0, r0
    2b40:	88 0b       	sbc	r24, r24
    2b42:	99 0b       	sbc	r25, r25
    2b44:	f9 2d       	mov	r31, r9
    2b46:	ff 76       	andi	r31, 0x6F	; 111
    2b48:	9f 2e       	mov	r9, r31
    2b4a:	97 ff       	sbrs	r25, 7
    2b4c:	09 c0       	rjmp	.+18     	; 0x2b60 <vfprintf+0x4ec>
    2b4e:	90 95       	com	r25
    2b50:	80 95       	com	r24
    2b52:	70 95       	com	r23
    2b54:	61 95       	neg	r22
    2b56:	7f 4f       	sbci	r23, 0xFF	; 255
    2b58:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	f0 68       	ori	r31, 0x80	; 128
    2b5e:	9f 2e       	mov	r9, r31
    2b60:	2a e0       	ldi	r18, 0x0A	; 10
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	a3 01       	movw	r20, r6
    2b66:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2b6a:	c8 2e       	mov	r12, r24
    2b6c:	c6 18       	sub	r12, r6
    2b6e:	3f c0       	rjmp	.+126    	; 0x2bee <vfprintf+0x57a>
    2b70:	09 2d       	mov	r16, r9
    2b72:	85 37       	cpi	r24, 0x75	; 117
    2b74:	21 f4       	brne	.+8      	; 0x2b7e <vfprintf+0x50a>
    2b76:	0f 7e       	andi	r16, 0xEF	; 239
    2b78:	2a e0       	ldi	r18, 0x0A	; 10
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	1d c0       	rjmp	.+58     	; 0x2bb8 <vfprintf+0x544>
    2b7e:	09 7f       	andi	r16, 0xF9	; 249
    2b80:	8f 36       	cpi	r24, 0x6F	; 111
    2b82:	91 f0       	breq	.+36     	; 0x2ba8 <vfprintf+0x534>
    2b84:	18 f4       	brcc	.+6      	; 0x2b8c <vfprintf+0x518>
    2b86:	88 35       	cpi	r24, 0x58	; 88
    2b88:	59 f0       	breq	.+22     	; 0x2ba0 <vfprintf+0x52c>
    2b8a:	c3 c0       	rjmp	.+390    	; 0x2d12 <vfprintf+0x69e>
    2b8c:	80 37       	cpi	r24, 0x70	; 112
    2b8e:	19 f0       	breq	.+6      	; 0x2b96 <vfprintf+0x522>
    2b90:	88 37       	cpi	r24, 0x78	; 120
    2b92:	11 f0       	breq	.+4      	; 0x2b98 <vfprintf+0x524>
    2b94:	be c0       	rjmp	.+380    	; 0x2d12 <vfprintf+0x69e>
    2b96:	00 61       	ori	r16, 0x10	; 16
    2b98:	04 ff       	sbrs	r16, 4
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <vfprintf+0x53a>
    2b9c:	04 60       	ori	r16, 0x04	; 4
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <vfprintf+0x53a>
    2ba0:	94 fe       	sbrs	r9, 4
    2ba2:	08 c0       	rjmp	.+16     	; 0x2bb4 <vfprintf+0x540>
    2ba4:	06 60       	ori	r16, 0x06	; 6
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <vfprintf+0x540>
    2ba8:	28 e0       	ldi	r18, 0x08	; 8
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <vfprintf+0x544>
    2bae:	20 e1       	ldi	r18, 0x10	; 16
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <vfprintf+0x544>
    2bb4:	20 e1       	ldi	r18, 0x10	; 16
    2bb6:	32 e0       	ldi	r19, 0x02	; 2
    2bb8:	56 01       	movw	r10, r12
    2bba:	07 ff       	sbrs	r16, 7
    2bbc:	09 c0       	rjmp	.+18     	; 0x2bd0 <vfprintf+0x55c>
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	a8 0e       	add	r10, r24
    2bc2:	b1 1c       	adc	r11, r1
    2bc4:	f6 01       	movw	r30, r12
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	08 c0       	rjmp	.+16     	; 0x2be0 <vfprintf+0x56c>
    2bd0:	f2 e0       	ldi	r31, 0x02	; 2
    2bd2:	af 0e       	add	r10, r31
    2bd4:	b1 1c       	adc	r11, r1
    2bd6:	f6 01       	movw	r30, r12
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a3 01       	movw	r20, r6
    2be2:	0e 94 bb 18 	call	0x3176	; 0x3176 <__ultoa_invert>
    2be6:	c8 2e       	mov	r12, r24
    2be8:	c6 18       	sub	r12, r6
    2bea:	0f 77       	andi	r16, 0x7F	; 127
    2bec:	90 2e       	mov	r9, r16
    2bee:	96 fe       	sbrs	r9, 6
    2bf0:	0b c0       	rjmp	.+22     	; 0x2c08 <vfprintf+0x594>
    2bf2:	09 2d       	mov	r16, r9
    2bf4:	0e 7f       	andi	r16, 0xFE	; 254
    2bf6:	c1 16       	cp	r12, r17
    2bf8:	50 f4       	brcc	.+20     	; 0x2c0e <vfprintf+0x59a>
    2bfa:	94 fe       	sbrs	r9, 4
    2bfc:	0a c0       	rjmp	.+20     	; 0x2c12 <vfprintf+0x59e>
    2bfe:	92 fc       	sbrc	r9, 2
    2c00:	08 c0       	rjmp	.+16     	; 0x2c12 <vfprintf+0x59e>
    2c02:	09 2d       	mov	r16, r9
    2c04:	0e 7e       	andi	r16, 0xEE	; 238
    2c06:	05 c0       	rjmp	.+10     	; 0x2c12 <vfprintf+0x59e>
    2c08:	dc 2c       	mov	r13, r12
    2c0a:	09 2d       	mov	r16, r9
    2c0c:	03 c0       	rjmp	.+6      	; 0x2c14 <vfprintf+0x5a0>
    2c0e:	dc 2c       	mov	r13, r12
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <vfprintf+0x5a0>
    2c12:	d1 2e       	mov	r13, r17
    2c14:	04 ff       	sbrs	r16, 4
    2c16:	0d c0       	rjmp	.+26     	; 0x2c32 <vfprintf+0x5be>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	ec 0d       	add	r30, r12
    2c1c:	f1 1d       	adc	r31, r1
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 33       	cpi	r24, 0x30	; 48
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <vfprintf+0x5b4>
    2c24:	09 7e       	andi	r16, 0xE9	; 233
    2c26:	09 c0       	rjmp	.+18     	; 0x2c3a <vfprintf+0x5c6>
    2c28:	02 ff       	sbrs	r16, 2
    2c2a:	06 c0       	rjmp	.+12     	; 0x2c38 <vfprintf+0x5c4>
    2c2c:	d3 94       	inc	r13
    2c2e:	d3 94       	inc	r13
    2c30:	04 c0       	rjmp	.+8      	; 0x2c3a <vfprintf+0x5c6>
    2c32:	80 2f       	mov	r24, r16
    2c34:	86 78       	andi	r24, 0x86	; 134
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <vfprintf+0x5c6>
    2c38:	d3 94       	inc	r13
    2c3a:	03 fd       	sbrc	r16, 3
    2c3c:	11 c0       	rjmp	.+34     	; 0x2c60 <vfprintf+0x5ec>
    2c3e:	00 ff       	sbrs	r16, 0
    2c40:	06 c0       	rjmp	.+12     	; 0x2c4e <vfprintf+0x5da>
    2c42:	1c 2d       	mov	r17, r12
    2c44:	d5 14       	cp	r13, r5
    2c46:	80 f4       	brcc	.+32     	; 0x2c68 <vfprintf+0x5f4>
    2c48:	15 0d       	add	r17, r5
    2c4a:	1d 19       	sub	r17, r13
    2c4c:	0d c0       	rjmp	.+26     	; 0x2c68 <vfprintf+0x5f4>
    2c4e:	d5 14       	cp	r13, r5
    2c50:	58 f4       	brcc	.+22     	; 0x2c68 <vfprintf+0x5f4>
    2c52:	b7 01       	movw	r22, r14
    2c54:	80 e2       	ldi	r24, 0x20	; 32
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2c5c:	d3 94       	inc	r13
    2c5e:	f7 cf       	rjmp	.-18     	; 0x2c4e <vfprintf+0x5da>
    2c60:	d5 14       	cp	r13, r5
    2c62:	10 f4       	brcc	.+4      	; 0x2c68 <vfprintf+0x5f4>
    2c64:	5d 18       	sub	r5, r13
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <vfprintf+0x5f6>
    2c68:	51 2c       	mov	r5, r1
    2c6a:	04 ff       	sbrs	r16, 4
    2c6c:	10 c0       	rjmp	.+32     	; 0x2c8e <vfprintf+0x61a>
    2c6e:	b7 01       	movw	r22, r14
    2c70:	80 e3       	ldi	r24, 0x30	; 48
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2c78:	02 ff       	sbrs	r16, 2
    2c7a:	17 c0       	rjmp	.+46     	; 0x2caa <vfprintf+0x636>
    2c7c:	01 fd       	sbrc	r16, 1
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <vfprintf+0x612>
    2c80:	88 e7       	ldi	r24, 0x78	; 120
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <vfprintf+0x616>
    2c86:	88 e5       	ldi	r24, 0x58	; 88
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	b7 01       	movw	r22, r14
    2c8c:	0c c0       	rjmp	.+24     	; 0x2ca6 <vfprintf+0x632>
    2c8e:	80 2f       	mov	r24, r16
    2c90:	86 78       	andi	r24, 0x86	; 134
    2c92:	59 f0       	breq	.+22     	; 0x2caa <vfprintf+0x636>
    2c94:	01 ff       	sbrs	r16, 1
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <vfprintf+0x628>
    2c98:	8b e2       	ldi	r24, 0x2B	; 43
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <vfprintf+0x62a>
    2c9c:	80 e2       	ldi	r24, 0x20	; 32
    2c9e:	07 fd       	sbrc	r16, 7
    2ca0:	8d e2       	ldi	r24, 0x2D	; 45
    2ca2:	b7 01       	movw	r22, r14
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2caa:	c1 16       	cp	r12, r17
    2cac:	38 f4       	brcc	.+14     	; 0x2cbc <vfprintf+0x648>
    2cae:	b7 01       	movw	r22, r14
    2cb0:	80 e3       	ldi	r24, 0x30	; 48
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2cb8:	11 50       	subi	r17, 0x01	; 1
    2cba:	f7 cf       	rjmp	.-18     	; 0x2caa <vfprintf+0x636>
    2cbc:	ca 94       	dec	r12
    2cbe:	f3 01       	movw	r30, r6
    2cc0:	ec 0d       	add	r30, r12
    2cc2:	f1 1d       	adc	r31, r1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	b7 01       	movw	r22, r14
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2cce:	c1 10       	cpse	r12, r1
    2cd0:	f5 cf       	rjmp	.-22     	; 0x2cbc <vfprintf+0x648>
    2cd2:	15 c0       	rjmp	.+42     	; 0x2cfe <vfprintf+0x68a>
    2cd4:	f4 e0       	ldi	r31, 0x04	; 4
    2cd6:	f5 15       	cp	r31, r5
    2cd8:	60 f5       	brcc	.+88     	; 0x2d32 <vfprintf+0x6be>
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	58 1a       	sub	r5, r24
    2cde:	93 fe       	sbrs	r9, 3
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <vfprintf+0x6ac>
    2ce2:	01 11       	cpse	r16, r1
    2ce4:	27 c0       	rjmp	.+78     	; 0x2d34 <vfprintf+0x6c0>
    2ce6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ce8:	23 ff       	sbrs	r18, 3
    2cea:	2a c0       	rjmp	.+84     	; 0x2d40 <vfprintf+0x6cc>
    2cec:	04 e3       	ldi	r16, 0x34	; 52
    2cee:	11 e0       	ldi	r17, 0x01	; 1
    2cf0:	39 2d       	mov	r19, r9
    2cf2:	30 71       	andi	r19, 0x10	; 16
    2cf4:	93 2e       	mov	r9, r19
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	84 91       	lpm	r24, Z
    2cfa:	81 11       	cpse	r24, r1
    2cfc:	24 c0       	rjmp	.+72     	; 0x2d46 <vfprintf+0x6d2>
    2cfe:	55 20       	and	r5, r5
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <vfprintf+0x690>
    2d02:	e4 cc       	rjmp	.-1592   	; 0x26cc <vfprintf+0x58>
    2d04:	b7 01       	movw	r22, r14
    2d06:	80 e2       	ldi	r24, 0x20	; 32
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2d0e:	5a 94       	dec	r5
    2d10:	f6 cf       	rjmp	.-20     	; 0x2cfe <vfprintf+0x68a>
    2d12:	f7 01       	movw	r30, r14
    2d14:	86 81       	ldd	r24, Z+6	; 0x06
    2d16:	97 81       	ldd	r25, Z+7	; 0x07
    2d18:	26 c0       	rjmp	.+76     	; 0x2d66 <vfprintf+0x6f2>
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	23 c0       	rjmp	.+70     	; 0x2d66 <vfprintf+0x6f2>
    2d20:	b7 01       	movw	r22, r14
    2d22:	80 e2       	ldi	r24, 0x20	; 32
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2d2a:	5a 94       	dec	r5
    2d2c:	51 10       	cpse	r5, r1
    2d2e:	f8 cf       	rjmp	.-16     	; 0x2d20 <vfprintf+0x6ac>
    2d30:	d8 cf       	rjmp	.-80     	; 0x2ce2 <vfprintf+0x66e>
    2d32:	51 2c       	mov	r5, r1
    2d34:	b7 01       	movw	r22, r14
    2d36:	80 2f       	mov	r24, r16
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2d3e:	d3 cf       	rjmp	.-90     	; 0x2ce6 <vfprintf+0x672>
    2d40:	08 e3       	ldi	r16, 0x38	; 56
    2d42:	11 e0       	ldi	r17, 0x01	; 1
    2d44:	d5 cf       	rjmp	.-86     	; 0x2cf0 <vfprintf+0x67c>
    2d46:	91 10       	cpse	r9, r1
    2d48:	80 52       	subi	r24, 0x20	; 32
    2d4a:	b7 01       	movw	r22, r14
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 5d 18 	call	0x30ba	; 0x30ba <fputc>
    2d52:	0f 5f       	subi	r16, 0xFF	; 255
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	cf cf       	rjmp	.-98     	; 0x2cf6 <vfprintf+0x682>
    2d58:	23 e0       	ldi	r18, 0x03	; 3
    2d5a:	25 15       	cp	r18, r5
    2d5c:	10 f4       	brcc	.+4      	; 0x2d62 <vfprintf+0x6ee>
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	bd cf       	rjmp	.-134    	; 0x2cdc <vfprintf+0x668>
    2d62:	51 2c       	mov	r5, r1
    2d64:	c0 cf       	rjmp	.-128    	; 0x2ce6 <vfprintf+0x672>
    2d66:	60 96       	adiw	r28, 0x10	; 16
    2d68:	e2 e1       	ldi	r30, 0x12	; 18
    2d6a:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__epilogue_restores__>

00002d6e <__mulsi3>:
    2d6e:	db 01       	movw	r26, r22
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	0e 94 ef 16 	call	0x2dde	; 0x2dde <__muluhisi3>
    2d78:	bf 91       	pop	r27
    2d7a:	af 91       	pop	r26
    2d7c:	a2 9f       	mul	r26, r18
    2d7e:	80 0d       	add	r24, r0
    2d80:	91 1d       	adc	r25, r1
    2d82:	a3 9f       	mul	r26, r19
    2d84:	90 0d       	add	r25, r0
    2d86:	b2 9f       	mul	r27, r18
    2d88:	90 0d       	add	r25, r0
    2d8a:	11 24       	eor	r1, r1
    2d8c:	08 95       	ret

00002d8e <__udivmodsi4>:
    2d8e:	a1 e2       	ldi	r26, 0x21	; 33
    2d90:	1a 2e       	mov	r1, r26
    2d92:	aa 1b       	sub	r26, r26
    2d94:	bb 1b       	sub	r27, r27
    2d96:	fd 01       	movw	r30, r26
    2d98:	0d c0       	rjmp	.+26     	; 0x2db4 <__udivmodsi4_ep>

00002d9a <__udivmodsi4_loop>:
    2d9a:	aa 1f       	adc	r26, r26
    2d9c:	bb 1f       	adc	r27, r27
    2d9e:	ee 1f       	adc	r30, r30
    2da0:	ff 1f       	adc	r31, r31
    2da2:	a2 17       	cp	r26, r18
    2da4:	b3 07       	cpc	r27, r19
    2da6:	e4 07       	cpc	r30, r20
    2da8:	f5 07       	cpc	r31, r21
    2daa:	20 f0       	brcs	.+8      	; 0x2db4 <__udivmodsi4_ep>
    2dac:	a2 1b       	sub	r26, r18
    2dae:	b3 0b       	sbc	r27, r19
    2db0:	e4 0b       	sbc	r30, r20
    2db2:	f5 0b       	sbc	r31, r21

00002db4 <__udivmodsi4_ep>:
    2db4:	66 1f       	adc	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	88 1f       	adc	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	1a 94       	dec	r1
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <__udivmodsi4_loop>
    2dc0:	60 95       	com	r22
    2dc2:	70 95       	com	r23
    2dc4:	80 95       	com	r24
    2dc6:	90 95       	com	r25
    2dc8:	9b 01       	movw	r18, r22
    2dca:	ac 01       	movw	r20, r24
    2dcc:	bd 01       	movw	r22, r26
    2dce:	cf 01       	movw	r24, r30
    2dd0:	08 95       	ret

00002dd2 <__tablejump2__>:
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	05 90       	lpm	r0, Z+
    2dd8:	f4 91       	lpm	r31, Z
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	09 94       	ijmp

00002dde <__muluhisi3>:
    2dde:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__umulhisi3>
    2de2:	a5 9f       	mul	r26, r21
    2de4:	90 0d       	add	r25, r0
    2de6:	b4 9f       	mul	r27, r20
    2de8:	90 0d       	add	r25, r0
    2dea:	a4 9f       	mul	r26, r20
    2dec:	80 0d       	add	r24, r0
    2dee:	91 1d       	adc	r25, r1
    2df0:	11 24       	eor	r1, r1
    2df2:	08 95       	ret

00002df4 <__prologue_saves__>:
    2df4:	2f 92       	push	r2
    2df6:	3f 92       	push	r3
    2df8:	4f 92       	push	r4
    2dfa:	5f 92       	push	r5
    2dfc:	6f 92       	push	r6
    2dfe:	7f 92       	push	r7
    2e00:	8f 92       	push	r8
    2e02:	9f 92       	push	r9
    2e04:	af 92       	push	r10
    2e06:	bf 92       	push	r11
    2e08:	cf 92       	push	r12
    2e0a:	df 92       	push	r13
    2e0c:	ef 92       	push	r14
    2e0e:	ff 92       	push	r15
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	ca 1b       	sub	r28, r26
    2e1e:	db 0b       	sbc	r29, r27
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	09 94       	ijmp

00002e2c <__epilogue_restores__>:
    2e2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e2e:	39 88       	ldd	r3, Y+17	; 0x11
    2e30:	48 88       	ldd	r4, Y+16	; 0x10
    2e32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e40:	c8 84       	ldd	r12, Y+8	; 0x08
    2e42:	df 80       	ldd	r13, Y+7	; 0x07
    2e44:	ee 80       	ldd	r14, Y+6	; 0x06
    2e46:	fd 80       	ldd	r15, Y+5	; 0x05
    2e48:	0c 81       	ldd	r16, Y+4	; 0x04
    2e4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e50:	ce 0f       	add	r28, r30
    2e52:	d1 1d       	adc	r29, r1
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	ed 01       	movw	r28, r26
    2e60:	08 95       	ret

00002e62 <__umulhisi3>:
    2e62:	a2 9f       	mul	r26, r18
    2e64:	b0 01       	movw	r22, r0
    2e66:	b3 9f       	mul	r27, r19
    2e68:	c0 01       	movw	r24, r0
    2e6a:	a3 9f       	mul	r26, r19
    2e6c:	70 0d       	add	r23, r0
    2e6e:	81 1d       	adc	r24, r1
    2e70:	11 24       	eor	r1, r1
    2e72:	91 1d       	adc	r25, r1
    2e74:	b2 9f       	mul	r27, r18
    2e76:	70 0d       	add	r23, r0
    2e78:	81 1d       	adc	r24, r1
    2e7a:	11 24       	eor	r1, r1
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	08 95       	ret

00002e80 <atoi>:
    2e80:	fc 01       	movw	r30, r24
    2e82:	88 27       	eor	r24, r24
    2e84:	99 27       	eor	r25, r25
    2e86:	e8 94       	clt
    2e88:	21 91       	ld	r18, Z+
    2e8a:	20 32       	cpi	r18, 0x20	; 32
    2e8c:	e9 f3       	breq	.-6      	; 0x2e88 <atoi+0x8>
    2e8e:	29 30       	cpi	r18, 0x09	; 9
    2e90:	10 f0       	brcs	.+4      	; 0x2e96 <atoi+0x16>
    2e92:	2e 30       	cpi	r18, 0x0E	; 14
    2e94:	c8 f3       	brcs	.-14     	; 0x2e88 <atoi+0x8>
    2e96:	2b 32       	cpi	r18, 0x2B	; 43
    2e98:	41 f0       	breq	.+16     	; 0x2eaa <atoi+0x2a>
    2e9a:	2d 32       	cpi	r18, 0x2D	; 45
    2e9c:	39 f4       	brne	.+14     	; 0x2eac <atoi+0x2c>
    2e9e:	68 94       	set
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <atoi+0x2a>
    2ea2:	0e 94 55 18 	call	0x30aa	; 0x30aa <__mulhi_const_10>
    2ea6:	82 0f       	add	r24, r18
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	21 91       	ld	r18, Z+
    2eac:	20 53       	subi	r18, 0x30	; 48
    2eae:	2a 30       	cpi	r18, 0x0A	; 10
    2eb0:	c0 f3       	brcs	.-16     	; 0x2ea2 <atoi+0x22>
    2eb2:	1e f4       	brtc	.+6      	; 0x2eba <atoi+0x3a>
    2eb4:	90 95       	com	r25
    2eb6:	81 95       	neg	r24
    2eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eba:	08 95       	ret

00002ebc <__ftoa_engine>:
    2ebc:	28 30       	cpi	r18, 0x08	; 8
    2ebe:	08 f0       	brcs	.+2      	; 0x2ec2 <__ftoa_engine+0x6>
    2ec0:	27 e0       	ldi	r18, 0x07	; 7
    2ec2:	33 27       	eor	r19, r19
    2ec4:	da 01       	movw	r26, r20
    2ec6:	99 0f       	add	r25, r25
    2ec8:	31 1d       	adc	r19, r1
    2eca:	87 fd       	sbrc	r24, 7
    2ecc:	91 60       	ori	r25, 0x01	; 1
    2ece:	00 96       	adiw	r24, 0x00	; 0
    2ed0:	61 05       	cpc	r22, r1
    2ed2:	71 05       	cpc	r23, r1
    2ed4:	39 f4       	brne	.+14     	; 0x2ee4 <__ftoa_engine+0x28>
    2ed6:	32 60       	ori	r19, 0x02	; 2
    2ed8:	2e 5f       	subi	r18, 0xFE	; 254
    2eda:	3d 93       	st	X+, r19
    2edc:	30 e3       	ldi	r19, 0x30	; 48
    2ede:	2a 95       	dec	r18
    2ee0:	e1 f7       	brne	.-8      	; 0x2eda <__ftoa_engine+0x1e>
    2ee2:	08 95       	ret
    2ee4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ee6:	30 f0       	brcs	.+12     	; 0x2ef4 <__ftoa_engine+0x38>
    2ee8:	80 38       	cpi	r24, 0x80	; 128
    2eea:	71 05       	cpc	r23, r1
    2eec:	61 05       	cpc	r22, r1
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <__ftoa_engine+0x36>
    2ef0:	3c 5f       	subi	r19, 0xFC	; 252
    2ef2:	3c 5f       	subi	r19, 0xFC	; 252
    2ef4:	3d 93       	st	X+, r19
    2ef6:	91 30       	cpi	r25, 0x01	; 1
    2ef8:	08 f0       	brcs	.+2      	; 0x2efc <__ftoa_engine+0x40>
    2efa:	80 68       	ori	r24, 0x80	; 128
    2efc:	91 1d       	adc	r25, r1
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	1f 93       	push	r17
    2f04:	0f 93       	push	r16
    2f06:	ff 92       	push	r15
    2f08:	ef 92       	push	r14
    2f0a:	19 2f       	mov	r17, r25
    2f0c:	98 7f       	andi	r25, 0xF8	; 248
    2f0e:	96 95       	lsr	r25
    2f10:	e9 2f       	mov	r30, r25
    2f12:	96 95       	lsr	r25
    2f14:	96 95       	lsr	r25
    2f16:	e9 0f       	add	r30, r25
    2f18:	ff 27       	eor	r31, r31
    2f1a:	ea 56       	subi	r30, 0x6A	; 106
    2f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1e:	99 27       	eor	r25, r25
    2f20:	33 27       	eor	r19, r19
    2f22:	ee 24       	eor	r14, r14
    2f24:	ff 24       	eor	r15, r15
    2f26:	a7 01       	movw	r20, r14
    2f28:	e7 01       	movw	r28, r14
    2f2a:	05 90       	lpm	r0, Z+
    2f2c:	08 94       	sec
    2f2e:	07 94       	ror	r0
    2f30:	28 f4       	brcc	.+10     	; 0x2f3c <__ftoa_engine+0x80>
    2f32:	36 0f       	add	r19, r22
    2f34:	e7 1e       	adc	r14, r23
    2f36:	f8 1e       	adc	r15, r24
    2f38:	49 1f       	adc	r20, r25
    2f3a:	51 1d       	adc	r21, r1
    2f3c:	66 0f       	add	r22, r22
    2f3e:	77 1f       	adc	r23, r23
    2f40:	88 1f       	adc	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	06 94       	lsr	r0
    2f46:	a1 f7       	brne	.-24     	; 0x2f30 <__ftoa_engine+0x74>
    2f48:	05 90       	lpm	r0, Z+
    2f4a:	07 94       	ror	r0
    2f4c:	28 f4       	brcc	.+10     	; 0x2f58 <__ftoa_engine+0x9c>
    2f4e:	e7 0e       	add	r14, r23
    2f50:	f8 1e       	adc	r15, r24
    2f52:	49 1f       	adc	r20, r25
    2f54:	56 1f       	adc	r21, r22
    2f56:	c1 1d       	adc	r28, r1
    2f58:	77 0f       	add	r23, r23
    2f5a:	88 1f       	adc	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	66 1f       	adc	r22, r22
    2f60:	06 94       	lsr	r0
    2f62:	a1 f7       	brne	.-24     	; 0x2f4c <__ftoa_engine+0x90>
    2f64:	05 90       	lpm	r0, Z+
    2f66:	07 94       	ror	r0
    2f68:	28 f4       	brcc	.+10     	; 0x2f74 <__ftoa_engine+0xb8>
    2f6a:	f8 0e       	add	r15, r24
    2f6c:	49 1f       	adc	r20, r25
    2f6e:	56 1f       	adc	r21, r22
    2f70:	c7 1f       	adc	r28, r23
    2f72:	d1 1d       	adc	r29, r1
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	66 1f       	adc	r22, r22
    2f7a:	77 1f       	adc	r23, r23
    2f7c:	06 94       	lsr	r0
    2f7e:	a1 f7       	brne	.-24     	; 0x2f68 <__ftoa_engine+0xac>
    2f80:	05 90       	lpm	r0, Z+
    2f82:	07 94       	ror	r0
    2f84:	20 f4       	brcc	.+8      	; 0x2f8e <__ftoa_engine+0xd2>
    2f86:	49 0f       	add	r20, r25
    2f88:	56 1f       	adc	r21, r22
    2f8a:	c7 1f       	adc	r28, r23
    2f8c:	d8 1f       	adc	r29, r24
    2f8e:	99 0f       	add	r25, r25
    2f90:	66 1f       	adc	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	88 1f       	adc	r24, r24
    2f96:	06 94       	lsr	r0
    2f98:	a9 f7       	brne	.-22     	; 0x2f84 <__ftoa_engine+0xc8>
    2f9a:	84 91       	lpm	r24, Z
    2f9c:	10 95       	com	r17
    2f9e:	17 70       	andi	r17, 0x07	; 7
    2fa0:	41 f0       	breq	.+16     	; 0x2fb2 <__ftoa_engine+0xf6>
    2fa2:	d6 95       	lsr	r29
    2fa4:	c7 95       	ror	r28
    2fa6:	57 95       	ror	r21
    2fa8:	47 95       	ror	r20
    2faa:	f7 94       	ror	r15
    2fac:	e7 94       	ror	r14
    2fae:	1a 95       	dec	r17
    2fb0:	c1 f7       	brne	.-16     	; 0x2fa2 <__ftoa_engine+0xe6>
    2fb2:	ec e3       	ldi	r30, 0x3C	; 60
    2fb4:	f1 e0       	ldi	r31, 0x01	; 1
    2fb6:	68 94       	set
    2fb8:	15 90       	lpm	r1, Z+
    2fba:	15 91       	lpm	r17, Z+
    2fbc:	35 91       	lpm	r19, Z+
    2fbe:	65 91       	lpm	r22, Z+
    2fc0:	95 91       	lpm	r25, Z+
    2fc2:	05 90       	lpm	r0, Z+
    2fc4:	7f e2       	ldi	r23, 0x2F	; 47
    2fc6:	73 95       	inc	r23
    2fc8:	e1 18       	sub	r14, r1
    2fca:	f1 0a       	sbc	r15, r17
    2fcc:	43 0b       	sbc	r20, r19
    2fce:	56 0b       	sbc	r21, r22
    2fd0:	c9 0b       	sbc	r28, r25
    2fd2:	d0 09       	sbc	r29, r0
    2fd4:	c0 f7       	brcc	.-16     	; 0x2fc6 <__ftoa_engine+0x10a>
    2fd6:	e1 0c       	add	r14, r1
    2fd8:	f1 1e       	adc	r15, r17
    2fda:	43 1f       	adc	r20, r19
    2fdc:	56 1f       	adc	r21, r22
    2fde:	c9 1f       	adc	r28, r25
    2fe0:	d0 1d       	adc	r29, r0
    2fe2:	7e f4       	brtc	.+30     	; 0x3002 <__ftoa_engine+0x146>
    2fe4:	70 33       	cpi	r23, 0x30	; 48
    2fe6:	11 f4       	brne	.+4      	; 0x2fec <__ftoa_engine+0x130>
    2fe8:	8a 95       	dec	r24
    2fea:	e6 cf       	rjmp	.-52     	; 0x2fb8 <__ftoa_engine+0xfc>
    2fec:	e8 94       	clt
    2fee:	01 50       	subi	r16, 0x01	; 1
    2ff0:	30 f0       	brcs	.+12     	; 0x2ffe <__ftoa_engine+0x142>
    2ff2:	08 0f       	add	r16, r24
    2ff4:	0a f4       	brpl	.+2      	; 0x2ff8 <__ftoa_engine+0x13c>
    2ff6:	00 27       	eor	r16, r16
    2ff8:	02 17       	cp	r16, r18
    2ffa:	08 f4       	brcc	.+2      	; 0x2ffe <__ftoa_engine+0x142>
    2ffc:	20 2f       	mov	r18, r16
    2ffe:	23 95       	inc	r18
    3000:	02 2f       	mov	r16, r18
    3002:	7a 33       	cpi	r23, 0x3A	; 58
    3004:	28 f0       	brcs	.+10     	; 0x3010 <__ftoa_engine+0x154>
    3006:	79 e3       	ldi	r23, 0x39	; 57
    3008:	7d 93       	st	X+, r23
    300a:	2a 95       	dec	r18
    300c:	e9 f7       	brne	.-6      	; 0x3008 <__ftoa_engine+0x14c>
    300e:	10 c0       	rjmp	.+32     	; 0x3030 <__ftoa_engine+0x174>
    3010:	7d 93       	st	X+, r23
    3012:	2a 95       	dec	r18
    3014:	89 f6       	brne	.-94     	; 0x2fb8 <__ftoa_engine+0xfc>
    3016:	06 94       	lsr	r0
    3018:	97 95       	ror	r25
    301a:	67 95       	ror	r22
    301c:	37 95       	ror	r19
    301e:	17 95       	ror	r17
    3020:	17 94       	ror	r1
    3022:	e1 18       	sub	r14, r1
    3024:	f1 0a       	sbc	r15, r17
    3026:	43 0b       	sbc	r20, r19
    3028:	56 0b       	sbc	r21, r22
    302a:	c9 0b       	sbc	r28, r25
    302c:	d0 09       	sbc	r29, r0
    302e:	98 f0       	brcs	.+38     	; 0x3056 <__ftoa_engine+0x19a>
    3030:	23 95       	inc	r18
    3032:	7e 91       	ld	r23, -X
    3034:	73 95       	inc	r23
    3036:	7a 33       	cpi	r23, 0x3A	; 58
    3038:	08 f0       	brcs	.+2      	; 0x303c <__ftoa_engine+0x180>
    303a:	70 e3       	ldi	r23, 0x30	; 48
    303c:	7c 93       	st	X, r23
    303e:	20 13       	cpse	r18, r16
    3040:	b8 f7       	brcc	.-18     	; 0x3030 <__ftoa_engine+0x174>
    3042:	7e 91       	ld	r23, -X
    3044:	70 61       	ori	r23, 0x10	; 16
    3046:	7d 93       	st	X+, r23
    3048:	30 f0       	brcs	.+12     	; 0x3056 <__ftoa_engine+0x19a>
    304a:	83 95       	inc	r24
    304c:	71 e3       	ldi	r23, 0x31	; 49
    304e:	7d 93       	st	X+, r23
    3050:	70 e3       	ldi	r23, 0x30	; 48
    3052:	2a 95       	dec	r18
    3054:	e1 f7       	brne	.-8      	; 0x304e <__ftoa_engine+0x192>
    3056:	11 24       	eor	r1, r1
    3058:	ef 90       	pop	r14
    305a:	ff 90       	pop	r15
    305c:	0f 91       	pop	r16
    305e:	1f 91       	pop	r17
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	99 27       	eor	r25, r25
    3066:	87 fd       	sbrc	r24, 7
    3068:	90 95       	com	r25
    306a:	08 95       	ret

0000306c <strnlen_P>:
    306c:	fc 01       	movw	r30, r24
    306e:	05 90       	lpm	r0, Z+
    3070:	61 50       	subi	r22, 0x01	; 1
    3072:	70 40       	sbci	r23, 0x00	; 0
    3074:	01 10       	cpse	r0, r1
    3076:	d8 f7       	brcc	.-10     	; 0x306e <strnlen_P+0x2>
    3078:	80 95       	com	r24
    307a:	90 95       	com	r25
    307c:	8e 0f       	add	r24, r30
    307e:	9f 1f       	adc	r25, r31
    3080:	08 95       	ret

00003082 <strcmp>:
    3082:	fb 01       	movw	r30, r22
    3084:	dc 01       	movw	r26, r24
    3086:	8d 91       	ld	r24, X+
    3088:	01 90       	ld	r0, Z+
    308a:	80 19       	sub	r24, r0
    308c:	01 10       	cpse	r0, r1
    308e:	d9 f3       	breq	.-10     	; 0x3086 <strcmp+0x4>
    3090:	99 0b       	sbc	r25, r25
    3092:	08 95       	ret

00003094 <strnlen>:
    3094:	fc 01       	movw	r30, r24
    3096:	61 50       	subi	r22, 0x01	; 1
    3098:	70 40       	sbci	r23, 0x00	; 0
    309a:	01 90       	ld	r0, Z+
    309c:	01 10       	cpse	r0, r1
    309e:	d8 f7       	brcc	.-10     	; 0x3096 <strnlen+0x2>
    30a0:	80 95       	com	r24
    30a2:	90 95       	com	r25
    30a4:	8e 0f       	add	r24, r30
    30a6:	9f 1f       	adc	r25, r31
    30a8:	08 95       	ret

000030aa <__mulhi_const_10>:
    30aa:	7a e0       	ldi	r23, 0x0A	; 10
    30ac:	97 9f       	mul	r25, r23
    30ae:	90 2d       	mov	r25, r0
    30b0:	87 9f       	mul	r24, r23
    30b2:	80 2d       	mov	r24, r0
    30b4:	91 0d       	add	r25, r1
    30b6:	11 24       	eor	r1, r1
    30b8:	08 95       	ret

000030ba <fputc>:
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	fb 01       	movw	r30, r22
    30c4:	23 81       	ldd	r18, Z+3	; 0x03
    30c6:	21 fd       	sbrc	r18, 1
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <fputc+0x16>
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
    30cc:	9f ef       	ldi	r25, 0xFF	; 255
    30ce:	2c c0       	rjmp	.+88     	; 0x3128 <fputc+0x6e>
    30d0:	22 ff       	sbrs	r18, 2
    30d2:	16 c0       	rjmp	.+44     	; 0x3100 <fputc+0x46>
    30d4:	46 81       	ldd	r20, Z+6	; 0x06
    30d6:	57 81       	ldd	r21, Z+7	; 0x07
    30d8:	24 81       	ldd	r18, Z+4	; 0x04
    30da:	35 81       	ldd	r19, Z+5	; 0x05
    30dc:	42 17       	cp	r20, r18
    30de:	53 07       	cpc	r21, r19
    30e0:	44 f4       	brge	.+16     	; 0x30f2 <fputc+0x38>
    30e2:	a0 81       	ld	r26, Z
    30e4:	b1 81       	ldd	r27, Z+1	; 0x01
    30e6:	9d 01       	movw	r18, r26
    30e8:	2f 5f       	subi	r18, 0xFF	; 255
    30ea:	3f 4f       	sbci	r19, 0xFF	; 255
    30ec:	31 83       	std	Z+1, r19	; 0x01
    30ee:	20 83       	st	Z, r18
    30f0:	8c 93       	st	X, r24
    30f2:	26 81       	ldd	r18, Z+6	; 0x06
    30f4:	37 81       	ldd	r19, Z+7	; 0x07
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	37 83       	std	Z+7, r19	; 0x07
    30fc:	26 83       	std	Z+6, r18	; 0x06
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <fputc+0x6e>
    3100:	8b 01       	movw	r16, r22
    3102:	ec 01       	movw	r28, r24
    3104:	fb 01       	movw	r30, r22
    3106:	00 84       	ldd	r0, Z+8	; 0x08
    3108:	f1 85       	ldd	r31, Z+9	; 0x09
    310a:	e0 2d       	mov	r30, r0
    310c:	09 95       	icall
    310e:	89 2b       	or	r24, r25
    3110:	e1 f6       	brne	.-72     	; 0x30ca <fputc+0x10>
    3112:	d8 01       	movw	r26, r16
    3114:	16 96       	adiw	r26, 0x06	; 6
    3116:	8d 91       	ld	r24, X+
    3118:	9c 91       	ld	r25, X
    311a:	17 97       	sbiw	r26, 0x07	; 7
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	17 96       	adiw	r26, 0x07	; 7
    3120:	9c 93       	st	X, r25
    3122:	8e 93       	st	-X, r24
    3124:	16 97       	sbiw	r26, 0x06	; 6
    3126:	ce 01       	movw	r24, r28
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <sprintf>:
    3132:	ae e0       	ldi	r26, 0x0E	; 14
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	ef e9       	ldi	r30, 0x9F	; 159
    3138:	f8 e1       	ldi	r31, 0x18	; 24
    313a:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x1c>
    313e:	0d 89       	ldd	r16, Y+21	; 0x15
    3140:	1e 89       	ldd	r17, Y+22	; 0x16
    3142:	86 e0       	ldi	r24, 0x06	; 6
    3144:	8c 83       	std	Y+4, r24	; 0x04
    3146:	1a 83       	std	Y+2, r17	; 0x02
    3148:	09 83       	std	Y+1, r16	; 0x01
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	9f e7       	ldi	r25, 0x7F	; 127
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
    3152:	ae 01       	movw	r20, r28
    3154:	47 5e       	subi	r20, 0xE7	; 231
    3156:	5f 4f       	sbci	r21, 0xFF	; 255
    3158:	6f 89       	ldd	r22, Y+23	; 0x17
    315a:	78 8d       	ldd	r23, Y+24	; 0x18
    315c:	ce 01       	movw	r24, r28
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 3a 13 	call	0x2674	; 0x2674 <vfprintf>
    3164:	ef 81       	ldd	r30, Y+7	; 0x07
    3166:	f8 85       	ldd	r31, Y+8	; 0x08
    3168:	e0 0f       	add	r30, r16
    316a:	f1 1f       	adc	r31, r17
    316c:	10 82       	st	Z, r1
    316e:	2e 96       	adiw	r28, 0x0e	; 14
    3170:	e4 e0       	ldi	r30, 0x04	; 4
    3172:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x1c>

00003176 <__ultoa_invert>:
    3176:	fa 01       	movw	r30, r20
    3178:	aa 27       	eor	r26, r26
    317a:	28 30       	cpi	r18, 0x08	; 8
    317c:	51 f1       	breq	.+84     	; 0x31d2 <__ultoa_invert+0x5c>
    317e:	20 31       	cpi	r18, 0x10	; 16
    3180:	81 f1       	breq	.+96     	; 0x31e2 <__ultoa_invert+0x6c>
    3182:	e8 94       	clt
    3184:	6f 93       	push	r22
    3186:	6e 7f       	andi	r22, 0xFE	; 254
    3188:	6e 5f       	subi	r22, 0xFE	; 254
    318a:	7f 4f       	sbci	r23, 0xFF	; 255
    318c:	8f 4f       	sbci	r24, 0xFF	; 255
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	af 4f       	sbci	r26, 0xFF	; 255
    3192:	b1 e0       	ldi	r27, 0x01	; 1
    3194:	3e d0       	rcall	.+124    	; 0x3212 <__ultoa_invert+0x9c>
    3196:	b4 e0       	ldi	r27, 0x04	; 4
    3198:	3c d0       	rcall	.+120    	; 0x3212 <__ultoa_invert+0x9c>
    319a:	67 0f       	add	r22, r23
    319c:	78 1f       	adc	r23, r24
    319e:	89 1f       	adc	r24, r25
    31a0:	9a 1f       	adc	r25, r26
    31a2:	a1 1d       	adc	r26, r1
    31a4:	68 0f       	add	r22, r24
    31a6:	79 1f       	adc	r23, r25
    31a8:	8a 1f       	adc	r24, r26
    31aa:	91 1d       	adc	r25, r1
    31ac:	a1 1d       	adc	r26, r1
    31ae:	6a 0f       	add	r22, r26
    31b0:	71 1d       	adc	r23, r1
    31b2:	81 1d       	adc	r24, r1
    31b4:	91 1d       	adc	r25, r1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	20 d0       	rcall	.+64     	; 0x31fa <__ultoa_invert+0x84>
    31ba:	09 f4       	brne	.+2      	; 0x31be <__ultoa_invert+0x48>
    31bc:	68 94       	set
    31be:	3f 91       	pop	r19
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	26 9f       	mul	r18, r22
    31c4:	11 24       	eor	r1, r1
    31c6:	30 19       	sub	r19, r0
    31c8:	30 5d       	subi	r19, 0xD0	; 208
    31ca:	31 93       	st	Z+, r19
    31cc:	de f6       	brtc	.-74     	; 0x3184 <__ultoa_invert+0xe>
    31ce:	cf 01       	movw	r24, r30
    31d0:	08 95       	ret
    31d2:	46 2f       	mov	r20, r22
    31d4:	47 70       	andi	r20, 0x07	; 7
    31d6:	40 5d       	subi	r20, 0xD0	; 208
    31d8:	41 93       	st	Z+, r20
    31da:	b3 e0       	ldi	r27, 0x03	; 3
    31dc:	0f d0       	rcall	.+30     	; 0x31fc <__ultoa_invert+0x86>
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__ultoa_invert+0x5c>
    31e0:	f6 cf       	rjmp	.-20     	; 0x31ce <__ultoa_invert+0x58>
    31e2:	46 2f       	mov	r20, r22
    31e4:	4f 70       	andi	r20, 0x0F	; 15
    31e6:	40 5d       	subi	r20, 0xD0	; 208
    31e8:	4a 33       	cpi	r20, 0x3A	; 58
    31ea:	18 f0       	brcs	.+6      	; 0x31f2 <__ultoa_invert+0x7c>
    31ec:	49 5d       	subi	r20, 0xD9	; 217
    31ee:	31 fd       	sbrc	r19, 1
    31f0:	40 52       	subi	r20, 0x20	; 32
    31f2:	41 93       	st	Z+, r20
    31f4:	02 d0       	rcall	.+4      	; 0x31fa <__ultoa_invert+0x84>
    31f6:	a9 f7       	brne	.-22     	; 0x31e2 <__ultoa_invert+0x6c>
    31f8:	ea cf       	rjmp	.-44     	; 0x31ce <__ultoa_invert+0x58>
    31fa:	b4 e0       	ldi	r27, 0x04	; 4
    31fc:	a6 95       	lsr	r26
    31fe:	97 95       	ror	r25
    3200:	87 95       	ror	r24
    3202:	77 95       	ror	r23
    3204:	67 95       	ror	r22
    3206:	ba 95       	dec	r27
    3208:	c9 f7       	brne	.-14     	; 0x31fc <__ultoa_invert+0x86>
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	61 05       	cpc	r22, r1
    320e:	71 05       	cpc	r23, r1
    3210:	08 95       	ret
    3212:	9b 01       	movw	r18, r22
    3214:	ac 01       	movw	r20, r24
    3216:	0a 2e       	mov	r0, r26
    3218:	06 94       	lsr	r0
    321a:	57 95       	ror	r21
    321c:	47 95       	ror	r20
    321e:	37 95       	ror	r19
    3220:	27 95       	ror	r18
    3222:	ba 95       	dec	r27
    3224:	c9 f7       	brne	.-14     	; 0x3218 <__ultoa_invert+0xa2>
    3226:	62 0f       	add	r22, r18
    3228:	73 1f       	adc	r23, r19
    322a:	84 1f       	adc	r24, r20
    322c:	95 1f       	adc	r25, r21
    322e:	a0 1d       	adc	r26, r0
    3230:	08 95       	ret

00003232 <_exit>:
    3232:	f8 94       	cli

00003234 <__stop_program>:
    3234:	ff cf       	rjmp	.-2      	; 0x3234 <__stop_program>
